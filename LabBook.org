#+TITLE: LabBook
#+AUTHOR: Anderson Mattheus Maliszewski
#+STARTUP: overview indent
#+TAGS: noexport(n) deprecated(d) 
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+SEQ_TODO: TODO(t!) STARTED(s!) WAITING(w!) | DONE(d!) CANCELLED(c!) DEFERRED(f!)

This LabBook is for the *25th IEEE Symposium on Computers and
Communications (ISCC) 2020* paper and has a wealth of informations
about the entire process used during the proposed experiments. To
reproduce this evaluation, you can follow the steps below. Have fun!

#+BEGIN_QUOTE
*Reporting errors*: This repository has several links to self-contained
 files as well as links from the Internet, so if you try to reproduce
 it and find broken links or other problems, please tell me everything
 so that I can improve it. :)
#+END_QUOTE

* Experimental Project
** Objective
   Assess the impact of the network interconnection on HPC
   applications regarding performance and cost-effiency. Three different
   instances sizes (A10, F8, and DS4_v2) were used. The MPI-PingPong benchmark of
   the [[https://software.intel.com/en-us/articles/intel-mpi-benchmarks][Intel MPI Benchmarks]] suite was executed to first characterize
   the interconnection latency and bandwidth. Then we executed the NPB
   set of synthetic benchmarks and one real application (Alya). [[https://www.nas.nasa.gov/publications/npb.html][NAS
   Parallel Benchmarks (NPB)]] set version 3.4 with input *class D* was
   used because it represent several patterns of real HPC
   applications. [[https://www.bsc.es/research-development/research-areas/engineering-simulations/alya-high-performance-computational][Alya]] was used because this work tends to cover not
   only synthetic benchmarks which try to mimic real applications but
   rather use a real application.

** Benchmarks
Below is a brief overview about the benchmarks used.
*** Intel MPI Benchmark
The Intel® MPI Benchmarks perform a set of MPI performance
measurements for point-to-point and global communication operations
for a range of message sizes. The generated benchmark data fully
characterizes:
- Performance of a cluster system, including node performance, network
  latency, and throughput.
- Efficiency of the MPI implementation used.
There are several benchmarks included in this set, and in this
evaluation, only the MPI1 PingPong application was used to measure
interconnect latency and throughput.

*** NAS Parallel Benchmarks
The NAS Parallel Benchmarks (NPB) are a small set of programs designed
to help evaluate the performance of parallel supercomputers. The
benchmarks are derived from computational fluid dynamics (CFD)
applications. Problem sizes in NPB are predefined and indicated as
different classes.

In this evaluation, the original set of benchmarks from the NPB suite,
consisting of five kernels and three pseudo-applications were used
with the Messsage Passing Interface (MPI) parallel implementation.

Five Kernels:
- *IS* - Integer Sort, random memory access.
- *EP* - Embarrassingly Parallel.
- *CG* - Conjugate Gradient, irregular memory access and communication.
- *FT* - Discrete 3D fast Fourier Transform, all-to-all communication.
- *MG* - Multi-Grid on a sequence of meshes, long- and short-distance
  communication, memory intensive.

Three pseudo-applications: 
- *BT* - Block Tri-diagonal solver.
- *SP* - Scalar Penta-diagonal solver.
- *LU* - Lower-Upper Gauss-Seidel solver.

*** Alya
Alya is a high performance computational mechanics code to solve
complex coupled multi-physics / multi-scale / multi-domain problems,
which are mostly coming from the engineering realm. Among the
different physics solved by Alya we can mention:
incompressible/compressible flows, non-linear solid mechanics,
chemistry, particle transport, heat transfer, turbulence modeling,
electrical propagation, etc.

** Required Softwares
To execute the experiments, some required packages need to
be installed. They are:
- openmpi-bin - High performance message passing library (mpiexec).
- libopenmpi-dev - High performance message passing library (mpicc and
  mpifort).
- gfortran - GNU Fortran 95 compiler.

** System Information 
   To collect the information of all nodes used in the evaluation, it
   was used the [[SH/sys_info_collect.sh][System Information Collect]] script. The script executes
   automatically in the execution script.

** Bash Scripts Descriptions
- [[SH/experiments_exec.sh][Experiments Execution]] - This is the most essential script for this
  evaluation. It comprises from the beginning, when the variables are
  defined, until the end, when the experiments execution ends. To
  describe it, it has been divided into a few steps, which are:

  - *Step 1*: Define the variables and Create the Folders - Here all the
    variables with folders, software and bencharmark locations are
    defined and created.
  - *Step 2*: Collect System Information - In this step, the Execution
    Experiments script calls the System Information script to collect
    information about all nodes used in the evaluation.
  - *Step 3*: Download and Compile the Programs - Here all the softwares
    and benchmarks are downloaded and compiled with their respective
    compilers.
  - *Step 4*: Define Machine Files and Experimental Project - In this
    step the machine files and experimental project used during MPI
    execution are defined.
  - *Step 5*: Read the Experimental Project and Start the Execution
    Loop - This step reads the experimental project, start the MPI
    command line, and executes the experiments with their respective
    interconnection/application. At the end of each execution, the
    results are sent to the log files.
  - *Step 6*: Call the Experiment Characterization Script - This final
    step calls the experiment characterization script to start the
    characterization execution. Characterization and "normal"
    execution are done one after another because in characterization,
    the execution trace process records all the MPI primitives in a
    file and therefore can interfer in the normal execution
    considering resources usage (e.g., IO).
- [[SH/central.sh][Central]] - This script was created to allocate the nodes using the
  ~salloc~ command from Slurm Workload Manager and then pass the bash
  script execution command through ssh to start the Experiments
  Execution.
- [[SH/sys_info_collect.sh][System Information Collect]] - This is a crucial script to performance
  evaluations, which is executed before the benchmarks. It saves all the
  system information and sends the output to an ORG file. This output
  will undoubtedly help describe the results or even add system
  information 

** Design of Experiments
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled=FALSE)

library(DoE.base)
library(tidyverse)
  
set.seed(0)
ISCC2020 <- fac.design(factor.names = list(
  apps = c("bt", "ep", "cg", "mg", "lu",
           "sp", "is", "ft", "intel", "alya"),
  instance = c("F8", "A10", "DS4")),
  replications=30,
  randomize=TRUE)

ISCC2020 %>%
  select(-Blocks) %>%
  mutate(number=1:n()) -> ISCC2020
write_csv(ISCC2020, "MACHINE_FILES/experimental_project.csv")
#+end_src

#+RESULTS:
#+begin_example

Loading required package: grid
Loading required package: conf.design
Registered S3 method overwritten by 'DoE.base':
  method           from       
  factorize.factor conf.design

Attaching package: ‘DoE.base’

The following objects are masked from ‘package:stats’:

    aov, lm

The following object is masked from ‘package:graphics’:

    plot.design

The following object is masked from ‘package:base’:

    lengths

── Attaching packages ─────────────────────────────────────── tidyverse 1.2.1 ──
✔ ggplot2 3.2.1     ✔ purrr   0.3.2
✔ tibble  2.1.3     ✔ dplyr   0.8.3
✔ tidyr   1.0.0     ✔ stringr 1.4.0
✔ readr   1.3.1     ✔ forcats 0.4.0
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()

creating full factorial with 30 runs ...
#+end_example

** Experiments Execution
The scripts in this work are designed for use in a cluster with Slurm
job scheduler. Here, to start the experiments, the [[SH/central.sh][central script]] was
first executed, which allocates the necessary nodes, in this case,
hype2, hype3, hype4, and hype5, and passes through ssh the bash
command that calls the [[SH//experiments_exec.sh][experiments execution]] script. This script first
calls the [[SH/sys_info_collect.sh][system information]] script to collect system
information.

** Graphical Analysis
Upon completion of the experiments, in this topic, graphs containing
the execution time and network performance were created. The first
step is to read the CSV files.
*** Firts Analysis Plots
**** Read CSVs
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled=FALSE)
suppressMessages(library("tidyverse"));
df_intel_A10 <- read_csv("LOGS/LOGS_CSV/intel_A10.11-02-2020.12h02m47s.csv", progress=FALSE)
df_intel_F8 <- read_csv("LOGS/LOGS_CSV/intel_F8.29-02-2020.00h21m11s.csv", progress=FALSE)
df_intel_DS4 <- read_csv("LOGS/LOGS_CSV/intel_DS4.28-02-2020.23h37m39s.csv", progress=FALSE)
df_intel=bind_rows(df_intel_A10,df_intel_F8,df_intel_DS4)
df_apps_A10 <- read_csv("LOGS/LOGS_CSV/exec_A10.11-02-2020.12h02m47s.csv", progress=FALSE)
df_apps_F8 <- read_csv("LOGS/LOGS_CSV/exec_F8.29-02-2020.00h21m11s.csv", progress=FALSE)
df_apps_DS4 <- read_csv("LOGS/LOGS_CSV/exec_DS4.28-02-2020.23h37m39s.csv", progress=FALSE)
df_apps=bind_rows(df_apps_A10,df_apps_F8,df_apps_DS4)
df_apps$apps=toupper(df_apps$apps)

df_apps %>%
  group_by(apps,instance) %>%
  summarise(
    average=mean(time),
    std=sd(time),
    ste=3*std/sqrt(n()),
    N=n()) %>%
  arrange(apps,instance) -> df_apps
df_apps

df_intel %>%
  filter(bytes != 0) %>%
  group_by(bytes,instance) %>%
  summarise(
    average=mean(time),
    std=sd(time),
    ste=3*std/sqrt(n()),
    N=n()) %>%
  arrange(bytes,instance) -> df_intel_latency
df_intel_latency

df_intel %>%
  filter(bytes != 0) %>%
  group_by(bytes,instance) %>%
  summarise(
    average=(mean(`mbytes-sec`)/1000),
    std=(sd(`mbytes-sec`)/1000),
    ste=3*std/sqrt(n()),
    N=n()) %>%
  arrange(bytes,instance) -> df_intel_band
df_intel_band

#+end_src

#+RESULTS:
#+begin_example

Parsed with column specification:
cols(
  apps = col_character(),
  bytes = col_double(),
  time = col_double(),
  `mbytes-sec` = col_double(),
  instance = col_character()
)

Parsed with column specification:
cols(
  apps = col_character(),
  bytes = col_double(),
  time = col_double(),
  `mbytes-sec` = col_double(),
  instance = col_character()
)

Parsed with column specification:
cols(
  apps = col_character(),
  bytes = col_double(),
  time = col_double(),
  `mbytes-sec` = col_double(),
  instance = col_character()
)

Parsed with column specification:
cols(
  apps = col_character(),
  time = col_double(),
  instance = col_character()
)

Parsed with column specification:
cols(
  apps = col_character(),
  time = col_double(),
  instance = col_character()
)

Parsed with column specification:
cols(
  apps = col_character(),
  time = col_double(),
  instance = col_character()
)

# A tibble: 27 x 6
# Groups:   apps [9]
   apps  instance average    std    ste     N
   <
<
     <
 <
 <
<int>
 1 ALYA  A10        352.   2.47   1.35     30
 2 ALYA  DS4        227.   1.000  0.548    30
 3 ALYA  F8         202.   2.76   1.51     30
 4 BT    A10        797.   4.36   2.39     30
 5 BT    DS4        578.   2.41   1.32     30
 6 BT    F8         414.   3.40   1.86     30
 7 CG    A10        604.  22.3   12.2      30
 8 CG    DS4        228.   0.997  0.546    30
 9 CG    F8         171.   2.54   1.39     30
10 EP    A10         61.5  0.453  0.248    30
# … with 17 more rows

# A tibble: 69 x 6
# Groups:   bytes [23]
   bytes instance average   std   ste     N
   <
<
     <
<
<
<int>
 1     1 A10         9.00 0.479 0.262    30
 2     1 DS4         6.78 0.485 0.266    30
 3     1 F8          6.14 0.532 0.292    30
 4     2 A10         8.89 0.551 0.302    30
 5     2 DS4         7.05 0.837 0.459    30
 6     2 F8          6.36 0.701 0.384    30
 7     4 A10         9.15 0.483 0.264    30
 8     4 DS4         6.78 0.455 0.249    30
 9     4 F8          6.34 1.25  0.683    30
10     8 A10         8.92 0.487 0.267    30
# … with 59 more rows

# A tibble: 69 x 6
# Groups:   bytes [23]
   bytes instance  average        std        ste     N
   <
<
      <
     <
     <
<int>
 1     1 A10      0.000112 0.00000664 0.00000364    30
 2     1 DS4      0.000148 0.0000113  0.00000617    30
 3     1 F8       0.000164 0.0000133  0.00000728    30
 4     2 A10      0.000225 0.0000128  0.00000701    30
 5     2 DS4      0.000287 0.0000292  0.0000160     30
 6     2 F8       0.000318 0.0000348  0.0000190     30
 7     4 A10      0.000439 0.0000224  0.0000123     30
 8     4 DS4      0.000591 0.0000359  0.0000197     30
 9     4 F8       0.000647 0.0000875  0.0000479     30
10     8 A10      0.000900 0.0000463  0.0000254     30
# … with 59 more rows
#+end_example
**** PingPong - Latency
#+begin_src R :results output graphics :file R/PLOTS/Latency-presetantion.png :exports both :width 800 :height 350 :session *R*  
library("scales")
ggplot(df_intel_latency,aes(x=bytes, y=average)) +
geom_line(aes(color = instance), alpha = 1) +
  geom_point(aes(color=instance, shape=instance),size = 4) +
  scale_shape_manual(values = c(15,16,17),
                     breaks=c("A10", "DS4" ,"F8"),
                     labels=c("A10-10GbE","DS4_v2-40GbE IB" ,"F8-50GbE IB")) +
  geom_errorbar(aes(ymin=average-ste, ymax=average+ste, color=instance, group=instance), width = .2) +
  theme_bw(base_size=12) +
  scale_y_log10(breaks=c(1,4,16,64,256,1024), labels=trans_format("log2", math_format(2^.x))) +
  scale_x_log10(breaks=c(1,4,16,64,256,1024,4096,16384,65536,262144,1048576,4194304), labels=trans_format("log2", math_format(2^.x))) +
  ylab(expression(paste("Average Latency Time (",mu,"s)"))) +
    xlab('Message Size (Bytes)') +
  scale_color_manual(values=c( "#ccc210", "#ab6857", "#808585"),
                     breaks=c("A10", "DS4" ,"F8"),
                     labels=c("A10-10GbE","DS4_v2-40GbE IB" ,"F8-50GbE IB")) +
  theme_bw(base_size = 12) +
  theme (legend.position = c(0.15, 0.85),
         legend.background = element_rect(color = "black", size = 0.3, linetype = "solid"),
         plot.margin = unit(x = c(0, 0, 0, 0), units = "cm"),
         axis.title=element_text(size=18),
         legend.box.spacing = unit(0, "pt"), 
         legend.title = element_blank(),
         legend.text = element_text(color = "black", size = 18),
         axis.text.x = element_text(hjust=1, size =16, color = "black"),
         axis.text.y = element_text(size =16, color = "black"))
#+end_src

#+RESULTS:
[[file:R/PLOTS/Latency-presetantion.png]]

**** PingPong - Bandwidth
#+begin_src R :results output graphics :file R/PLOTS/Bandwidth-paper.pdf :exports both :width 4 :height 2.5 :session *R*
library("scales")
ggplot(df_intel_band,aes(x=bytes, y=average)) +
geom_line(aes(col = instance), alpha = 0.5) +
geom_point(aes(col = instance, shape=instance), size = 2) +
scale_shape_manual(values = c(15,16,17),
                     breaks=c("A10", "DS4" ,"F8"),
                     labels=c("A10-10GbE","DS4_v2-40GbE IB" ,"F8-50GbE IB")) +
geom_errorbar(aes(ymin=average-ste, ymax=average+ste, color=instance, group=instance), width = .25) +
theme_bw(base_size=12) +
scale_y_continuous(breaks=c(0,1,2,3,4,5,6,7,8)) +
scale_x_log10(breaks=c(1,4,16,64,256,1024,4096,16384,65536,262144,1048576,4194304), labels=trans_format("log2", math_format(2^.x))) +
ylab('Average Throughput (GB/s)') +
xlab('Message Size (Bytes)') +
scale_color_manual(values=c( "#ccc210", "#ab6857", "#808585"),
                     breaks=c("A10", "DS4" ,"F8"),
                     labels=c("A10-10GbE","DS4_v2-40GbE IB" ,"F8-50GbE IB")) +  
theme_bw(base_size=13) +  
 theme (legend.position = c(0.3, 0.7),
         legend.background = element_rect(color = "black", size = 0.3, linetype = "solid"),
         plot.margin = unit(x = c(0, 0, 0, 0), units = "cm"),
         axis.title=element_text(size=10), 
         legend.title = element_blank(),
         legend.text = element_text(color = "black", size = 10),
         axis.text.x = element_text(hjust=1, size =10, color = "black"),
         axis.text.y = element_text(size =10, color = "black"))

#+end_src

#+RESULTS:
[[file:R/PLOTS/Bandwidth-paper.pdf]]

**** Alya
#+begin_src R :results output graphics :file  R/PLOTS/ALYA.pdf :exports both :width 1.8 :height 4 :session *R* 
ggplot(df_apps[df_apps$apps %in% c("ALYA"), ], aes(x=apps, y=average, fill=instance)) +
geom_bar(stat="identity", position = "dodge", colour="black",size=0.3, width = 1) +
         geom_errorbar(aes(ymin=average-ste, ymax=average+ste), width=0.5, position = position_dodge(1)) +
         theme_bw(base_size=12) +
         scale_fill_manual(values=c( "#ccc210", "#ab6857", "#808585") ,
         breaks=c("A10", "DS4", "F8"), labels=c("A10-10GbE","DS4-40GbE IB" ,"F8-50GbE IB")) +
   
      theme(legend.position = "none",
              legend.key = element_rect(colour = "black"),
               legend.key.height = unit(0.5, "line"),
               legend.key.width = unit(4, "line"),
               legend.spacing = unit(100, "line"),
               plot.margin = unit(x = c(0.2, 0.05, 0, 0), units = "cm"),
               legend.margin=margin(c(0, 0, -8, 0)),
               axis.text.x = element_text(size =16, color = "black"),
               axis.text.y = element_text(size =16, color = "black"),
               axis.title=element_text(size=16), 
               legend.title = element_blank(),
               legend.text = element_text(color = "black", size = 16)) +
         labs(y="Execution Time in Seconds",
              x=element_blank())
#+end_src

#+RESULTS:
[[file:R/PLOTS/ALYA.pdf]]

**** BT
#+begin_src R :results output graphics :file  R/PLOTS/BT.pdf :exports both :width 1.8 :height 4 :session *R* 
ggplot(df_apps[df_apps$apps %in% c("BT"), ], aes(x=apps, y=average, fill=instance)) +
geom_bar(stat="identity", position = "dodge",  colour="black",size=0.3,width = 1) +
         geom_errorbar(aes(ymin=average-ste, ymax=average+ste), width=0.5, position = position_dodge(1)) +
         theme_bw(base_size=12) +
         scale_fill_manual(values=c( "#ccc210", "#ab6857", "#808585") ,
         breaks=c("A10", "DS4", "F8"), labels=c("A10-10GbE","DS4-40GbE IB" ,"F8-50GbE IB")) +  
 
theme(legend.position = "none", 
       #        legend.key = element_rect(colour = "grey"),
        #       legend.key.height = unit(0.5, "line"),
         #      legend.key.width = unit(4, "line"),
          #     legend.spacing = unit(100, "line"),
               plot.margin = unit(x = c(0.2, 0.05, 0, 0), units = "cm"),
               legend.margin=margin(c(0, 0, -8, 0)),
               axis.text.x = element_text(size =16, color = "black"),
               axis.text.y = element_text(size =16, color = "black"),
               axis.title=element_text(size=16), 
               legend.title = element_blank(),
               legend.text = element_text(color = "black", size = 16)) +
         labs(y=element_blank(),
              x=element_blank())
#+end_src

#+RESULTS:
[[file:R/PLOTS/BT.pdf]]

**** CG
#+begin_src R :results output graphics :file  R/PLOTS/CG.pdf :exports both :width 1.8 :height 4 :session *R* 
ggplot(df_apps[df_apps$apps %in% c("CG"), ], aes(x=apps, y=average, fill=instance)) +
geom_bar(stat="identity", position = "dodge", colour="black",size=0.3, width = 1) +
         geom_errorbar(aes(ymin=average-ste, ymax=average+ste), width=0.5, position = position_dodge(1)) +
         theme_bw(base_size=12) +
         scale_fill_manual(values=c( "#ccc210", "#ab6857", "#808585") ,
         breaks=c("A10", "DS4", "F8"), labels=c("A10-10GbE","DS4-40GbE IB" ,"F8-50GbE IB")) +  
 
 theme(legend.position = "none", 
       #        legend.key = element_rect(colour = "grey"),
        #       legend.key.height = unit(0.5, "line"),
         #      legend.key.width = unit(4, "line"),
          #     legend.spacing = unit(100, "line"),
               plot.margin = unit(x = c(0.2, 0.05, 0, 0), units = "cm"),
               legend.margin=margin(c(0, 0, -8, 0)),
               axis.text.x = element_text(size =16, color = "black"),
               axis.text.y = element_text(size =16, color = "black"),
               axis.title=element_text(size=16), 
               legend.title = element_blank(),
               legend.text = element_text(color = "black", size = 16)) +
         labs(y=element_blank(),
              x=element_blank())
#+end_src

#+RESULTS:
[[file:R/PLOTS/CG.pdf]]

**** EP
#+begin_src R :results output graphics :file  R/PLOTS/EP.pdf :exports both :width 1.8 :height 4 :session *R* 
ggplot(df_apps[df_apps$apps %in% c("EP"), ], aes(x=apps, y=average, fill=instance)) +
geom_bar(stat="identity", position = "dodge",  colour="black",size=0.3, width = 1) +
         geom_errorbar(aes(ymin=average-ste, ymax=average+ste), width=0.5, position = position_dodge(1)) +
         theme_bw(base_size=12) +
         scale_fill_manual(values=c( "#ccc210", "#ab6857", "#808585") ,
         breaks=c("A10", "DS4", "F8"), labels=c("A10-10GbE","DS4-40GbE IB" ,"F8-50GbE IB")) +  
 
     theme(legend.position = "none", 
       #        legend.key = element_rect(colour = "grey"),
        #       legend.key.height = unit(0.5, "line"),
         #      legend.key.width = unit(4, "line"),
          #     legend.spacing = unit(100, "line"),
               plot.margin = unit(x = c(0.2, 0.05, 0, 0), units = "cm"),
               legend.margin=margin(c(0, 0, -8, 0)),
               axis.text.x = element_text(size =16, color = "black"),
               axis.text.y = element_text(size =16, color = "black"),
               axis.title=element_text(size=16), 
               legend.title = element_blank(),
               legend.text = element_text(color = "black", size = 16)) +
         labs(y=element_blank(),
              x=element_blank())
#+end_src

#+RESULTS:
[[file:R/PLOTS/EP.pdf]]

**** FT
#+begin_src R :results output graphics :file  R/PLOTS/FT.pdf :exports both :width 1.8 :height 4 :session *R* 
ggplot(df_apps[df_apps$apps %in% c("FT"), ], aes(x=apps, y=average, fill=instance)) +
geom_bar(stat="identity", position = "dodge",  colour="black",size=0.3,width = 1.1) +
         geom_errorbar(aes(ymin=average-ste, ymax=average+ste), width=0.6, position = position_dodge(1.1)) +
         theme_bw(base_size=12) +
         scale_fill_manual(values=c( "#ccc210", "#ab6857", "#808585") ,
         breaks=c("A10", "DS4", "F8"), labels=c("A10-10GbE","DS4-40GbE IB" ,"F8-50GbE IB")) +  
 
     theme(legend.position = "none", 
       #        legend.key = element_rect(colour = "grey"),
        #       legend.key.height = unit(0.5, "line"),
         #      legend.key.width = unit(4, "line"),
          #     legend.spacing = unit(100, "line"),
               plot.margin = unit(x = c(0.2, 0.05, 0, 0), units = "cm"),
               legend.margin=margin(c(0, 0, -4, 0)),
               axis.text.x = element_text(size =16, color = "black"),
               axis.text.y = element_text(size =16, color = "black"),
               axis.title=element_text(size=16), 
               legend.title = element_blank(),
               legend.text = element_text(color = "black", size = 14)) +
         labs(y=element_blank(),
              x=element_blank())
#+end_src


#+RESULTS:
[[file:R/PLOTS/FT.pdf]]

**** IS
#+begin_src R :results output graphics :file  R/PLOTS/IS.pdf :exports both :width 1.8 :height 4 :session *R* 
ggplot(df_apps[df_apps$apps %in% c("IS"), ], aes(x=apps, y=average, fill=instance)) +
geom_bar(stat="identity", position = "dodge", colour="black",size=0.3, width = 1) +
         geom_errorbar(aes(ymin=average-ste, ymax=average+ste), width=0.5, position = position_dodge(1)) +
         theme_bw(base_size=12) +
         scale_fill_manual(values=c( "#ccc210", "#ab6857", "#808585") ,
         breaks=c("A10", "DS4", "F8"), labels=c("A10-10GbE","DS4-40GbE IB" ,"F8-50GbE IB")) +  
 
     theme(legend.position = "none", 
       #        legend.key = element_rect(colour = "grey"),
        #       legend.key.height = unit(0.5, "line"),
         #      legend.key.width = unit(4, "line"),
          #     legend.spacing = unit(100, "line"),
               plot.margin = unit(x = c(0.2, 0.05, 0, 0), units = "cm"),
               legend.margin=margin(c(0, 0, -8, 0)),
               axis.text.x = element_text(size =16, color = "black"),
               axis.text.y = element_text(size =16, color = "black"),
               axis.title=element_text(size=16), 
               legend.title = element_blank(),
               legend.text = element_text(color = "black", size = 16)) +
         labs(y=element_blank(),
              x=element_blank())
#+end_src

#+RESULTS:
[[file:R/PLOTS/IS.pdf]]

**** LU
#+begin_src R :results output graphics :file  R/PLOTS/LU.pdf :exports both :width 1.8 :height 4 :session *R* 
ggplot(df_apps[df_apps$apps %in% c("LU"), ], aes(x=apps, y=average, fill=instance)) +
geom_bar(stat="identity", position = "dodge",colour="black",size=0.3, width = 1) +
         geom_errorbar(aes(ymin=average-ste, ymax=average+ste), width=0.5, position = position_dodge(1)) +
         theme_bw(base_size=12) +
         scale_fill_manual(values=c( "#ccc210", "#ab6857", "#808585") ,
         breaks=c("A10", "DS4", "F8"), labels=c("A10-10GbE","DS4-40GbE IB" ,"F8-50GbE IB")) +  
 
     theme(legend.position = "none", 
       #        legend.key = element_rect(colour = "grey"),
        #       legend.key.height = unit(0.5, "line"),
         #      legend.key.width = unit(4, "line"),
          #     legend.spacing = unit(100, "line"),
               plot.margin = unit(x = c(0.2, 0.05, 0, 0), units = "cm"),
               legend.margin=margin(c(0, 0, -8, 0)),
               axis.text.x = element_text(size =16, color = "black"),
               axis.text.y = element_text(size =16, color = "black"),
               axis.title=element_text(size=16), 
               legend.title = element_blank(),
            legend.text = element_text(color = "black", size = 16)) +
         labs(y=element_blank(),
              x=element_blank())
#+end_src

#+RESULTS:
[[file:R/PLOTS/LU.pdf]]

**** SP
#+begin_src R :results output graphics :file  R/PLOTS/SP.pdf :exports both :width 1.8 :height 4 :session *R* 
ggplot(df_apps[df_apps$apps %in% c("SP"), ], aes(x=apps, y=average, fill=instance)) +
geom_bar(stat="identity", position = "dodge",colour="black",size=0.3, width = 1.1) +
         geom_errorbar(aes(ymin=average-ste, ymax=average+ste), width=0.6, position = position_dodge(1.1)) +
         theme_bw(base_size=12) +
         scale_fill_manual(values=c( "#ccc210", "#ab6857", "#808585") ,
         breaks=c("A10", "DS4", "F8"), labels=c("A10-10GbE","DS4-40GbE IB" ,"F8-50GbE IB")) +  
 
    theme(legend.position = "none", 
       #        legend.key = element_rect(colour = "grey"),
        #       legend.key.height = unit(0.5, "line"),
         #      legend.key.width = unit(4, "line"),
          #     legend.spacing = unit(100, "line"),
               plot.margin = unit(x = c(0.2, 0.05, 0, 0), units = "cm"),
               legend.margin=margin(c(0, 0, -8, 0)),
               axis.text.x = element_text(size =16, color = "black"),
               axis.text.y = element_text(size =16, color = "black"),
               axis.title=element_text(size=16), 
               legend.title = element_blank(),
               legend.text = element_text(color = "black", size = 16)) +
         labs(y=element_blank(),
              x=element_blank())
#+end_src

#+RESULTS:
[[file:R/PLOTS/SP.pdf]]

**** MG
#+begin_src R :results output graphics :file  R/PLOTS/MG.pdf :exports both :width 1.8 :height 4 :session *R* 
ggplot(df_apps[df_apps$apps %in% c("MG"), ], aes(x=apps, y=average, fill=instance)) +
geom_bar(stat="identity", position = "dodge", colour="black",size=0.3, width = 1) +
         geom_errorbar(aes(ymin=average-ste, ymax=average+ste), width=0.5, position = position_dodge(1)) +
         theme_bw(base_size=12) +
         scale_fill_manual(values=c( "#ccc210", "#ab6857", "#808585") ,
         breaks=c("A10", "DS4", "F8"), labels=c("A10-10GbE","DS4-40GbE IB" ,"F8-50GbE IB")) +  
 
     theme(legend.position = "none", 
       #        legend.key = element_rect(colour = "grey"),
        #       legend.key.height = unit(0.5, "line"),
         #      legend.key.width = unit(4, "line"),
          #     legend.spacing = unit(100, "line"),
               plot.margin = unit(x = c(0.2, 0.05, 0, 0), units = "cm"),
               legend.margin=margin(c(0, 0, -8, 0)),
               axis.text.x = element_text(size =16, color = "black"),
               axis.text.y = element_text(size =16, color = "black"),
               axis.title=element_text(size=16), 
               legend.title = element_blank(),
               legend.text = element_text(color = "black", size = 16)) +
         labs(y=element_blank(),
              x=element_blank())
#+end_src

#+RESULTS:
[[file:R/PLOTS/MG.pdf]]
**** Legend
#+begin_src R :results output graphics :file  R/PLOTS/Legend.pdf :exports both :width 1.8 :height 4 :session *R* 
options(crayon.enabled=FALSE)
suppressMessages(library("ggplot2"));
suppressMessages(library("grid"));
suppressMessages(library("gridExtra"));
my_hist <- ggplot(df_apps[df_apps$apps %in% c("MG"), ], aes(apps, fill=instance)) +
geom_bar()
theme(legend.position = "top",
legend <- cowplot::get_legend(my_hist),
grid.newpage(),
grid.draw(legend)) 
#+end_src

#+RESULTS:
[[file:R/PLOTS/Legend.pdf]]
**** Legend1
#+begin_src R :results output graphics :file  R/PLOTS/Legend1.pdf :exports both :width 6 :height 4 :session *R* 
ggplot(df_apps[df_apps$apps %in% c("MG"), ], aes(x=apps, y=average, fill=instance)) +
geom_bar(stat="identity", position = "dodge", width = 1) +
         geom_errorbar(aes(ymin=average-ste, ymax=average+ste), width=0.5, position = position_dodge(1)) +
         theme_bw(base_size=12) +
         scale_fill_manual(values=c( "#ccc210", "#ab6857", "#808585") ,
         breaks=c("A10", "DS4", "F8"), labels=c("A10-10GbE","DS4-40GbE IB" ,"F8-50GbE IB")) +  
      theme(legend.position = "top", 
               legend.key = element_rect(colour = "black"),
               legend.key.height = unit(0.5, "line"),
               legend.key.width = unit(4, "line"),
               legend.spacing = unit(100, "line"),
               plot.margin = unit(x = c(0.2, 0.05, 0, 0), units = "cm"),
               legend.margin=margin(c(0, 0, -8, 0)),
               axis.text.x = element_text(size =16, color = "black"),
               axis.text.y = element_text(size =16, color = "black"),
               axis.title=element_text(size=16), 
               legend.title = element_blank(),
               legend.text = element_text(color = "black", size = 16)) +
         labs(y=element_blank(),
              x=element_blank())
#+end_src

#+RESULTS:
[[file:R/PLOTS/Legend1.pdf]]

*** Cost Plots
**** Read CSVs 
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled=FALSE)
suppressMessages(library("tidyverse"));
df_apps_A10 <- read_csv("LOGS/LOGS_CSV/exec_A10.11-02-2020.12h02m47s.csv", progress=FALSE)
df_apps_A10$apps=toupper(df_apps_A10$apps)
df_apps_F8 <- read_csv("LOGS/LOGS_CSV/exec_F8.29-02-2020.00h21m11s.csv", progress=FALSE)
df_apps_F8$apps=toupper(df_apps_F8$apps)
df_apps_DS4 <- read_csv("LOGS/LOGS_CSV/exec_DS4.28-02-2020.23h37m39s.csv", progress=FALSE)
df_apps_DS4$apps=toupper(df_apps_DS4$apps)

A10_h=8*0.78
DS4_h=8*1.008
F8_h=8*0.792

df_apps_A10 %>%
  group_by(apps,instance) %>%
  summarise(
    average=mean(time),
    cost=(3600/average)/A10_h) %>%
arrange(apps,instance) -> df_apps_A10_average

df_apps_DS4 %>%
  group_by(apps,instance) %>%
  summarise(
    average=mean(time),
    cost=(3600/average)/DS4_h) %>%
  arrange(apps,instance) -> df_apps_DS4_average

df_apps_F8 %>%
  group_by(apps,instance) %>%
  summarise(
    average=mean(time),
    cost=(3600/average)/F8_h) %>%
  arrange(apps,instance) -> df_apps_F8_average

df_apps=bind_rows(df_apps_A10_average,df_apps_F8_average,df_apps_DS4_average)

#+end_src

#+RESULTS:
#+begin_example

Parsed with column specification:
cols(
  apps = col_character(),
  time = col_double(),
  instance = col_character()
)

Parsed with column specification:
cols(
  apps = col_character(),
  time = col_double(),
  instance = col_character()
)

Parsed with column specification:
cols(
  apps = col_character(),
  time = col_double(),
  instance = col_character()
)
#+end_example
**** Alya
#+begin_src R :results output graphics :file  R/PLOTS/ALYA-Cost.pdf :exports both :width 1.8 :height 4 :session *R* 
ggplot(df_apps[df_apps$apps %in% c("ALYA"), ], aes(x=apps, y=cost, fill=instance)) +
geom_bar(stat="identity", position = "dodge",colour="black",size=0.3, width = 1) +
         #geom_errorbar(aes(ymin=average-ste, ymax=average+ste), width=0.5, position = position_dodge(1)) +
         theme_bw(base_size=12) +
         scale_fill_manual(values=c( "#ccc210", "#ab6857", "#808585") ,
         breaks=c("A10", "DS4", "F8"), labels=c("A10-10GbE","DS4-40GbE IB" ,"F8-50GbE IB")) +  
      theme(legend.position = "none", 
       #        legend.key = element_rect(colour = "grey"),
        #       legend.key.height = unit(0.5, "line"),
         #      legend.key.width = unit(4, "line"),
          #     legend.spacing = unit(100, "line"),
               plot.margin = unit(x = c(0.2, 0.05, 0, 0), units = "cm"),
               legend.margin=margin(c(0, 0, -8, 0)),
               axis.text.x = element_text(size =16, color = "black"),
               axis.text.y = element_text(size =16, color = "black"),
               axis.title=element_text(size=16), 
               legend.title = element_blank(),
               legend.text = element_text(color = "black", size = 16)) +
         labs(y="Cost Efficiency",
              x=element_blank())
#+end_src

#+RESULTS:
[[file:R/PLOTS/ALYA-Cost.pdf]]
**** BT
#+begin_src R :results output graphics :file  R/PLOTS/BT-Cost.pdf :exports both :width 1.8 :height 4 :session *R* 
ggplot(df_apps[df_apps$apps %in% c("BT"), ], aes(x=apps, y=cost, fill=instance)) +
geom_bar(stat="identity", position = "dodge", colour="black",size=0.3,width = 1) +
         #geom_errorbar(aes(ymin=average-ste, ymax=average+ste), width=0.5, position = position_dodge(1)) +
         theme_bw(base_size=12) +
         scale_fill_manual(values=c( "#ccc210", "#ab6857", "#808585") ,
         breaks=c("A10", "DS4", "F8"), labels=c("A10-10GbE","DS4-40GbE IB" ,"F8-50GbE IB")) +  
      theme(legend.position = "none", 
       #        legend.key = element_rect(colour = "grey"),
        #       legend.key.height = unit(0.5, "line"),
         #      legend.key.width = unit(4, "line"),
          #     legend.spacing = unit(100, "line"),
               plot.margin = unit(x = c(0.2, 0.05, 0, 0), units = "cm"),
               legend.margin=margin(c(0, 0, -8, 0)),
               axis.text.x = element_text(size =16, color = "black"),
               axis.text.y = element_text(size =16, color = "black"),
               axis.title=element_text(size=16), 
               legend.title = element_blank(),
               legend.text = element_text(color = "black", size = 16)) +
         labs(y=element_blank(),
              x=element_blank())
#+end_src

#+RESULTS:
[[file:R/PLOTS/BT-Cost.pdf]]
**** CG
#+begin_src R :results output graphics :file  R/PLOTS/CG-Cost.pdf :exports both :width 1.8 :height 4 :session *R* 
ggplot(df_apps[df_apps$apps %in% c("CG"), ], aes(x=apps, y=cost, fill=instance)) +
geom_bar(stat="identity", position = "dodge", colour="black",size=0.3,width = 1) +
         #geom_errorbar(aes(ymin=average-ste, ymax=average+ste), width=0.5, position = position_dodge(1)) +
         theme_bw(base_size=12) +
         scale_fill_manual(values=c( "#ccc210", "#ab6857", "#808585") ,
         breaks=c("A10", "DS4", "F8"), labels=c("A10-10GbE","DS4-40GbE IB" ,"F8-50GbE IB")) +  
      theme(legend.position = "none", 
       #        legend.key = element_rect(colour = "grey"),
        #       legend.key.height = unit(0.5, "line"),
         #      legend.key.width = unit(4, "line"),
          #     legend.spacing = unit(100, "line"),
               plot.margin = unit(x = c(0.2, 0.05, 0, 0), units = "cm"),
               legend.margin=margin(c(0, 0, -8, 0)),
               axis.text.x = element_text(size =16, color = "black"),
               axis.text.y = element_text(size =16, color = "black"),
               axis.title=element_text(size=16), 
               legend.title = element_blank(),
               legend.text = element_text(color = "black", size = 16)) +
         labs(y=element_blank(),
              x=element_blank())
#+end_src

#+RESULTS:
[[file:R/PLOTS/CG-Cost.pdf]]

**** EP
#+begin_src R :results output graphics :file  R/PLOTS/EP-Cost.pdf :exports both :width 1.8 :height 4 :session *R* 
ggplot(df_apps[df_apps$apps %in% c("EP"), ], aes(x=apps, y=cost, fill=instance)) +
  geom_bar(stat="identity", position = "dodge",  colour="black",size=0.3,width = 1) +
         #geom_errorbar(aes(ymin=average-ste, ymax=average+ste), width=0.5, position = position_dodge(1)) +
         theme_bw(base_size=12) +
         scale_fill_manual(values=c( "#ccc210", "#ab6857", "#808585") ,
         breaks=c("A10", "DS4", "F8"), labels=c("A10-10GbE","DS4-40GbE IB" ,"F8-50GbE IB")) +  
      theme(legend.position = "none", 
       #        legend.key = element_rect(colour = "grey"),
        #       legend.key.height = unit(0.5, "line"),
         #      legend.key.width = unit(4, "line"),
          #     legend.spacing = unit(100, "line"),
               plot.margin = unit(x = c(0.2, 0.05, 0, 0), units = "cm"),
               legend.margin=margin(c(0, 0, -8, 0)),
               axis.text.x = element_text(size =16, color = "black"),
               axis.text.y = element_text(size =16, color = "black"),
               axis.title=element_text(size=16), 
               legend.title = element_blank(),
               legend.text = element_text(color = "black", size = 16)) +
         labs(y=element_blank(),
              x=element_blank())
#+end_src

#+RESULTS:
[[file:R/PLOTS/EP-Cost.pdf]]

**** FT
#+begin_src R :results output graphics :file  R/PLOTS/FT-Cost.pdf :exports both :width 1.8 :height 4 :session *R* 
ggplot(df_apps[df_apps$apps %in% c("FT"), ], aes(x=apps, y=cost, fill=instance)) +
geom_bar(stat="identity", position = "dodge",  colour="black",size=0.3,width = 1) +
         #geom_errorbar(aes(ymin=average-ste, ymax=average+ste), width=0.5, position = position_dodge(1)) +
         theme_bw(base_size=12) +
         scale_fill_manual(values=c( "#ccc210", "#ab6857", "#808585") ,
         breaks=c("A10", "DS4", "F8"), labels=c("A10-10GbE","DS4-40GbE IB" ,"F8-50GbE IB")) +  
      theme(legend.position = "none", 
       #        legend.key = element_rect(colour = "grey"),
        #       legend.key.height = unit(0.5, "line"),
         #      legend.key.width = unit(4, "line"),
          #     legend.spacing = unit(100, "line"),
               plot.margin = unit(x = c(0.2, 0.05, 0, 0), units = "cm"),
               legend.margin=margin(c(0, 0, -8, 0)),
               axis.text.x = element_text(size =16, color = "black"),
               axis.text.y = element_text(size =16, color = "black"),
               axis.title=element_text(size=16), 
               legend.title = element_blank(),
               legend.text = element_text(color = "black", size = 16)) +
         labs(y=element_blank(),
              x=element_blank())
#+end_src

#+RESULTS:
[[file:R/PLOTS/FT-Cost.pdf]]

**** IS
#+begin_src R :results output graphics :file  R/PLOTS/IS-Cost.pdf :exports both :width 1.8 :height 4 :session *R* 
ggplot(df_apps[df_apps$apps %in% c("IS"), ], aes(x=apps, y=cost, fill=instance)) +
geom_bar(stat="identity", position = "dodge",  colour="black",size=0.3,width = 1) +
         #geom_errorbar(aes(ymin=average-ste, ymax=average+ste), width=0.5, position = position_dodge(1)) +
         theme_bw(base_size=12) +
         scale_fill_manual(values=c( "#ccc210", "#ab6857", "#808585") ,
         breaks=c("A10", "DS4", "F8"), labels=c("A10-10GbE","DS4-40GbE IB" ,"F8-50GbE IB")) +  
      theme(legend.position = "none", 
       #        legend.key = element_rect(colour = "grey"),
        #       legend.key.height = unit(0.5, "line"),
         #      legend.key.width = unit(4, "line"),
          #     legend.spacing = unit(100, "line"),
               plot.margin = unit(x = c(0.2, 0.05, 0, 0), units = "cm"),
               legend.margin=margin(c(0, 0, -8, 0)),
               axis.text.x = element_text(size =16, color = "black"),
               axis.text.y = element_text(size =16, color = "black"),
               axis.title=element_text(size=16), 
               legend.title = element_blank(),
               legend.text = element_text(color = "black", size = 16)) +
         labs(y=element_blank(),
              x=element_blank())
#+end_src

#+RESULTS:
[[file:R/PLOTS/IS-Cost.pdf]]

**** LU
#+begin_src R :results output graphics :file  R/PLOTS/LU-Cost.pdf :exports both :width 1.8 :height 4 :session *R* 
ggplot(df_apps[df_apps$apps %in% c("LU"), ], aes(x=apps, y=cost, fill=instance)) +
geom_bar(stat="identity", position = "dodge", colour="black",size=0.3, width = 1) +
         #geom_errorbar(aes(ymin=average-ste, ymax=average+ste), width=0.5, position = position_dodge(1)) +
         theme_bw(base_size=12) +
         scale_fill_manual(values=c( "#ccc210", "#ab6857", "#808585") ,
         breaks=c("A10", "DS4", "F8"), labels=c("A10-10GbE","DS4-40GbE IB" ,"F8-50GbE IB")) +  
      theme(legend.position = "none", 
       #        legend.key = element_rect(colour = "grey"),
        #       legend.key.height = unit(0.5, "line"),
         #      legend.key.width = unit(4, "line"),
          #     legend.spacing = unit(100, "line"),
               plot.margin = unit(x = c(0.2, 0.05, 0, 0), units = "cm"),
               legend.margin=margin(c(0, 0, -8, 0)),
               axis.text.x = element_text(size =16, color = "black"),
               axis.text.y = element_text(size =16, color = "black"),
               axis.title=element_text(size=16), 
               legend.title = element_blank(),
               legend.text = element_text(color = "black", size = 16)) +
         labs(y=element_blank(),
              x=element_blank())
#+end_src

#+RESULTS:
[[file:R/PLOTS/LU-Cost.pdf]]

**** MG
#+begin_src R :results output graphics :file  R/PLOTS/MG-Cost.pdf :exports both :width 1.8 :height 4 :session *R* 
ggplot(df_apps[df_apps$apps %in% c("MG"), ], aes(x=apps, y=cost, fill=instance)) +
geom_bar(stat="identity", position = "dodge", colour="black",size=0.3, width = 1) +
         #geom_errorbar(aes(ymin=average-ste, ymax=average+ste), width=0.5, position = position_dodge(1)) +
         theme_bw(base_size=12) +
         scale_fill_manual(values=c( "#ccc210", "#ab6857", "#808585") ,
         breaks=c("A10", "DS4", "F8"), labels=c("A10-10GbE","DS4-40GbE IB" ,"F8-50GbE IB")) +  
      theme(legend.position = "none", 
       #        legend.key = element_rect(colour = "grey"),
        #       legend.key.height = unit(0.5, "line"),
         #      legend.key.width = unit(4, "line"),
          #     legend.spacing = unit(100, "line"),
               plot.margin = unit(x = c(0.2, 0.05, 0, 0), units = "cm"),
               legend.margin=margin(c(0, 0, -8, 0)),
               axis.text.x = element_text(size =16, color = "black"),
               axis.text.y = element_text(size =16, color = "black"),
               axis.title=element_text(size=16), 
               legend.title = element_blank(),
               legend.text = element_text(color = "black", size = 16)) +
         labs(y=element_blank(),
              x=element_blank())
#+end_src

#+RESULTS:
[[file:R/PLOTS/MG-Cost.pdf]]

**** SP
#+begin_src R :results output graphics :file  R/PLOTS/SP-Cost.pdf :exports both :width 1.8 :height 4 :session *R* 
ggplot(df_apps[df_apps$apps %in% c("SP"), ], aes(x=apps, y=cost, fill=instance)) +
geom_bar(stat="identity", position = "dodge",  colour="black",size=0.3,width = 1) +
         #geom_errorbar(aes(ymin=average-ste, ymax=average+ste), width=0.5, position = position_dodge(1)) +
         theme_bw(base_size=12) +
         scale_fill_manual(values=c( "#ccc210", "#ab6857", "#808585") ,
         breaks=c("A10", "DS4", "F8"), labels=c("A10-10GbE","DS4-40GbE IB" ,"F8-50GbE IB")) +  
      theme(legend.position = "none", 
       #        legend.key = element_rect(colour = "grey"),
        #       legend.key.height = unit(0.5, "line"),
         #      legend.key.width = unit(4, "line"),
          #     legend.spacing = unit(100, "line"),
               plot.margin = unit(x = c(0.2, 0.05, 0, 0), units = "cm"),
               legend.margin=margin(c(0, 0, -8, 0)),
               axis.text.x = element_text(size =16, color = "black"),
               axis.text.y = element_text(size =16, color = "black"),
               axis.title=element_text(size=16), 
               legend.title = element_blank(),
               legend.text = element_text(color = "black", size = 16)) +
         labs(y=element_blank(),
              x=element_blank())
#+end_src

#+RESULTS:
[[file:R/PLOTS/SP-Cost.pdf]]


