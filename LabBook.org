#+TITLE: LabBook
#+AUTHOR: Anderson Mattheus Maliszewski
#+STARTUP: overview indent
#+TAGS: noexport(n) deprecated(d) 
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+SEQ_TODO: TODO(t!) STARTED(s!) WAITING(w!) | DONE(d!) CANCELLED(c!) DEFERRED(f!)

This LabBook is for the *25th IEEE Symposium on Computers and
Communications (ISCC) 2020* paper and has a wealth of informations
about the entire process used during the proposed experiments. To
reproduce this evaluation, you can follow the steps below. Have fun!

#+BEGIN_QUOTE
*Reporting errors*: This repository has several links to self-contained
 files as well as links from the Internet, so if you try to reproduce
 it and find broken links or other problems, please tell me everything
 so that I can improve it. :)
#+END_QUOTE

* Experimental Project
** Objective
   Assess the impact of the network interconnection on HPC
   applications regarding performance and cost-effiency. Two different
   instances sizes (A8 and A10) from Microsoft Azure with same
   physical hardware, but different interconnections (InfiniBand (IB)
   and 10 GbE were evaluated were used. The MPI-PingPong benchmark of
   the [[https://software.intel.com/en-us/articles/intel-mpi-benchmarks][Intel MPI Benchmarks]] suite was executed to first characterize
   the interconnection latency and bandwidth. Then we executed the NPB
   set of synthetic benchmarks and one real application (Alya). [[https://www.nas.nasa.gov/publications/npb.html][NAS
   Parallel Benchmarks (NPB)]] set version 3.4 with input *class D* was
   used because it represent several patterns of real HPC
   applications. [[https://www.bsc.es/research-development/research-areas/engineering-simulations/alya-high-performance-computational][Alya]] was used because this work tends to cover not
   only synthetic benchmarks which try to mimic real applications but
   rather use a real application.

** Benchmarks
Below is a brief overview about the benchmarks used.
*** Intel MPI Benchmark
The Intel® MPI Benchmarks perform a set of MPI performance
measurements for point-to-point and global communication operations
for a range of message sizes. The generated benchmark data fully
characterizes:
- Performance of a cluster system, including node performance, network
  latency, and throughput.
- Efficiency of the MPI implementation used.
There are several benchmarks included in this set, and in this
evaluation, only the MPI1 PingPong application was used to measure
interconnect latency and throughput.

*** NAS Parallel Benchmarks
The NAS Parallel Benchmarks (NPB) are a small set of programs designed
to help evaluate the performance of parallel supercomputers. The
benchmarks are derived from computational fluid dynamics (CFD)
applications. Problem sizes in NPB are predefined and indicated as
different classes.

In this evaluation, the original set of benchmarks from the NPB suite,
consisting of five kernels and three pseudo-applications were used
with the Messsage Passing Interface (MPI) parallel implementation.

Five Kernels:
- *IS* - Integer Sort, random memory access.
- *EP* - Embarrassingly Parallel.
- *CG* - Conjugate Gradient, irregular memory access and communication.
- *FT* - Discrete 3D fast Fourier Transform, all-to-all communication.
- *MG* - Multi-Grid on a sequence of meshes, long- and short-distance
  communication, memory intensive.

Three pseudo-applications: 
- *BT* - Block Tri-diagonal solver.
- *SP* - Scalar Penta-diagonal solver.
- *LU* - Lower-Upper Gauss-Seidel solver.

They were executed with 128 processes on 4 nodes, 32 processes per
node, in the case of IS, EP, CG, FT, MG, and LU (power-of-two). Since
BT and SP require that the number of processes to be a square root,
144 processes were used, with 36 processes in each node.

*** Alya
Alya is a high performance computational mechanics code to solve
complex coupled multi-physics / multi-scale / multi-domain problems,
which are mostly coming from the engineering realm. Among the
different physics solved by Alya we can mention:
incompressible/compressible flows, non-linear solid mechanics,
chemistry, particle transport, heat transfer, turbulence modeling,
electrical propagation, etc.

** How to Reproduce it
To reproduce this project, the first step is to to clone the git repository in
the *$HOME* of the desired cluster of servers. 

#+begin_src shell :results output :exports both
cd $HOME; git clone https://github.com/andermm/CMP223
#+end_src

Then executes the [[SH/clean_folders_files.sh][clean bash script]] to clean the results and all
obtained data from this evaluation.

#+begin_src shell :results output :exports both
cd $HOME/ISCC-2020/SH; ./clean_folders_files.sh 
#+end_src

then...

** Required Softwares
To execute the experiments, some required packages need to
be installed. They are:
- openmpi-bin - High performance message passing library (mpiexec).
- libopenmpi-dev - High performance message passing library (mpicc and
  mpifort).
- gfortran - GNU Fortran 95 compiler.

If your OS is Debian based and you have permission to install new
packages, you can install the required packages using the [[SH/software_install.sh][Software
Installer]] script. On the other hand, if you do not have permission to
do so, you can use the Spack package manager. The full tutorial on how
to use Spack can be seen [[https://spack-tutorial.readthedocs.io/en/latest/][here]].

** System Information 
   To collect the information of all nodes used in the evaluation, it
   was used the [[SH/sys_info_collect.sh][System Information Collect]] script, which creates the
   a [[LOGS/env_info.org][System Information]] log output with ORG extension. The script
   executes automatically in the execution script.

** Network Infrastructure Information
** Bash Scripts Descriptions
- [[SH/experiments_exec.sh][Experiments Execution]] - This is the most essential script for this
  evaluation. It comprises from the beginning, when the variables are
  defined, until the end, when the experiments execution ends. To
  describe it, it has been divided into a few steps, which are:

  - *Step 1*: Define the variables and Create the Folders - Here all the
    variables with folders, software and bencharmark locations are
    defined and created.
  - *Step 2*: Collect System Information - In this step, the Execution
    Experiments script calls the System Information script to collect
    information about all nodes used in the evaluation.
  - *Step 3*: Download and Compile the Programs - Here all the softwares
    and benchmarks are downloaded and compiled with their respective
    compilers.
  - *Step 4*: Define Machine Files and Experimental Project - In this
    step the machine files and experimental project used during MPI
    execution are defined.
  - *Step 5*: Read the Experimental Project and Start the Execution
    Loop - This step reads the experimental project, start the MPI
    command line, and executes the experiments with their respective
    interconnection/application. At the end of each execution, the
    results are sent to the log files.
  - *Step 6*: Call the Experiment Characterization Script - This final
    step calls the experiment characterization script to start the
    characterization execution. Characterization and "normal"
    execution are done one after another because in characterization,
    the execution trace process records all the MPI primitives in a
    file and therefore can interfer in the normal execution
    considering resources usage (e.g., IO).
- [[SH/experiments_charac.sh][Experiments Characterization]] - This script is similar to the one
  discribed above, however, it only performs the experiment
  characterization, subdivided into three steps, which are:

  - *Step 1*: A first definition of the variables.
  - *Step 2*: Definition of the Machines Files and Experimental Project.
  - *Step 3*: Read the Experimental Project and Start the Execution Loop

- [[SH/central.sh][Central]] - This script was created to allocate the nodes using the
  ~salloc~ command from Slurm Workload Manager and then pass the bash
  script execution command through ssh to start the Experiments
  Execution.
- [[SH/software_install.sh][Software Installation]] - This script is basically a simple loop to
  check whether packages within the 'name' vector are installed or
  not. If so, them ok. Otherwise, install the packages that are not
  installed. This script assume that the user has sudo
  privilegies. Otherwise, go to the *Software Installation* session,
  which will describe how to install the software using Spack packet
  manager.
- [[SH/sys_info_collect.sh][System Information Collect]] - This is a crucial script to performance
  evaluations, which is executed before the benchmarks. It saves all the
  system information and sends the output to an ORG file. This output
  will undoubtedly help describe the results or even add system
  information 


** Design of Experiments
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled=FALSE)

library(DoE.base)
library(tidyverse)
  
set.seed(0)
ISCC2020 <- fac.design(factor.names = list(
  apps = c("bt", "ep", "cg", "mg", "lu",
           "sp", "is", "ft", "intel", "alya"),
  instance = c("A8", "A10")),
  replications=30,
  randomize=TRUE)

ISCC2020 %>%
  select(-Blocks) %>%
  mutate(number=1:n()) -> ISCC2020
write_csv(ISCC2020, "MACHINE_FILES/experimental_project.csv")
#+end_src

#+RESULTS:
#+begin_example

Loading required package: grid
Loading required package: conf.design
Registered S3 method overwritten by 'DoE.base':
  method           from       
  factorize.factor conf.design

Attaching package: ‘DoE.base’

The following objects are masked from ‘package:stats’:

    aov, lm

The following object is masked from ‘package:graphics’:

    plot.design

The following object is masked from ‘package:base’:

    lengths

── Attaching packages ─────────────────────────────────────── tidyverse 1.2.1 ──
✔ ggplot2 3.2.1     ✔ purrr   0.3.2
✔ tibble  2.1.3     ✔ dplyr   0.8.3
✔ tidyr   1.0.0     ✔ stringr 1.4.0
✔ readr   1.3.1     ✔ forcats 0.4.0
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()

creating full factorial with 20 runs ...
#+end_example

** Experiments Execution
The scripts in this work are designed for use in a cluster with Slurm
job scheduler. Here, to start the experiments, the [[SH/central.sh][central script]] was
first executed, which allocates the necessary nodes, in this case,
hype2, hype3, hype4, and hype5, and passes through ssh the bash
command that calls the [[SH//experiments_exec.sh][experiments execution]] script. This script first
calls the [[SH/sys_info_collect.sh][system information]] script to collect system
information. Next, it executes the experiments and, at the end,
requests that the [[SH/experiments_charac.sh][experiments characterization]] script to start the
characterization execution.

To reproduce this evaluation in an environment without Slurm job
scheduler, simply clone this repository into the server's HOME
directory, set the server names in the PARTITION variable ([[SH/experiments_exec.sh][experiments
execution]] script line 66), adjust the machine files in [[MACHINE_FILES][Machine Files]]
folder also with the name of the servers, adjust the number of
processes (in [[SH/experiments_exec.sh][experiments execution]] script lines 237, 240, 243 and,
246 and in [[SH/experiments_charac.sh][experiments characterization]] script lines 93, 96 and, 99)
to be used during the execution, respecting the power of two or square
root requirements, and finally executes the [[SH/experiments_exec.sh][experiments execution]]
script like a normal bash script.

** Graphical Analysis
Upon completion of the experiments, in this topic, graphs containing
the execution time and network performance were created. The first
step is to read the CSV files.
*** Firts Analysis Plots
**** Read CSVs
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled=FALSE)
suppressMessages(library("tidyverse"));
df_intel <- read_csv("LOGS/LOGS_CSV/intel_A10.11-02-2020.12h02m47s.csv", progress=FALSE)
df_apps <- read_csv("LOGS/LOGS_CSV/exec_A10.11-02-2020.12h02m47s.csv", progress=FALSE)
    
df_apps %>%
      group_by(apps) %>%
      summarise(
        average=mean(time),
        std=sd(time),
        ste=3*std/sqrt(n()),
        N=n()) %>%
      arrange(apps) -> df_apps
df_apps

df_intel %>%
  filter(bytes != 0) %>%
  group_by(bytes) %>%
  summarise(
    average=mean(time),
    std=sd(time),
    ste=3*std/sqrt(n()),
    N=n()) %>%
  arrange(bytes) -> df_intel_latency
df_intel_latency

df_intel %>%
  filter(bytes != 0) %>%
  group_by(bytes) %>%
  summarise(
    average=(mean(`mbytes-sec`)/1000),
    std=(sd(`mbytes-sec`)/1000),
    ste=3*std/sqrt(n()),
    N=n()) %>%
  arrange(bytes) -> df_intel_band
df_intel_band

#+end_src

#+RESULTS:
#+begin_example

Parsed with column specification:
cols(
  apps = col_character(),
  bytes = col_double(),
  time = col_double(),
  `mbytes-sec` = col_double()
)

Parsed with column specification:
cols(
  apps = col_character(),
  time = col_double()
)

# A tibble: 10 x 5
   apps  average    std    ste     N
   <
  <
 <
 <
<int>
 1 alya    352.   2.47   1.35     30
 2 bt      797.   4.36   2.39     30
 3 cg      604.  22.3   12.2      30
 4 ep       61.5  0.453  0.248    30
 5 ft     1149.   8.47   4.64     30
 6 is      111.   1.26   0.689    30
 7 lu      483.   2.56   1.40     30
 8 mg       66.6  0.581  0.318    30
 9 sp     1144.  12.5    6.83     30
10 <
    NA   NA     NA         1

# A tibble: 23 x 5
   bytes average   std   ste     N
   <
  <
<
<
<int>
 1     1    9.00 0.479 0.262    30
 2     2    8.89 0.551 0.302    30
 3     4    9.15 0.483 0.264    30
 4     8    8.92 0.487 0.267    30
 5    16    8.98 0.611 0.334    30
 6    32    8.97 0.403 0.221    30
 7    64    9.24 0.800 0.438    30
 8   128    9.17 0.556 0.304    30
 9   256    9.53 1.03  0.561    30
10   512    9.46 0.915 0.501    30
# … with 13 more rows

# A tibble: 23 x 5
   bytes  average        std        ste     N
   <
   <
     <
     <
<int>
 1     1 0.000112 0.00000664 0.00000364    30
 2     2 0.000225 0.0000128  0.00000701    30
 3     4 0.000439 0.0000224  0.0000123     30
 4     8 0.000900 0.0000463  0.0000254     30
 5    16 0.00179  0.000111   0.0000608     30
 6    32 0.00358  0.000151   0.0000827     30
 7    64 0.00697  0.000505   0.000276      30
 8   128 0.0140   0.000805   0.000441      30
 9   256 0.0271   0.00232    0.00127       30
10   512 0.0545   0.00399    0.00219       30
# … with 13 more rows
#+end_example
**** PingPong - Latency
#+begin_src R :results output graphics :file R/PLOTS/Latency.png :exports both :width 800 :height 350 :session *R* 
ggplot(df_intel_latency,aes(x=bytes, y=average)) +
  #geom_line(aes(color = interface), alpha = 1) +
  #geom_point(aes(color=interface, shape=interface),size = 4) +
  scale_shape_manual(values = c(15, 16),
                     breaks=c("ib", "eth"),
                     labels=c("InfiniBand FDR 56Gbps", "Ethernet 1Gbps")) +
  geom_errorbar(aes(ymin=average-ste, ymax=average+ste, color=interface, group=interface), width = .2) +
  theme_bw() +
  scale_y_log10(breaks=c(0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024)) +
  scale_x_log10(breaks=c(0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304)) +
  ylab('Average Latency Time\n(Usec in 2 Log Scale)') +
  xlab('Message Size (Bytes)') +
  scale_color_manual(values=c( "#BEBEBE", "#303030"),
                    breaks=c("ib", "eth"),
                    labels=c("InfiniBand FDR 56Gbps", "Ethernet 1Gbps")) +
    theme (legend.position = c(0.2, 0.82),
           legend.background = element_rect(color = "black", size = 0.5, linetype = "solid"),
           plot.margin = unit(x = c(0.2, 0, 0, 0), units = "cm"),
           axis.title=element_text(size=18), 
           legend.title = element_blank(),
           legend.text = element_text(color = "black", size = 18),
           axis.text.x = element_text(angle=55, hjust=1, size =16, color = "black"),
           axis.text.y = element_text(size =16, color = "black"))
#+end_src

#+RESULTS:
[[file:R/PLOTS/Latency.png]]

**** PingPong - Bandwidth
#+begin_src R :results output graphics :file R/PLOTS/Bandwidth.png :exports both :width 800 :height 350 :session *R* 
ggplot(df_intel_band[df_intel_band$interface %in% c("ib", "eth"), ],aes(x=bytes, y=average)) +
  geom_line(aes(col = interface), alpha = 1) +
  geom_point(aes(col = interface, shape=interface), size = 4) +
  scale_shape_manual(values = c(15, 16, 17),
                     breaks=c("ib", "eth"),
                     labels=c("InfiniBand FDR 56Gbps", "Ethernet 1Gbps")) +  
  geom_errorbar(aes(ymin=average-ste, ymax=average+ste, color=interface, group=interface), width = .2) +
  theme_bw() +
  scale_y_continuous(breaks=c(0,1,2,3,4,5,6,7,8)) +
  scale_x_log10(breaks=c(0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304)) +
  ylab('Average Bandwidth\n(Gigabytes per Second)') +
  xlab('Message Size (Bytes)') +
  scale_colour_manual(values=c( "#BEBEBE", "#303030"),
                    breaks=c("ib", "eth"),
                    labels=c("InfiniBand FDR 56Gbps", "Ethernet 1Gbps")) +
  theme (legend.position = c(0.2, 0.82),
         legend.background = element_rect(color = "black", size = 0.3, linetype = "solid"),
          plot.margin = unit(x = c(0.1, 0, 0, 0), units = "cm"),
         axis.title=element_text(size=18), 
         legend.title = element_blank(),
         legend.text = element_text(color = "black", size = 18),
         axis.text.x = element_text(angle=55, hjust=1, size =16, color = "black"),
         axis.text.y = element_text(size =16, color = "black"))
#+end_src

#+RESULTS:
[[file:R/PLOTS/Bandwidth.png]]

**** FT-EP-IS-SP
#+begin_src R :results output graphics :file R/PLOTS/FT_EP_IS_SP.png :exports both :width 800 :height 400 :session *R*
try <- c(exec_ft="FT", exec_sp="SP",  exec_ep="EP", exec_is="IS")
try2 <- c(exec_ft="128", exec_sp="144",  exec_ep="128", exec_is="128")
df_apps$interface <- factor(df_apps$interface,
levels=c("ib", "ipoib", "eth"))

count <- 0
breaks_fun <- function(x) {
  count <<- count + 1L
  switch(
    count,
    c(0,10,20,30,40),
    c(0,400,800,1200,1600),
    c(0,50,100,150),
    c(0,200,400,600,800)
  )
}

ggplot(df_apps[df_apps$apps %in% c("exec_ft", "exec_sp", "exec_ep", "exec_is"), ] , aes(x=apps, y=average, fill=interface)) +
geom_bar(stat="identity", position = "dodge", width = 0.6) +
geom_errorbar(aes(ymin=average-ste, ymax=average+ste), width=0.2, position = position_dodge(.6)) +
theme_bw() +
scale_fill_manual(values=c("#303030", "#888888", "#BEBEBE") ,
breaks=c("ib", "ipoib", "eth"), labels=c("InfiniBand", "IP-over-IB", "Ethernet")) +
theme(legend.position = "top", 
      legend.key = element_rect(colour = "grey"),
      legend.key.height = unit(0.5, "line"),
      legend.key.width = unit(4, "line"),
      legend.spacing = unit(100, "line"),
      plot.margin = unit(x = c(0, 0, 0, 0), units = "cm"),
      legend.margin=margin(c(0, 0, -8, 0)),
      axis.text.x = element_text(size =16, color = "black"),
      axis.text.y = element_text(size =16, color = "black"),
      axis.title=element_text(size=18), 
      legend.title = element_blank(),
      legend.text = element_text(color = "black", size = 18)) +
      scale_x_discrete(labels=try2) +
      labs(x="Number of MPI Processes", y="Execution Time in Seconds") +
      facet_wrap(facets= ~ apps, scales="free", labeller=labeller(apps=try), nrow=1) +
      scale_y_continuous(breaks = breaks_fun, limits = c(0, NA)) + 
      theme(strip.text.x=element_text(size=18),
            strip.background=element_rect(fill='#F5F5F5'))
     
#+end_src

#+RESULTS:
[[file:R/PLOTS/FT_EP_IS_SP.png]]

**** MG-CG-LU-BT
#+begin_src R :results output graphics :file R/PLOTS/MG_CG_LU_BT.png :exports both :width 800 :height 400 :session *R*
try <- c(exec_mg="MG", exec_cg="CG",  exec_lu="LU", exec_bt="BT")
try2 <- c(exec_mg="128", exec_cg="128",  exec_lu="128", exec_bt="144")
df_apps$interface <- factor(df_apps$interface,
levels=c("ib", "ipoib", "eth"))


count <- 0
breaks_fun <- function(x) {
  count <<- count + 1L
  switch(
    count,
    c(0,110,220,330,440,550),
    c(0,200,400,600,800),
    c(0,100,200,300),
    c(0,20,40,60,80)
  )
}

ggplot(df_apps[df_apps$apps %in% c("exec_mg", "exec_cg", "exec_lu", "exec_bt"), ] , aes(x=apps, y=average, fill=interface)) +
geom_bar(stat="identity", position = "dodge", width = 0.6) +
geom_errorbar(aes(ymin=average-ste, ymax=average+ste), width=0.2, position = position_dodge(.6)) +
theme_bw() +
scale_fill_manual(values=c("#303030", "#888888", "#BEBEBE") ,
breaks=c("ib", "ipoib", "eth"), labels=c("InfiniBand", "IP-over-IB", "Ethernet")) +
theme(legend.position = "top", 
      legend.key = element_rect(colour = "grey"),
      legend.key.height = unit(0.5, "line"),
      legend.key.width = unit(4, "line"),
      legend.spacing = unit(100, "line"),
      plot.margin = unit(x = c(0, 0, 0, 0), units = "cm"),
      legend.margin=margin(c(0, 0, -8, 0)),
      axis.text.x = element_text(size =16, color = "black"),
      axis.text.y = element_text(size =16, color = "black"),
      axis.title=element_text(size=18), 
      legend.title = element_blank(),
      legend.text = element_text(color = "black", size = 18)) +
      scale_x_discrete(labels=try2) +
      labs(x="Number of MPI Processes", y="Execution Time in Seconds") +
      facet_wrap(facets= ~ apps, scales="free", labeller=labeller(apps=try), nrow=1) +
      scale_y_continuous(breaks = breaks_fun, limits = c(0, NA)) +
      theme(strip.text.x=element_text(size=18),
            strip.background=element_rect(fill='#F5F5F5'))
#+end_src

#+RESULTS:
[[file:R/PLOTS/MG_CG_LU_BT.png]]

**** Alya-IMB
#+begin_src R :results output graphics :file R/PLOTS/Alya-IMB.png :exports both :width 800 :height 400 :session *R*  
try <- c(exec_alya="Alya",exec_imb_memory="ImbBench-Memory\n8Level", exec_imb_CPU="ImbBench-CPU\n8Level")
try2 <- c(exec_alya="160", exec_imb_memory="160", exec_imb_CPU="160")
df_apps$interface <- factor(df_apps$interface,
levels=c("ib", "ipoib", "eth"))

count <- 0
breaks_fun <- function(x) {
  count <<- count + 1L
  switch(
    count,
    c(0,100,200,300),
    c(0,3,6,9),
    c(0,7,14,21,28)
  )
}

ggplot(df_apps[df_apps$apps %in% c("exec_alya", "exec_imb_memory", "exec_imb_CPU"), ] , aes(x=apps, y=average, fill=interface)) +
geom_bar(stat="identity", position = "dodge", width = 0.4) +
geom_errorbar(aes(ymin=average-ste, ymax=average+ste), width=.1, position = position_dodge(.4)) +
theme_bw() +
scale_fill_manual(values=c("#303030", "#888888", "#BEBEBE"),
breaks=c("ib", "ipoib", "eth"), labels=c("InfiniBand", "IP-over-IB", "Ethernet")) +
theme(legend.position = "top", 
      legend.key = element_rect(colour = "grey"),
      legend.key.height = unit(0.5, "line"),
      legend.key.width = unit(4, "line"),
      legend.spacing = unit(100, "line"),
      plot.margin = unit(x = c(0, 0, 0, 0), units = "cm"),
      legend.margin=margin(c(0, 0, -8, 0)),
      axis.text.x = element_text(size =16, color = "black"),
      axis.text.y = element_text(size =16, color = "black"),
      axis.title=element_text(size=18), 
      legend.title = element_blank(),
      legend.text = element_text(color = "black", size = 18)) +
      scale_x_discrete(labels=try2) +
      labs(x="Number of MPI Processes", y="Execution Time in Seconds") +
      facet_wrap(facets= ~ apps, scales="free", labeller=labeller(apps=try), nrow=1) +
      scale_y_continuous(breaks = breaks_fun, limits = c(0, NA)) + 
      theme(strip.text.x=element_text(size=18),
            strip.background=element_rect(fill='#F5F5F5'))



#+end_src

#+RESULTS:
[[file:R/PLOTS/Alya-IMB.png]]
*** Cost Plots
**** Read CSVs 
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled=FALSE)
suppressMessages(library("tidyverse"));
df_apps <- read_csv("LOGS/LOGS_CSV/apps_exec.22-11-2019.16h44m04s.csv", progress=FALSE)

  A8_h=0.975
  A8_m=A8_h/60
  A10_h=0.78
  A10_m=(A10_h/60)

df_apps %>%
  group_by(apps,interface) %>%
  summarise(
    average_s=mean(time),
    average_m=average_s/60,
    cost= ifelse(interface[1] == "eth", A10_m*average_m,  A8_m*average_m)) %>%
  arrange(apps,interface) -> df_apps
#+end_src

#+RESULTS:
: 
: Parsed with column specification:
: cols(
:   apps = col_character(),
:   interface = col_character(),
:   time = col_double()
: )

**** FT-EP-IS-SP
#+begin_src R :results output graphics :file R/PLOTS/FT_EP_IS_SP.cost.png :exports both :width 800 :height 400 :session *R*
try <- c(exec_ft="FT", exec_sp="SP",  exec_ep="EP", exec_is="IS")
try2 <- c(exec_ft="128", exec_sp="144",  exec_ep="128", exec_is="128")
df_apps$interface <- factor(df_apps$interface,
levels=c("ib", "ipoib", "eth"))

ggplot(df_apps[df_apps$apps %in% c("exec_ft", "exec_sp", "exec_ep", "exec_is"), ] , aes(x=apps, y=cost, fill=interface)) +
geom_bar(stat="identity", position = "dodge", width = 0.6) +
theme_bw() +
scale_fill_manual(values=c("#303030", "#888888", "#BEBEBE") ,
breaks=c("ib", "ipoib", "eth"), labels=c("InfiniBand", "IP-over-IB", "Ethernet")) +
theme(legend.position = "top", 
      legend.key = element_rect(colour = "grey"),
      legend.key.height = unit(0.5, "line"),
      legend.key.width = unit(4, "line"),
      legend.spacing = unit(100, "line"),
      plot.margin = unit(x = c(0, 0, 0, 0), units = "cm"),
      legend.margin=margin(c(0, 0, -8, 0)),
      axis.text.x = element_text(size =16, color = "black"),
      axis.text.y = element_text(size =16, color = "black"),
      axis.title=element_text(size=18), 
      legend.title = element_blank(),
      legend.text = element_text(color = "black", size = 18)) +
      scale_x_discrete(labels=try2) +
      labs(x="Number of MPI Processes", y="Execution Cost in US$") +
      facet_wrap(facets= ~ apps, scales="free", labeller=labeller(apps=try), nrow=1) +
      #scale_y_continuous(breaks = breaks_fun, limits = c(0, NA)) + 
      theme(strip.text.x=element_text(size=18),
            strip.background=element_rect(fill='#F5F5F5'))
     
#+end_src

#+RESULTS:
[[file:R/PLOTS/FT_EP_IS_SP.cost.png]]

**** MG-CG-LU-BT
#+begin_src R :results output graphics :file R/PLOTS/MG_CG_LU_BT.cost.png :exports both :width 800 :height 400 :session *R*
try <- c(exec_mg="MG", exec_cg="CG",  exec_lu="LU", exec_bt="BT")
try2 <- c(exec_mg="128", exec_cg="128",  exec_lu="128", exec_bt="144")
df_apps$interface <- factor(df_apps$interface,
levels=c("ib", "ipoib", "eth"))

ggplot(df_apps[df_apps$apps %in% c("exec_mg", "exec_cg", "exec_lu", "exec_bt"), ] , aes(x=apps, y=cost, fill=interface)) +
geom_bar(stat="identity", position = "dodge", width = 0.6) +
theme_bw() +
scale_fill_manual(values=c("#303030", "#888888", "#BEBEBE") ,
breaks=c("ib", "ipoib", "eth"), labels=c("InfiniBand", "IP-over-IB", "Ethernet")) +
theme(legend.position = "top", 
      legend.key = element_rect(colour = "grey"),
      legend.key.height = unit(0.5, "line"),
      legend.key.width = unit(4, "line"),
      legend.spacing = unit(100, "line"),
      plot.margin = unit(x = c(0, 0, 0, 0), units = "cm"),
      legend.margin=margin(c(0, 0, -8, 0)),
      axis.text.x = element_text(size =16, color = "black"),
      axis.text.y = element_text(size =16, color = "black"),
      axis.title=element_text(size=18), 
      legend.title = element_blank(),
      legend.text = element_text(color = "black", size = 18)) +
      scale_x_discrete(labels=try2) +
      labs(x="Number of MPI Processes", y="Execution Cost in US$") +
      facet_wrap(facets= ~ apps, scales="free", labeller=labeller(apps=try), nrow=1) +
      theme(strip.text.x=element_text(size=18),
            strip.background=element_rect(fill='#F5F5F5'))
#+end_src

#+RESULTS:
[[file:R/PLOTS/MG_CG_LU_BT.cost.png]]

**** Alya-IMB
#+begin_src R :results output graphics :file R/PLOTS/Alya-IMB.cost.png :exports both :width 800 :height 400 :session *R*  
try <- c(exec_alya="Alya",exec_imb_memory="ImbBench-Memory\n8Level", exec_imb_CPU="ImbBench-CPU\n8Level")
try2 <- c(exec_alya="160", exec_imb_memory="160", exec_imb_CPU="160")
df_apps$interface <- factor(df_apps$interface,
levels=c("ib", "ipoib", "eth"))

ggplot(df_apps[df_apps$apps %in% c("exec_alya", "exec_imb_memory", "exec_imb_CPU"), ] , aes(x=apps, y=cost, fill=interface)) +
geom_bar(stat="identity", position = "dodge", width = 0.4) +
theme_bw() +
scale_fill_manual(values=c("#303030", "#888888", "#BEBEBE"),
breaks=c("ib", "ipoib", "eth"), labels=c("InfiniBand", "IP-over-IB", "Ethernet")) +
theme(legend.position = "top", 
      legend.key = element_rect(colour = "grey"),
      legend.key.height = unit(0.5, "line"),
      legend.key.width = unit(4, "line"),
      legend.spacing = unit(100, "line"),
      plot.margin = unit(x = c(0, 0, 0, 0), units = "cm"),
      legend.margin=margin(c(0, 0, -8, 0)),
      axis.text.x = element_text(size =16, color = "black"),
      axis.text.y = element_text(size =16, color = "black"),
      axis.title=element_text(size=18), 
      legend.title = element_blank(),
      legend.text = element_text(color = "black", size = 18)) +
      scale_x_discrete(labels=try2) +
      labs(x="Number of MPI Processes", y="Execution Cost in US$") +
      facet_wrap(facets= ~ apps, scales="free", labeller=labeller(apps=try), nrow=1) +
      theme(strip.text.x=element_text(size=18),
            strip.background=element_rect(fill='#F5F5F5'))



#+end_src

#+RESULTS:
[[file:R/PLOTS/Alya-IMB.cost.png]]
***** Read CSVs
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled=FALSE)
suppressMessages(library(tidyverse))
df.ft.eth <- read_csv("LOGS/TRACE/charac_ft.eth/charac_ft.eth.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "FT.eth") %>%
  select(Rank, everything())
df.ft.eth

df.ep.eth <- read_csv("LOGS/TRACE/charac_ep.eth/charac_ep.eth.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "EP.eth") %>%
  select(Rank, everything())
df.ep.eth

df.is.eth <- read_csv("LOGS/TRACE/charac_is.eth/charac_is.eth.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "IS.eth") %>%
  select(Rank, everything())
df.is.eth

df.sp.eth <- read_csv("LOGS/TRACE/charac_sp.eth/charac_sp.eth.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "SP.eth") %>%
  select(Rank, everything())
df.sp.eth

df.ft.ipoib <- read_csv("LOGS/TRACE/charac_ft.ipoib/charac_ft.ipoib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "FT.ipoib") %>%
  select(Rank, everything())
df.ft.ipoib

df.ep.ipoib <- read_csv("LOGS/TRACE/charac_ep.ipoib/charac_ep.ipoib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "EP.ipoib") %>%
  select(Rank, everything())
df.ep.ipoib

df.is.ipoib <- read_csv("LOGS/TRACE/charac_is.ipoib/charac_is.ipoib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "IS.ipoib") %>%
  select(Rank, everything())
df.is.ipoib

df.sp.ipoib <- read_csv("LOGS/TRACE/charac_sp.ipoib/charac_sp.ipoib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "SP.ipoib") %>%
  select(Rank, everything())
df.sp.ipoib

df.ft.ib <- read_csv("LOGS/TRACE/charac_ft.ib/charac_ft.ib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "FT.ib") %>%
  select(Rank, everything())
df.ft.ib

df.ep.ib <- read_csv("LOGS/TRACE/charac_ep.ib/charac_ep.ib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "EP.ib") %>%
  select(Rank, everything())
df.ep.ib


df.is.ib <- read_csv("LOGS/TRACE/charac_is.ib/charac_is.ib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "IS.ib") %>%
  select(Rank, everything())
df.is.ib

df.sp.ib <- read_csv("LOGS/TRACE/charac_sp.ib/charac_sp.ib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "SP.ib") %>%
  select(Rank, everything())
df.sp.ib

#+end_src

#+RESULTS:
#+begin_example

Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character(),
  X3 = col_character(),
  X4 = col_double(),
  X5 = col_double(),
  X6 = col_double(),
  X7 = col_double(),
  X8 = col_character()
)

# A tibble: 8,193 x 6
    Rank Start   End Duration Value          App   
   <
<
<
   <
<
         <

 1    99 0.779  1.52 0.745    MPI_Init       FT.eth
 2    99 1.52   1.52 0.000001 MPI_Comm_size  FT.eth
 3    99 1.52   1.52 0        MPI_Comm_rank  FT.eth
 4    99 1.52   1.53 0.00158  MPI_Bcast      FT.eth
 5    99 1.53   1.53 0.000094 MPI_Bcast      FT.eth
 6    99 1.53   1.53 0.000101 MPI_Bcast      FT.eth
 7    99 1.53   1.53 0.000054 MPI_Bcast      FT.eth
 8    99 1.53   1.53 0.000001 MPI_Bcast      FT.eth
 9    99 1.53   1.53 0.00254  MPI_Comm_split FT.eth
10    99 1.53   1.53 0.00188  MPI_Comm_split FT.eth
# … with 8,183 more rows

Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character(),
  X3 = col_character(),
  X4 = col_double(),
  X5 = col_double(),
  X6 = col_double(),
  X7 = col_double(),
  X8 = col_character()
)

# A tibble: 1,280 x 6
    Rank  Start   End Duration Value         App   
   <
 <
<
   <
<
        <

 1    99  0.800  1.72 0.920    MPI_Init      EP.eth
 2    99  1.72   1.72 0.000001 MPI_Comm_rank EP.eth
 3    99  1.72   1.72 0        MPI_Comm_size EP.eth
 4    99  1.72   1.72 0.00199  MPI_Bcast     EP.eth
 5    99  1.72   1.72 0.000323 MPI_Barrier   EP.eth
 6    99 38.3   38.9  0.595    MPI_Allreduce EP.eth
 7    99 38.9   38.9  0.000558 MPI_Allreduce EP.eth
 8    99 38.9   38.9  0.000432 MPI_Allreduce EP.eth
 9    99 38.9   38.9  0.000344 MPI_Allreduce EP.eth
10    99 38.9   38.9  0.000841 MPI_Finalize  EP.eth
# … with 1,270 more rows

Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character(),
  X3 = col_character(),
  X4 = col_double(),
  X5 = col_double(),
  X6 = col_double(),
  X7 = col_double(),
  X8 = col_character()
)

# A tibble: 5,501 x 6
    Rank  Start   End  Duration Value         App   
   <
 <
<
    <
<
        <

 1    99  0.740  1.56  0.816    MPI_Init      IS.eth
 2    99  1.56   1.56  0.000005 MPI_Comm_rank IS.eth
 3    99  1.56   1.56  0.000002 MPI_Comm_size IS.eth
 4    99  1.56   1.56  0.00164  MPI_Bcast     IS.eth
 5    99  3.99   5.24  1.25     MPI_Allreduce IS.eth
 6    99  5.24   5.25  0.00662  MPI_Alltoall  IS.eth
 7    99  5.25  22.9  17.6      MPI_Alltoallv IS.eth
 8    99 23.6   23.6   0.0828   MPI_Allreduce IS.eth
 9    99 23.6   23.6   0.00164  MPI_Alltoall  IS.eth
10    99 23.6   38.1  14.5      MPI_Alltoallv IS.eth
# … with 5,491 more rows

Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character(),
  X3 = col_character(),
  X4 = col_double(),
  X5 = col_double(),
  X6 = col_double(),
  X7 = col_double(),
  X8 = col_character()
)

# A tibble: 15,226,704 x 6
    Rank Start   End Duration Value          App   
   <
<
<
   <
<
         <

 1   143 0.386  1.24 0.853    MPI_Init       SP.eth
 2   143 1.24   1.24 0.000004 MPI_Comm_size  SP.eth
 3   143 1.24   1.24 0        MPI_Comm_rank  SP.eth
 4   143 1.24   1.24 0.00253  MPI_Comm_split SP.eth
 5   143 1.24   1.24 0.000001 MPI_Comm_size  SP.eth
 6   143 1.24   1.24 0.00192  MPI_Comm_dup   SP.eth
 7   143 1.24   1.25 0.00187  MPI_Comm_dup   SP.eth
 8   143 1.25   1.25 0.00134  MPI_Bcast      SP.eth
 9   143 1.25   1.25 0.000147 MPI_Bcast      SP.eth
10   143 1.25   1.25 0.000093 MPI_Bcast      SP.eth
# … with 15,226,694 more rows

Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character(),
  X3 = col_character(),
  X4 = col_double(),
  X5 = col_double(),
  X6 = col_double(),
  X7 = col_double(),
  X8 = col_character()
)

# A tibble: 8,193 x 6
    Rank Start   End Duration Value          App     
   <
<
<
   <
<
         <
  
 1    99 0.722  2.70 1.98     MPI_Init       FT.ipoib
 2    99 2.70   2.70 0.000008 MPI_Comm_size  FT.ipoib
 3    99 2.70   2.70 0        MPI_Comm_rank  FT.ipoib
 4    99 2.70   2.70 0.00149  MPI_Bcast      FT.ipoib
 5    99 2.70   2.70 0.000184 MPI_Bcast      FT.ipoib
 6    99 2.70   2.70 0.000086 MPI_Bcast      FT.ipoib
 7    99 2.70   2.70 0.00017  MPI_Bcast      FT.ipoib
 8    99 2.70   2.70 0.000171 MPI_Bcast      FT.ipoib
 9    99 2.70   2.71 0.00242  MPI_Comm_split FT.ipoib
10    99 2.71   2.71 0.00193  MPI_Comm_split FT.ipoib
# … with 8,183 more rows

Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character(),
  X3 = col_character(),
  X4 = col_double(),
  X5 = col_double(),
  X6 = col_double(),
  X7 = col_double(),
  X8 = col_character()
)

# A tibble: 1,280 x 6
    Rank  Start   End Duration Value         App     
   <
 <
<
   <
<
        <
  
 1    99  0.737  2.63 1.90     MPI_Init      EP.ipoib
 2    99  2.63   2.63 0.000002 MPI_Comm_rank EP.ipoib
 3    99  2.63   2.63 0        MPI_Comm_size EP.ipoib
 4    99  2.63   2.64 0.00114  MPI_Bcast     EP.ipoib
 5    99  2.64   2.64 0.000569 MPI_Barrier   EP.ipoib
 6    99 39.3   39.8  0.531    MPI_Allreduce EP.ipoib
 7    99 39.8   39.8  0.000349 MPI_Allreduce EP.ipoib
 8    99 39.8   39.8  0.000338 MPI_Allreduce EP.ipoib
 9    99 39.8   39.8  0.000294 MPI_Allreduce EP.ipoib
10    99 39.8   39.8  0.00066  MPI_Finalize  EP.ipoib
# … with 1,270 more rows

Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character(),
  X3 = col_character(),
  X4 = col_double(),
  X5 = col_double(),
  X6 = col_double(),
  X7 = col_double(),
  X8 = col_character()
)

# A tibble: 5,501 x 6
    Rank Start   End Duration Value         App     
   <
<
<
   <
<
        <
  
 1    99 0.104  1.87 1.77     MPI_Init      IS.ipoib
 2    99 1.87   1.87 0.000005 MPI_Comm_rank IS.ipoib
 3    99 1.87   1.87 0.000002 MPI_Comm_size IS.ipoib
 4    99 1.87   1.87 0.000663 MPI_Bcast     IS.ipoib
 5    99 4.30   5.61 1.30     MPI_Allreduce IS.ipoib
 6    99 5.61   6.63 1.03     MPI_Alltoall  IS.ipoib
 7    99 6.63   8.31 1.67     MPI_Alltoallv IS.ipoib
 8    99 8.87   9.12 0.249    MPI_Allreduce IS.ipoib
 9    99 9.12   9.12 0.000871 MPI_Alltoall  IS.ipoib
10    99 9.12   9.46 0.342    MPI_Alltoallv IS.ipoib
# … with 5,491 more rows

Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character(),
  X3 = col_character(),
  X4 = col_double(),
  X5 = col_double(),
  X6 = col_double(),
  X7 = col_double(),
  X8 = col_character()
)

# A tibble: 15,226,704 x 6
    Rank Start   End Duration Value          App     
   <
<
<
   <
<
         <
  
 1   143 0.897  1.70 0.802    MPI_Init       SP.ipoib
 2   143 1.70   1.70 0.000005 MPI_Comm_size  SP.ipoib
 3   143 1.70   1.70 0        MPI_Comm_rank  SP.ipoib
 4   143 1.70   1.70 0.00271  MPI_Comm_split SP.ipoib
 5   143 1.70   1.70 0.000001 MPI_Comm_size  SP.ipoib
 6   143 1.70   1.70 0.00186  MPI_Comm_dup   SP.ipoib
 7   143 1.70   1.70 0.00179  MPI_Comm_dup   SP.ipoib
 8   143 1.70   1.71 0.00261  MPI_Bcast      SP.ipoib
 9   143 1.71   1.71 0.000191 MPI_Bcast      SP.ipoib
10   143 1.71   1.71 0.000157 MPI_Bcast      SP.ipoib
# … with 15,226,694 more rows

Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character(),
  X3 = col_character(),
  X4 = col_double(),
  X5 = col_double(),
  X6 = col_double(),
  X7 = col_double(),
  X8 = col_character()
)

# A tibble: 8,193 x 6
    Rank Start   End Duration Value          App  
   <
<
<
   <
<
         <chr>
 1    99 0.981  6.82 5.84     MPI_Init       FT.ib
 2    99 6.82   6.82 0.000004 MPI_Comm_size  FT.ib
 3    99 6.82   6.82 0        MPI_Comm_rank  FT.ib
 4    99 6.82   6.82 0.000739 MPI_Bcast      FT.ib
 5    99 6.82   6.82 0.000008 MPI_Bcast      FT.ib
 6    99 6.82   6.82 0.00001  MPI_Bcast      FT.ib
 7    99 6.82   6.82 0.000045 MPI_Bcast      FT.ib
 8    99 6.82   6.82 0.000028 MPI_Bcast      FT.ib
 9    99 6.82   6.82 0.00278  MPI_Comm_split FT.ib
10    99 6.82   6.82 0.00140  MPI_Comm_split FT.ib
# … with 8,183 more rows

Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character(),
  X3 = col_character(),
  X4 = col_double(),
  X5 = col_double(),
  X6 = col_double(),
  X7 = col_double(),
  X8 = col_character()
)

# A tibble: 1,280 x 6
    Rank  Start   End Duration Value         App  
   <
 <
<
   <
<
        <chr>
 1    99  0.274  6.29 6.01     MPI_Init      EP.ib
 2    99  6.29   6.29 0.000004 MPI_Comm_rank EP.ib
 3    99  6.29   6.29 0.000001 MPI_Comm_size EP.ib
 4    99  6.29   6.29 0.000624 MPI_Bcast     EP.ib
 5    99  6.29   6.29 0.000163 MPI_Barrier   EP.ib
 6    99 42.7   43.5  0.868    MPI_Allreduce EP.ib
 7    99 43.5   43.5  0.000179 MPI_Allreduce EP.ib
 8    99 43.5   43.5  0.000367 MPI_Allreduce EP.ib
 9    99 43.5   43.5  0.000193 MPI_Allreduce EP.ib
10    99 43.5   43.5  0.00115  MPI_Finalize  EP.ib
# … with 1,270 more rows

Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character(),
  X3 = col_character(),
  X4 = col_double(),
  X5 = col_double(),
  X6 = col_double(),
  X7 = col_double(),
  X8 = col_character()
)

# A tibble: 5,501 x 6
    Rank  Start   End Duration Value         App  
   <
 <
<
   <
<
        <chr>
 1    99  0.833  6.92 6.09     MPI_Init      IS.ib
 2    99  6.92   6.92 0.000009 MPI_Comm_rank IS.ib
 3    99  6.92   6.92 0.000003 MPI_Comm_size IS.ib
 4    99  6.92   6.92 0.000111 MPI_Bcast     IS.ib
 5    99 10.5   10.6  0.151    MPI_Allreduce IS.ib
 6    99 10.6   11.0  0.388    MPI_Alltoall  IS.ib
 7    99 11.0   19.2  8.25     MPI_Alltoallv IS.ib
 8    99 19.8   20.0  0.197    MPI_Allreduce IS.ib
 9    99 20.0   20.0  0.00181  MPI_Alltoall  IS.ib
10    99 20.0   20.3  0.299    MPI_Alltoallv IS.ib
# … with 5,491 more rows

Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character(),
  X3 = col_character(),
  X4 = col_double(),
  X5 = col_double(),
  X6 = col_double(),
  X7 = col_double(),
  X8 = col_character()
)

# A tibble: 15,226,704 x 6
    Rank Start   End Duration Value          App  
   <
<
<
   <
<
         <chr>
 1   143 0.425  7.20 6.78     MPI_Init       SP.ib
 2   143 7.20   7.20 0.000005 MPI_Comm_size  SP.ib
 3   143 7.20   7.20 0.000001 MPI_Comm_rank  SP.ib
 4   143 7.20   7.20 0.00219  MPI_Comm_split SP.ib
 5   143 7.20   7.20 0        MPI_Comm_size  SP.ib
 6   143 7.20   7.21 0.00138  MPI_Comm_dup   SP.ib
 7   143 7.21   7.21 0.00177  MPI_Comm_dup   SP.ib
 8   143 7.21   7.21 0.00176  MPI_Bcast      SP.ib
 9   143 7.21   7.21 0.000068 MPI_Bcast      SP.ib
10   143 7.21   7.21 0.000007 MPI_Bcast      SP.ib
# … with 15,226,694 more rows
#+end_example

***** FT-Charac
#+begin_src R :results output graphics :file R/PLOTS/FT.charac.png :exports both :width 800 :height 400 :session *R* 
df.charac <- rbind(df.ft.eth, df.ft.ipoib, df.ft.ib)

df.charac %>%
  filter(Value != "MPI_Finalize") %>%
  group_by(Rank,App) %>%
  summarize(MPI.Time = sum(Duration),
            Full.Time = max(End) - min(Start)) %>%
  mutate(Compute.Time = Full.Time - MPI.Time) %>%
  mutate(Comm.Ratio = MPI.Time / Full.Time * 100) %>%
  arrange(Rank) -> df.timings;
df.timings

df.charac %>%
  group_by(Rank,App) %>%
  summarize(Time = max(End) - min(Start) - sum(Duration)) %>%
  mutate(Value = "Computing") -> df.compute
df.compute

df.charac %>%
  group_by(Rank,Value,App) %>%
  summarize(Time = sum(Duration)) -> df.communication;

df.communication$Value <- as.character(df.communication$Value)
df.communication$Value [grepl('MPI_*', df.communication$Value)] <- 'MPI'

df.communication %>%
  group_by(Rank, Value,App) %>%
  summarize(Time = sum(Time)) -> df.communication;

count <- 0
breaks_fun <- function(x) {
  count <<- count + 1L
  switch(
    count,
    c(0, 60, 127),
    c(0, 60, 127),
    c(0, 60, 127),
    c(0, 70, 143)
  )
}

count1 <- 0
breaks_fun2 <- function(x) {
  count1 <<- count1 + 1L
  switch(
    count1,
    c(0, 10,20,30,40),
    c(0, 400,800,1200,1600),
    c(0, 60,120,180),
    c(0, 200,400,600,800)
  )
}

df.compute %>%
  bind_rows(df.communication) %>%
  ggplot(aes(x = Rank, y = Time, fill=Value)) +
  geom_bar(stat='identity', width=1) +
  scale_fill_manual(values=c("#303030", "#BEBEBE")) +
  theme_bw() +
  theme(legend.position="top",
        legend.key = element_rect(colour = "grey"),
        legend.key.height = unit(0.5, "line"),
        legend.key.width = unit(4, "line"),
        legend.spacing = unit(100, "line"),
        plot.margin = unit(x = c(0, 0.2, 0, 0), units = "cm"),
        legend.margin=margin(c(0, 0, -8, 0)),
        axis.text.x = element_text(size =16, color = "black"),
        axis.text.y = element_text(size =16, color = "black"),
        axis.title=element_text(size=18), 
        legend.title = element_blank(),
        legend.text = element_text(color = "black", size = 18)) +
        labs(x="Number of MPI Ranks", y="Execution Time in Seconds") +
        facet_wrap(facets= ~ App, scales="free", nrow=1) +
        scale_x_continuous(breaks = breaks_fun, limits = c(0, NA)) +
        #scale_y_continuous(breaks = breaks_fun2, limits = c(0, NA)) +
        theme(strip.text.x=element_text(size=18),
        strip.background=element_rect(fill='#F5F5F5'))
#+end_src

#+RESULTS:
[[file:R/PLOTS/FT.charac.png]]
***** EP-Charac
#+begin_src R :results output graphics :file R/PLOTS/EP.charac.png :exports both :width 800 :height 400 :session *R* 
df.charac <- rbind(df.ep.eth, df.ep.ipoib, df.ep.ib)

df.charac %>%
  filter(Value != "MPI_Finalize") %>%
  group_by(Rank,App) %>%
  summarize(MPI.Time = sum(Duration),
            Full.Time = max(End) - min(Start)) %>%
  mutate(Compute.Time = Full.Time - MPI.Time) %>%
  mutate(Comm.Ratio = MPI.Time / Full.Time * 100) %>%
  arrange(Rank) -> df.timings;
df.timings

df.charac %>%
  group_by(Rank,App) %>%
  summarize(Time = max(End) - min(Start) - sum(Duration)) %>%
  mutate(Value = "Computing") -> df.compute
df.compute

df.charac %>%
  group_by(Rank,Value,App) %>%
  summarize(Time = sum(Duration)) -> df.communication;

df.communication$Value <- as.character(df.communication$Value)
df.communication$Value [grepl('MPI_*', df.communication$Value)] <- 'MPI'

df.communication %>%
  group_by(Rank, Value,App) %>%
  summarize(Time = sum(Time)) -> df.communication;

count <- 0
breaks_fun <- function(x) {
  count <<- count + 1L
  switch(
    count,
    c(0, 60, 127),
    c(0, 60, 127),
    c(0, 60, 127),
    c(0, 70, 143)
  )
}

count1 <- 0
breaks_fun2 <- function(x) {
  count1 <<- count1 + 1L
  switch(
    count1,
    c(0, 10,20,30,40),
    c(0, 400,800,1200,1600),
    c(0, 60,120,180),
    c(0, 200,400,600,800)
  )
}

df.compute %>%
  bind_rows(df.communication) %>%
  ggplot(aes(x = Rank, y = Time, fill=Value)) +
  geom_bar(stat='identity', width=1) +
  scale_fill_manual(values=c("#303030", "#BEBEBE")) +
  theme_bw() +
  theme(legend.position="top",
        legend.key = element_rect(colour = "grey"),
        legend.key.height = unit(0.5, "line"),
        legend.key.width = unit(4, "line"),
        legend.spacing = unit(100, "line"),
        plot.margin = unit(x = c(0, 0.2, 0, 0), units = "cm"),
        legend.margin=margin(c(0, 0, -8, 0)),
        axis.text.x = element_text(size =16, color = "black"),
        axis.text.y = element_text(size =16, color = "black"),
        axis.title=element_text(size=18), 
        legend.title = element_blank(),
        legend.text = element_text(color = "black", size = 18)) +
        labs(x="Number of MPI Ranks", y="Execution Time in Seconds") +
        facet_wrap(facets= ~ App, scales="free", nrow=1) +
        scale_x_continuous(breaks = breaks_fun, limits = c(0, NA)) +
        #scale_y_continuous(breaks = breaks_fun2, limits = c(0, NA)) +
        theme(strip.text.x=element_text(size=18),
        strip.background=element_rect(fill='#F5F5F5'))
#+end_src

#+RESULTS:
[[file:R/PLOTS/EP.charac.png]]
***** IS-Charac
#+begin_src R :results output graphics :file R/PLOTS/IS.charac.png :exports both :width 800 :height 400 :session *R* 
df.charac <- rbind(df.is.eth, df.is.ipoib, df.is.ib)

df.charac %>%
  filter(Value != "MPI_Finalize") %>%
  group_by(Rank,App) %>%
  summarize(MPI.Time = sum(Duration),
            Full.Time = max(End) - min(Start)) %>%
  mutate(Compute.Time = Full.Time - MPI.Time) %>%
  mutate(Comm.Ratio = MPI.Time / Full.Time * 100) %>%
  arrange(Rank) -> df.timings;
df.timings

df.charac %>%
  group_by(Rank,App) %>%
  summarize(Time = max(End) - min(Start) - sum(Duration)) %>%
  mutate(Value = "Computing") -> df.compute
df.compute

df.charac %>%
  group_by(Rank,Value,App) %>%
  summarize(Time = sum(Duration)) -> df.communication;

df.communication$Value <- as.character(df.communication$Value)
df.communication$Value [grepl('MPI_*', df.communication$Value)] <- 'MPI'

df.communication %>%
  group_by(Rank, Value,App) %>%
  summarize(Time = sum(Time)) -> df.communication;

count <- 0
breaks_fun <- function(x) {
  count <<- count + 1L
  switch(
    count,
    c(0, 60, 127),
    c(0, 60, 127),
    c(0, 60, 127),
    c(0, 70, 143)
  )
}

count1 <- 0
breaks_fun2 <- function(x) {
  count1 <<- count1 + 1L
  switch(
    count1,
    c(0, 10,20,30,40),
    c(0, 400,800,1200,1600),
    c(0, 60,120,180),
    c(0, 200,400,600,800)
  )
}

df.compute %>%
  bind_rows(df.communication) %>%
  ggplot(aes(x = Rank, y = Time, fill=Value)) +
  geom_bar(stat='identity', width=1) +
  scale_fill_manual(values=c("#303030", "#BEBEBE")) +
  theme_bw() +
  theme(legend.position="top",
        legend.key = element_rect(colour = "grey"),
        legend.key.height = unit(0.5, "line"),
        legend.key.width = unit(4, "line"),
        legend.spacing = unit(100, "line"),
        plot.margin = unit(x = c(0, 0.2, 0, 0), units = "cm"),
        legend.margin=margin(c(0, 0, -8, 0)),
        axis.text.x = element_text(size =16, color = "black"),
        axis.text.y = element_text(size =16, color = "black"),
        axis.title=element_text(size=18), 
        legend.title = element_blank(),
        legend.text = element_text(color = "black", size = 18)) +
        labs(x="Number of MPI Ranks", y="Execution Time in Seconds") +
        facet_wrap(facets= ~ App, scales="free", nrow=1) +
        scale_x_continuous(breaks = breaks_fun, limits = c(0, NA)) +
        #scale_y_continuous(breaks = breaks_fun2, limits = c(0, NA)) +
        theme(strip.text.x=element_text(size=18),
        strip.background=element_rect(fill='#F5F5F5'))
#+end_src

#+RESULTS:
[[file:R/PLOTS/IS.charac.png]]

<<<<<<< HEAD

#+RESULTS:
[[file:R/PLOTS/EP.charac.png]]
***** SP-Charac
#+begin_src R :results output graphics :file R/PLOTS/SP.charac.png :exports both :width 800 :height 400 :session *R* 
df.charac <- rbind(df.sp.eth, df.sp.ipoib, df.sp.ib)

df.charac %>%
  filter(Value != "MPI_Finalize") %>%
  group_by(Rank,App) %>%
  summarize(MPI.Time = sum(Duration),
            Full.Time = max(End) - min(Start)) %>%
  mutate(Compute.Time = Full.Time - MPI.Time) %>%
  mutate(Comm.Ratio = MPI.Time / Full.Time * 100) %>%
  arrange(Rank) -> df.timings;
df.timings

df.charac %>%
  group_by(Rank,App) %>%
  summarize(Time = max(End) - min(Start) - sum(Duration)) %>%
  mutate(Value = "Computing") -> df.compute
df.compute

df.charac %>%
  group_by(Rank,Value,App) %>%
  summarize(Time = sum(Duration)) -> df.communication;

df.communication$Value <- as.character(df.communication$Value)
df.communication$Value [grepl('MPI_*', df.communication$Value)] <- 'MPI'

df.communication %>%
  group_by(Rank, Value,App) %>%
  summarize(Time = sum(Time)) -> df.communication;

count <- 0
breaks_fun <- function(x) {
  count <<- count + 1L
  switch(
    count,
    c(0, 60, 127),
    c(0, 60, 127),
    c(0, 60, 127),
    c(0, 70, 143)
  )
}

count1 <- 0
breaks_fun2 <- function(x) {
  count1 <<- count1 + 1L
  switch(
    count1,
    c(0, 10,20,30,40),
    c(0, 400,800,1200,1600),
    c(0, 60,120,180),
    c(0, 200,400,600,800)
  )
}

df.compute %>%
  bind_rows(df.communication) %>%
  ggplot(aes(x = Rank, y = Time, fill=Value)) +
  geom_bar(stat='identity', width=1) +
  scale_fill_manual(values=c("#303030", "#BEBEBE")) +
  theme_bw() +
  theme(legend.position="top",
        legend.key = element_rect(colour = "grey"),
        legend.key.height = unit(0.5, "line"),
        legend.key.width = unit(4, "line"),
        legend.spacing = unit(100, "line"),
        plot.margin = unit(x = c(0, 0.2, 0, 0), units = "cm"),
        legend.margin=margin(c(0, 0, -8, 0)),
        axis.text.x = element_text(size =16, color = "black"),
        axis.text.y = element_text(size =16, color = "black"),
        axis.title=element_text(size=18), 
        legend.title = element_blank(),
        legend.text = element_text(color = "black", size = 18)) +
        labs(x="Number of MPI Ranks", y="Execution Time in Seconds") +
        facet_wrap(facets= ~ App, scales="free", nrow=1) +
        scale_x_continuous(breaks = breaks_fun, limits = c(0, NA)) +
        #scale_y_continuous(breaks = breaks_fun2, limits = c(0, NA)) +
        theme(strip.text.x=element_text(size=18),
        strip.background=element_rect(fill='#F5F5F5'))
#+end_src

#+RESULTS:
[[file:R/PLOTS/SP.charac.png]]

***** FT-Percentage
#+begin_src R :results output graphics :file R/PLOTS/FT.percentage.png :exports both :width 800 :height 400 :session *R* 
options(crayon.enabled=FALSE)
options(scipen = 999)
suppressMessages(library(tidyverse))
df.ft.ib %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.ft.ib

df.ft.ib$Value <- as.character(df.ft.ib$Value)
df.ft.ib$Value [grepl('MPI_*', df.ft.ib$Value)] <- 'MPI'

df.ft.ib %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.ft.ib$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.ft.ib;
df.percent.ft.ib

df.ft.ib$Value <- as.character(df.ft.ib$Value)
df.ft.ib$Value [grepl('MPI', df.ft.ib$Value)] <- 'Computing'

df.ft.ib %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.ft.ib$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.ft.ib

df.ft.ipoib %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.ft.ipoib

df.ft.ipoib$Value <- as.character(df.ft.ipoib$Value)
df.ft.ipoib$Value [grepl('MPI_*', df.ft.ipoib$Value)] <- 'MPI'

df.ft.ipoib %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.ft.ipoib$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.ft.ipoib;
df.percent.ft.ipoib

df.ft.ipoib$Value <- as.character(df.ft.ipoib$Value)
df.ft.ipoib$Value [grepl('MPI', df.ft.ipoib$Value)] <- 'Computing'

df.ft.ipoib %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.ft.ipoib$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.ft.ipoib

df.ft.eth %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.ft.eth

df.ft.eth$Value <- as.character(df.ft.eth$Value)
df.ft.eth$Value [grepl('MPI_*', df.ft.eth$Value)] <- 'MPI'

df.ft.eth %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.ft.eth$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.ft.eth;
df.percent.ft.eth

df.ft.eth$Value <- as.character(df.ft.eth$Value)
df.ft.eth$Value [grepl('MPI', df.ft.eth$Value)] <- 'Computing'

df.ft.eth %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.ft.eth$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.ft.eth

df <- rbind(df.comp.ft.eth, df.comp.ft.ib, df.comp.ft.ipoib, df.percent.ft.eth, df.percent.ft.ib, df.percent.ft.ipoib)

ggplot(df, aes(x=App, y=Percent, fill=Value)) + 
  geom_bar(position = "fill", stat = "identity", width = 0.3) +
  scale_fill_manual(values=c("#303030", "#BEBEBE")) +
  scale_y_continuous(labels = scales::percent_format()) +
  theme_bw() +
  theme(legend.position = "top",
        legend.key = element_rect(colour = "grey"),
        legend.key.height = unit(0.5, "line"),
        legend.key.width = unit(4, "line"),
        legend.spacing = unit(100, "line"),
        plot.margin = unit(x = c(0, 0.2, 0, 0), units = "cm"),
        legend.margin=margin(c(0, 0, -8, 0)),
        axis.text.x = element_text(size =16, color = "black"),
        axis.text.y = element_text(size =16, color = "black"),
        axis.title=element_text(size=18), 
        legend.title = element_blank(),
        legend.text = element_text(color = "black", size = 18)) +
  labs(x="Applications", y="Operation Percentage")

#+end_src

#+RESULTS:
[[file:R/PLOTS/FT.percentage.png]]
***** EP-Percentage
#+begin_src R :results output graphics :file R/PLOTS/EP.percentage.png :exports both :width 800 :height 400 :session *R* 
options(crayon.enabled=FALSE)
options(scipen = 999)
suppressMessages(library(tidyverse))
df.ep.ib %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.ep.ib

df.ep.ib$Value <- as.character(df.ep.ib$Value)
df.ep.ib$Value [grepl('MPI_*', df.ep.ib$Value)] <- 'MPI'

df.ep.ib %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.ep.ib$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.ep.ib;
df.percent.ep.ib

df.ep.ib$Value <- as.character(df.ep.ib$Value)
df.ep.ib$Value [grepl('MPI', df.ep.ib$Value)] <- 'Computing'

df.ep.ib %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.ep.ib$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.ep.ib

df.ep.ipoib %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.ep.ipoib

df.ep.ipoib$Value <- as.character(df.ep.ipoib$Value)
df.ep.ipoib$Value [grepl('MPI_*', df.ep.ipoib$Value)] <- 'MPI'

df.ep.ipoib %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.ep.ipoib$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.ep.ipoib;
df.percent.ep.ipoib

df.ep.ipoib$Value <- as.character(df.ep.ipoib$Value)
df.ep.ipoib$Value [grepl('MPI', df.ep.ipoib$Value)] <- 'Computing'

df.ep.ipoib %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.ep.ipoib$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.ep.ipoib

df.ep.eth %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.ep.eth

df.ep.eth$Value <- as.character(df.ep.eth$Value)
df.ep.eth$Value [grepl('MPI_*', df.ep.eth$Value)] <- 'MPI'

df.ep.eth %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.ep.eth$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.ep.eth;
df.percent.ep.eth

df.ep.eth$Value <- as.character(df.ep.eth$Value)
df.ep.eth$Value [grepl('MPI', df.ep.eth$Value)] <- 'Computing'

df.ep.eth %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.ep.eth$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.ep.eth

df <- rbind(df.comp.ep.eth, df.comp.ep.ib, df.comp.ep.ipoib, df.percent.ep.eth, df.percent.ep.ib, df.percent.ep.ipoib)

ggplot(df, aes(x=App, y=Percent, fill=Value)) + 
  geom_bar(position = "fill", stat = "identity", width = 0.3) +
  scale_fill_manual(values=c("#303030", "#BEBEBE")) +
  scale_y_continuous(labels = scales::percent_format()) +
  theme_bw() +
  theme(legend.position = "top",
        legend.key = element_rect(colour = "grey"),
        legend.key.height = unit(0.5, "line"),
        legend.key.width = unit(4, "line"),
        legend.spacing = unit(100, "line"),
        plot.margin = unit(x = c(0, 0.2, 0, 0), units = "cm"),
        legend.margin=margin(c(0, 0, -8, 0)),
        axis.text.x = element_text(size =16, color = "black"),
        axis.text.y = element_text(size =16, color = "black"),
        axis.title=element_text(size=18), 
        legend.title = element_blank(),
        legend.text = element_text(color = "black", size = 18)) +
  labs(x="Applications", y="Operation Percentage")

#+end_src

#+RESULTS:
[[file:R/PLOTS/EP.percentage.png]]

***** IS-Percentage
#+begin_src R :results output graphics :file R/PLOTS/IS.percentage.png :exports both :width 800 :height 400 :session *R* 
options(crayon.enabled=FALSE)
options(scipen = 999)
suppressMessages(library(tidyverse))
df.is.ib %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.is.ib

df.is.ib$Value <- as.character(df.is.ib$Value)
df.is.ib$Value [grepl('MPI_*', df.is.ib$Value)] <- 'MPI'

df.is.ib %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.is.ib$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.is.ib;
df.percent.is.ib

df.is.ib$Value <- as.character(df.is.ib$Value)
df.is.ib$Value [grepl('MPI', df.is.ib$Value)] <- 'Computing'

df.is.ib %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.is.ib$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.is.ib

df.is.ipoib %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.is.ipoib

df.is.ipoib$Value <- as.character(df.is.ipoib$Value)
df.is.ipoib$Value [grepl('MPI_*', df.is.ipoib$Value)] <- 'MPI'

df.is.ipoib %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.is.ipoib$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.is.ipoib;
df.percent.is.ipoib

df.is.ipoib$Value <- as.character(df.is.ipoib$Value)
df.is.ipoib$Value [grepl('MPI', df.is.ipoib$Value)] <- 'Computing'

df.is.ipoib %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.is.ipoib$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.is.ipoib

df.is.eth %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.is.eth

df.is.eth$Value <- as.character(df.is.eth$Value)
df.is.eth$Value [grepl('MPI_*', df.is.eth$Value)] <- 'MPI'

df.is.eth %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.is.eth$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.is.eth;
df.percent.is.eth

df.is.eth$Value <- as.character(df.is.eth$Value)
df.is.eth$Value [grepl('MPI', df.is.eth$Value)] <- 'Computing'

df.is.eth %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.is.eth$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.is.eth

df <- rbind(df.comp.is.eth, df.comp.is.ib, df.comp.is.ipoib, df.percent.is.eth, df.percent.is.ib, df.percent.is.ipoib)

ggplot(df, aes(x=App, y=Percent, fill=Value)) + 
  geom_bar(position = "fill", stat = "identity", width = 0.3) +
  scale_fill_manual(values=c("#303030", "#BEBEBE")) +
  scale_y_continuous(labels = scales::percent_format()) +
  theme_bw() +
  theme(legend.position = "top",
        legend.key = element_rect(colour = "grey"),
        legend.key.height = unit(0.5, "line"),
        legend.key.width = unit(4, "line"),
        legend.spacing = unit(100, "line"),
        plot.margin = unit(x = c(0, 0.2, 0, 0), units = "cm"),
        legend.margin=margin(c(0, 0, -8, 0)),
        axis.text.x = element_text(size =16, color = "black"),
        axis.text.y = element_text(size =16, color = "black"),
        axis.title=element_text(size=18), 
        legend.title = element_blank(),
        legend.text = element_text(color = "black", size = 18)) +
  labs(x="Applications", y="Operation Percentage")

#+end_src

#+RESULTS:
[[file:R/PLOTS/IS.percentage.png]]

***** SP-Percentage
#+begin_src R :results output graphics :file R/PLOTS/SP.percentage.png :exports both :width 800 :height 400 :session *R* 
options(crayon.enabled=FALSE)
options(scipen = 999)
suppressMessages(library(tidyverse))
df.sp.ib %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.sp.ib

df.sp.ib$Value <- as.character(df.sp.ib$Value)
df.sp.ib$Value [grepl('MPI_*', df.sp.ib$Value)] <- 'MPI'

df.sp.ib %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.sp.ib$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.sp.ib;
df.percent.sp.ib

df.sp.ib$Value <- as.character(df.sp.ib$Value)
df.sp.ib$Value [grepl('MPI', df.sp.ib$Value)] <- 'Computing'

df.sp.ib %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.sp.ib$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.sp.ib

df.sp.ipoib %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.sp.ipoib

df.sp.ipoib$Value <- as.character(df.sp.ipoib$Value)
df.sp.ipoib$Value [grepl('MPI_*', df.sp.ipoib$Value)] <- 'MPI'

df.sp.ipoib %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.sp.ipoib$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.sp.ipoib;
df.percent.sp.ipoib

df.sp.ipoib$Value <- as.character(df.sp.ipoib$Value)
df.sp.ipoib$Value [grepl('MPI', df.sp.ipoib$Value)] <- 'Computing'

df.sp.ipoib %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.sp.ipoib$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.sp.ipoib

df.sp.eth %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.sp.eth

df.sp.eth$Value <- as.character(df.sp.eth$Value)
df.sp.eth$Value [grepl('MPI_*', df.sp.eth$Value)] <- 'MPI'

df.sp.eth %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.sp.eth$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.sp.eth;
df.percent.sp.eth

df.sp.eth$Value <- as.character(df.sp.eth$Value)
df.sp.eth$Value [grepl('MPI', df.sp.eth$Value)] <- 'Computing'

df.sp.eth %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.sp.eth$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.sp.eth

df <- rbind(df.comp.sp.eth, df.comp.sp.ib, df.comp.sp.ipoib, df.percent.sp.eth, df.percent.sp.ib, df.percent.sp.ipoib)

ggplot(df, aes(x=App, y=Percent, fill=Value)) + 
  geom_bar(position = "fill", stat = "identity", width = 0.3) +
  scale_fill_manual(values=c("#303030", "#BEBEBE")) +
  scale_y_continuous(labels = scales::percent_format()) +
  theme_bw() +
  theme(legend.position = "top",
        legend.key = element_rect(colour = "grey"),
        legend.key.height = unit(0.5, "line"),
        legend.key.width = unit(4, "line"),
        legend.spacing = unit(100, "line"),
        plot.margin = unit(x = c(0, 0.2, 0, 0), units = "cm"),
        legend.margin=margin(c(0, 0, -8, 0)),
        axis.text.x = element_text(size =16, color = "black"),
        axis.text.y = element_text(size =16, color = "black"),
        axis.title=element_text(size=18), 
        legend.title = element_blank(),
        legend.text = element_text(color = "black", size = 18)) +
  labs(x="Applications", y="Operation Percentage")

#+end_src

#+RESULTS:
[[file:R/PLOTS/SP.percentage.png]]
ead CSVs
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled=FALSE)
suppressMessages(library(tidyverse))
df.mg.eth <- read_csv("LOGS/TRACE/charac_mg.eth/charac_mg.eth.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "MG.eth") %>%
  select(Rank, everything())
df.mg.eth

df.cg.eth <- read_csv("LOGS/TRACE/charac_cg.eth/charac_cg.eth.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "CG.eth") %>%
  select(Rank, everything())
df.cg.eth

df.lu.eth <- read_csv("LOGS/TRACE/charac_lu.eth/charac_lu.eth.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "LU.eth") %>%
  select(Rank, everything())
df.lu.eth

df.bt.eth <- read_csv("LOGS/TRACE/charac_bt.eth/charac_bt.eth.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "BT.eth") %>%
  select(Rank, everything())
df.bt.eth

df.mg.ipoib <- read_csv("LOGS/TRACE/charac_mg.ipoib/charac_mg.ipoib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "MG.ipoib") %>%
  select(Rank, everything())
df.mg.ipoib

df.cg.ipoib <- read_csv("LOGS/TRACE/charac_cg.ipoib/charac_cg.ipoib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "CG.ipoib") %>%
  select(Rank, everything())
df.cg.ipoib

df.lu.ipoib <- read_csv("LOGS/TRACE/charac_lu.ipoib/charac_lu.ipoib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "LU.ipoib") %>%
  select(Rank, everything())
df.lu.ipoib

df.bt.ipoib <- read_csv("LOGS/TRACE/charac_bt.ipoib/charac_bt.ipoib.csv", col_names = FALSE, progress=FALSE) %>%

  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "BT.ipoib") %>%
  select(Rank, everything())
df.bt.ipoib


df.mg.ib <- read_csv("LOGS/TRACE/charac_mg.ib/charac_mg.ib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "MG.ib") %>%
  select(Rank, everything())
df.mg.ib

df.cg.ib <- read_csv("LOGS/TRACE/charac_cg.ib/charac_cg.ib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "CG.ib") %>%
  select(Rank, everything())
df.cg.ib

df.lu.ib <- read_csv("LOGS/TRACE/charac_lu.ib/charac_lu.ib.csv", col_names = FALSE, progress=FALSE) %>%

  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "LU.ib") %>%
  select(Rank, everything())

df.mg.ib <- read_csv("LOGS/TRACE/charac_mg.ib/charac_mg.ib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "MG.ib") %>%
  select(Rank, everything())
df.mg.ib

df.cg.ib <- read_csv("LOGS/TRACE/charac_cg.ib/charac_cg.ib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "CG.ib") %>%
  select(Rank, everything())
df.cg.ib

df.lu.ib <- read_csv("LOGS/TRACE/charac_lu.ib/charac_lu.ib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "LU.ib") %>%
  select(Rank, everything())
df.lu.ib

df.bt.ib <- read_csv("LOGS/TRACE/charac_bt.ib/charac_bt.ib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "BT.ib") %>%
  select(Rank, everything())
df.bt.ib
#+end_src

#+RESULTS:
#+begin_example

Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character(),
  X3 = col_character(),
  X4 = col_double(),
  X5 = col_double(),
  X6 = col_double(),
  X7 = col_double(),
  X8 = col_character()
)

# A tibble: 3,102,496 x 6
    Rank Start   End Duration Value          App   
   <
<
<
   <
<
         <

 1    99 0.866  1.61 0.741    MPI_Init       MG.eth
 2    99 1.61   1.61 0.000001 MPI_Comm_rank  MG.eth
 3    99 1.61   1.61 0        MPI_Comm_size  MG.eth
 4    99 1.61   1.61 0.00225  MPI_Comm_split MG.eth
 5    99 1.61   1.61 0.000244 MPI_Barrier    MG.eth
 6    99 1.61   1.61 0.00224  MPI_Bcast      MG.eth
 7    99 1.61   1.61 0.000049 MPI_Bcast      MG.eth
 8    99 1.61   1.61 0.000092 MPI_Bcast      MG.eth
 9    99 1.61   1.61 0.000150 MPI_Bcast      MG.eth
10    99 1.61   1.61 0.000042 MPI_Bcast      MG.eth
# … with 3,102,486 more rows

Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character(),
  X3 = col_character(),
  X4 = col_double(),
  X5 = col_double(),
  X6 = col_double(),
  X7 = col_double(),
  X8 = col_character()
)

# A tibble: 13,265,024 x 6
    Rank Start   End Duration Value         App   
   <
<
<
   <
<
        <

 1    99 0.127 0.895 0.768    MPI_Init      CG.eth
 2    99 0.895 0.895 0.000001 MPI_Comm_rank CG.eth
 3    99 0.895 0.895 0        MPI_Comm_size CG.eth
 4    99 0.895 0.898 0.00324  MPI_Bcast     CG.eth
 5    99 8.18  8.18  0.000291 MPI_Irecv     CG.eth
 6    99 8.18  8.18  0.000118 MPI_Send      CG.eth
 7    99 8.18  8.20  0.0209   MPI_Wait      CG.eth
 8    99 8.20  8.20  0.00001  MPI_Irecv     CG.eth
 9    99 8.20  8.20  0.000029 MPI_Send      CG.eth
10    99 8.20  8.20  0.000002 MPI_Wait      CG.eth
# … with 13,265,014 more rows

Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character(),
  X3 = col_character(),
  X4 = col_double(),
  X5 = col_double(),
  X6 = col_double(),
  X7 = col_double(),
  X8 = col_character()
)

# A tibble: 113,834,493 x 6
    Rank Start   End Duration Value         App   
   <
<
<
   <
<
        <

 1    99 0.743  1.57 0.830    MPI_Init      LU.eth
 2    99 1.57   1.57 0.000001 MPI_Comm_rank LU.eth
 3    99 1.57   1.57 0        MPI_Comm_size LU.eth
 4    99 1.57   1.57 0.00151  MPI_Bcast     LU.eth
 5    99 1.57   1.57 0.000103 MPI_Bcast     LU.eth
 6    99 1.57   1.57 0.000085 MPI_Bcast     LU.eth
 7    99 1.57   1.57 0.000051 MPI_Bcast     LU.eth
 8    99 1.57   1.57 0.000098 MPI_Bcast     LU.eth
 9    99 1.57   1.57 0.000013 MPI_Bcast     LU.eth
10    99 1.57   1.57 0.000086 MPI_Bcast     LU.eth
# … with 113,834,483 more rows

Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character(),
  X3 = col_character(),
  X4 = col_double(),
  X5 = col_double(),
  X6 = col_double(),
  X7 = col_double(),
  X8 = col_character()
)

# A tibble: 10,016,496 x 6
    Rank Start   End Duration Value          App   
   <
<
<
   <
<
         <

 1   143 0.893  1.72 0.822    MPI_Init       BT.eth
 2   143 1.72   1.72 0.000001 MPI_Comm_size  BT.eth
 3   143 1.72   1.72 0        MPI_Comm_rank  BT.eth
 4   143 1.72   1.72 0.00260  MPI_Comm_split BT.eth
 5   143 1.72   1.72 0        MPI_Comm_size  BT.eth
 6   143 1.72   1.72 0.00188  MPI_Comm_dup   BT.eth
 7   143 1.72   1.72 0.00180  MPI_Comm_dup   BT.eth
 8   143 1.72   1.72 0.00143  MPI_Bcast      BT.eth
 9   143 1.72   1.72 0.000151 MPI_Bcast      BT.eth
10   143 1.72   1.72 0.000002 MPI_Bcast      BT.eth
# … with 10,016,486 more rows

Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character(),
  X3 = col_character(),
  X4 = col_double(),
  X5 = col_double(),
  X6 = col_double(),
  X7 = col_double(),
  X8 = col_character()
)

# A tibble: 3,102,496 x 6
    Rank  Start   End Duration Value          App     
   <
 <
<
   <
<
         <
  
 1    99 0.0543  2.46 2.40     MPI_Init       MG.ipoib
 2    99 2.46    2.46 0.000006 MPI_Comm_rank  MG.ipoib
 3    99 2.46    2.46 0        MPI_Comm_size  MG.ipoib
 4    99 2.46    2.46 0.00224  MPI_Comm_split MG.ipoib
 5    99 2.46    2.46 0.000382 MPI_Barrier    MG.ipoib
 6    99 2.46    2.46 0.00295  MPI_Bcast      MG.ipoib
 7    99 2.46    2.46 0.000176 MPI_Bcast      MG.ipoib
 8    99 2.46    2.46 0.000135 MPI_Bcast      MG.ipoib
 9    99 2.46    2.46 0.000056 MPI_Bcast      MG.ipoib
10    99 2.46    2.46 0.000109 MPI_Bcast      MG.ipoib
# … with 3,102,486 more rows

Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character(),
  X3 = col_character(),
  X4 = col_double(),
  X5 = col_double(),
  X6 = col_double(),
  X7 = col_double(),
  X8 = col_character()
)

Error: object 'df.ipoib' not found

Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character(),
  X3 = col_character(),
  X4 = col_double(),
  X5 = col_double(),
  X6 = col_double(),
  X7 = col_double(),
  X8 = col_character()
)

# A tibble: 113,834,493 x 6
    Rank Start   End Duration Value         App     
   <
<
<
   <
<
        <
  
 1    99 0.969  2.69 1.72     MPI_Init      LU.ipoib
 2    99 2.69   2.69 0.000006 MPI_Comm_rank LU.ipoib
 3    99 2.69   2.69 0        MPI_Comm_size LU.ipoib
 4    99 2.69   2.69 0.00166  MPI_Bcast     LU.ipoib
 5    99 2.69   2.69 0.000141 MPI_Bcast     LU.ipoib
 6    99 2.69   2.69 0.000127 MPI_Bcast     LU.ipoib
 7    99 2.69   2.69 0.000103 MPI_Bcast     LU.ipoib
 8    99 2.69   2.69 0.000143 MPI_Bcast     LU.ipoib
 9    99 2.69   2.69 0.000174 MPI_Bcast     LU.ipoib
10    99 2.69   2.69 0.000216 MPI_Bcast     LU.ipoib
# … with 113,834,483 more rows

Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character(),
  X3 = col_character(),
  X4 = col_double(),
  X5 = col_double(),
  X6 = col_double(),
  X7 = col_double(),
  X8 = col_character()
)

Error: object 'df.ipoib' not found

Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character(),
  X3 = col_character(),
  X4 = col_double(),
  X5 = col_double(),
  X6 = col_double(),
  X7 = col_double(),
  X8 = col_character()
)

# A tibble: 3,102,496 x 6
    Rank Start   End Duration Value          App  
   <
<
<
   <
<
         <chr>
 1    99 0.834  6.80 5.97     MPI_Init       MG.ib
 2    99 6.80   6.80 0.000002 MPI_Comm_rank  MG.ib
 3    99 6.80   6.80 0.000005 MPI_Comm_size  MG.ib
 4    99 6.80   6.80 0.00198  MPI_Comm_split MG.ib
 5    99 6.80   6.80 0.000081 MPI_Barrier    MG.ib
 6    99 6.80   6.81 0.00227  MPI_Bcast      MG.ib
 7    99 6.81   6.81 0.000001 MPI_Bcast      MG.ib
 8    99 6.81   6.81 0        MPI_Bcast      MG.ib
 9    99 6.81   6.81 0        MPI_Bcast      MG.ib
10    99 6.81   6.81 0        MPI_Bcast      MG.ib
# … with 3,102,486 more rows

Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character(),
  X3 = col_character(),
  X4 = col_double(),
  X5 = col_double(),
  X6 = col_double(),
  X7 = col_double(),
  X8 = col_character()
)

Error: object 'df.ib' not found

Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character(),
  X3 = col_character(),
  X4 = col_double(),
  X5 = col_double(),
  X6 = col_double(),
  X7 = col_double(),
  X8 = col_character()
)

# A tibble: 113,834,493 x 6
    Rank Start   End Duration Value         App  
   <
<
<
   <
<
        <chr>
 1    99 0.789  6.78 5.99     MPI_Init      LU.ib
 2    99 6.78   6.78 0.000006 MPI_Comm_rank LU.ib
 3    99 6.78   6.78 0        MPI_Comm_size LU.ib
 4    99 6.78   6.78 0.000981 MPI_Bcast     LU.ib
 5    99 6.78   6.78 0.000003 MPI_Bcast     LU.ib
 6    99 6.78   6.78 0.000022 MPI_Bcast     LU.ib
 7    99 6.78   6.78 0.000034 MPI_Bcast     LU.ib
 8    99 6.78   6.78 0.000022 MPI_Bcast     LU.ib
 9    99 6.78   6.78 0.000019 MPI_Bcast     LU.ib
10    99 6.78   6.78 0.000675 MPI_Bcast     LU.ib
# … with 113,834,483 more rows

Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character(),
  X3 = col_character(),
  X4 = col_double(),
  X5 = col_double(),
  X6 = col_double(),
  X7 = col_double(),
  X8 = col_character()
)

Error: object 'df.ib' not found
#+end_example
***** MG-Charac
#+begin_src R :results output graphics :file R/PLOTS/MG.charac.png :exports both :width 800 :height 400 :session *R* 
df.charac <- rbind(df.mg.eth, df.mg.ipoib, df.mg.ib)

df.charac %>%
  filter(Value != "MPI_Finalize") %>%
  group_by(Rank,App) %>%
  summarize(MPI.Time = sum(Duration),
            Full.Time = max(End) - min(Start)) %>%
  mutate(Compute.Time = Full.Time - MPI.Time) %>%
  mutate(Comm.Ratio = MPI.Time / Full.Time * 100) %>%
  arrange(Rank) -> df.timings;
df.timings

df.charac %>%
  group_by(Rank,App) %>%
  summarize(Time = max(End) - min(Start) - sum(Duration)) %>%
  mutate(Value = "Computing") -> df.compute
df.compute

df.charac %>%
  group_by(Rank,Value,App) %>%
  summarize(Time = sum(Duration)) -> df.communication;

df.communication$Value <- as.character(df.communication$Value)
df.communication$Value [grepl('MPI_*', df.communication$Value)] <- 'MPI'

df.communication %>%
  group_by(Rank, Value,App) %>%
  summarize(Time = sum(Time)) -> df.communication;

count <- 0
breaks_fun <- function(x) {
  count <<- count + 1L
  switch(
    count,
    c(0, 60, 127),
    c(0, 60, 127),
    c(0, 60, 127),
    c(0, 70, 143)
  )
}

count1 <- 0
breaks_fun2 <- function(x) {
  count1 <<- count1 + 1L
  switch(
    count1,
    c(0, 10,20,30,40),
    c(0, 400,800,1200,1600),
    c(0, 60,120,180),
    c(0, 200,400,600,800)
  )
}

df.compute %>%
  bind_rows(df.communication) %>%
  ggplot(aes(x = Rank, y = Time, fill=Value)) +
  geom_bar(stat='identity', width=1) +
  scale_fill_manual(values=c("#303030", "#BEBEBE")) +
  theme_bw() +
  theme(legend.position="top",
        legend.key = element_rect(colour = "grey"),
        legend.key.height = unit(0.5, "line"),
        legend.key.width = unit(4, "line"),
        legend.spacing = unit(100, "line"),
        plot.margin = unit(x = c(0, 0.2, 0, 0), units = "cm"),
        legend.margin=margin(c(0, 0, -8, 0)),
        axis.text.x = element_text(size =16, color = "black"),
        axis.text.y = element_text(size =16, color = "black"),
        axis.title=element_text(size=18), 
        legend.title = element_blank(),
        legend.text = element_text(color = "black", size = 18)) +
        labs(x="Number of MPI Ranks", y="Execution Time in Seconds") +
        facet_wrap(facets= ~ App, scales="free", nrow=1) +
        scale_x_continuous(breaks = breaks_fun, limits = c(0, NA)) +
        #scale_y_continuous(breaks = breaks_fun2, limits = c(0, NA)) +
        theme(strip.text.x=element_text(size=18),
        strip.background=element_rect(fill='#F5F5F5'))
#+end_src

#+RESULTS:
[[file:R/PLOTS/MG.charac.png]]

***** CG-Charac
#+begin_src R :results output graphics :file R/PLOTS/CG.charac.png :exports both :width 800 :height 400 :session *R* 
df.charac <- rbind(df.cg.eth, df.cg.ipoib, df.cg.ib)

df.charac %>%
  filter(Value != "MPI_Finalize") %>%
  group_by(Rank,App) %>%
  summarize(MPI.Time = sum(Duration),
            Full.Time = max(End) - min(Start)) %>%
  mutate(Compute.Time = Full.Time - MPI.Time) %>%
  mutate(Comm.Ratio = MPI.Time / Full.Time * 100) %>%
  arrange(Rank) -> df.timings;
df.timings

df.charac %>%
  group_by(Rank,App) %>%
  summarize(Time = max(End) - min(Start) - sum(Duration)) %>%
  mutate(Value = "Computing") -> df.compute
df.compute

df.charac %>%
  group_by(Rank,Value,App) %>%
  summarize(Time = sum(Duration)) -> df.communication;

df.communication$Value <- as.character(df.communication$Value)
df.communication$Value [grepl('MPI_*', df.communication$Value)] <- 'MPI'

df.communication %>%
  group_by(Rank, Value,App) %>%
  summarize(Time = sum(Time)) -> df.communication;

count <- 0
breaks_fun <- function(x) {
  count <<- count + 1L
  switch(
    count,
    c(0, 60, 127),
    c(0, 60, 127),
    c(0, 60, 127),
    c(0, 70, 143)
  )
}

count1 <- 0
breaks_fun2 <- function(x) {
  count1 <<- count1 + 1L
  switch(
    count1,
    c(0, 10,20,30,40),
    c(0, 400,800,1200,1600),
    c(0, 60,120,180),
    c(0, 200,400,600,800)
  )
}

df.compute %>%
  bind_rows(df.communication) %>%
  ggplot(aes(x = Rank, y = Time, fill=Value)) +
  geom_bar(stat='identity', width=1) +
  scale_fill_manual(values=c("#303030", "#BEBEBE")) +
  theme_bw() +
  theme(legend.position="top",
        legend.key = element_rect(colour = "grey"),
        legend.key.height = unit(0.5, "line"),
        legend.key.width = unit(4, "line"),
        legend.spacing = unit(100, "line"),
        plot.margin = unit(x = c(0, 0.2, 0, 0), units = "cm"),
        legend.margin=margin(c(0, 0, -8, 0)),
        axis.text.x = element_text(size =16, color = "black"),
        axis.text.y = element_text(size =16, color = "black"),
        axis.title=element_text(size=18), 
        legend.title = element_blank(),
        legend.text = element_text(color = "black", size = 18)) +
        labs(x="Number of MPI Ranks", y="Execution Time in Seconds") +
        facet_wrap(facets= ~ App, scales="free", nrow=1) +
        scale_x_continuous(breaks = breaks_fun, limits = c(0, NA)) +
        #scale_y_continuous(breaks = breaks_fun2, limits = c(0, NA)) +
        theme(strip.text.x=element_text(size=18),
        strip.background=element_rect(fill='#F5F5F5'))
#+end_src

#+RESULTS:
[[file:R/PLOTS/CG.charac.png]]

***** LU-Charac
#+begin_src R :results output graphics :file R/PLOTS/LU.charac.png :exports both :width 800 :height 400 :session *R* 
df.charac <- rbind(df.lu.eth, df.lu.ipoib, df.lu.ib)

df.charac %>%
  filter(Value != "MPI_Finalize") %>%
  group_by(Rank,App) %>%
  summarize(MPI.Time = sum(Duration),
            Full.Time = max(End) - min(Start)) %>%
  mutate(Compute.Time = Full.Time - MPI.Time) %>%
  mutate(Comm.Ratio = MPI.Time / Full.Time * 100) %>%
  arrange(Rank) -> df.timings;
df.timings

df.charac %>%
  group_by(Rank,App) %>%
  summarize(Time = max(End) - min(Start) - sum(Duration)) %>%
  mutate(Value = "Computing") -> df.compute
df.compute

df.charac %>%
  group_by(Rank,Value,App) %>%
  summarize(Time = sum(Duration)) -> df.communication;

df.communication$Value <- as.character(df.communication$Value)
df.communication$Value [grepl('MPI_*', df.communication$Value)] <- 'MPI'

df.communication %>%
  group_by(Rank, Value,App) %>%
  summarize(Time = sum(Time)) -> df.communication;

count <- 0
breaks_fun <- function(x) {
  count <<- count + 1L
  switch(
    count,
    c(0, 60, 127),
    c(0, 60, 127),
    c(0, 60, 127),
    c(0, 70, 143)
  )
}

count1 <- 0
breaks_fun2 <- function(x) {
  count1 <<- count1 + 1L
  switch(
    count1,
    c(0, 10,20,30,40),
    c(0, 400,800,1200,1600),
    c(0, 60,120,180),
    c(0, 200,400,600,800)
  )
}

df.compute %>%
  bind_rows(df.communication) %>%
  ggplot(aes(x = Rank, y = Time, fill=Value)) +
  geom_bar(stat='identity', width=1) +
  scale_fill_manual(values=c("#303030", "#BEBEBE")) +
  theme_bw() +
  theme(legend.position="top",
        legend.key = element_rect(colour = "grey"),
        legend.key.height = unit(0.5, "line"),
        legend.key.width = unit(4, "line"),
        legend.spacing = unit(100, "line"),
        plot.margin = unit(x = c(0, 0.2, 0, 0), units = "cm"),
        legend.margin=margin(c(0, 0, -8, 0)),
        axis.text.x = element_text(size =16, color = "black"),
        axis.text.y = element_text(size =16, color = "black"),
        axis.title=element_text(size=18), 
        legend.title = element_blank(),
        legend.text = element_text(color = "black", size = 18)) +
        labs(x="Number of MPI Ranks", y="Execution Time in Seconds") +
        facet_wrap(facets= ~ App, scales="free", nrow=1) +
        scale_x_continuous(breaks = breaks_fun, limits = c(0, NA)) +
        #scale_y_continuous(breaks = breaks_fun2, limits = c(0, NA)) +
        theme(strip.text.x=element_text(size=18),
        strip.background=element_rect(fill='#F5F5F5'))
#+end_src

#+RESULTS:
[[file:R/PLOTS/LU.charac.png]]

***** BT-Charac
#+begin_src R :results output graphics :file R/PLOTS/BT.charac.png :exports both :width 800 :height 400 :session *R* 
df.charac <- rbind(df.bt.eth, df.bt.ipoib, df.bt.ib)

df.charac %>%
  filter(Value != "MPI_Finalize") %>%
  group_by(Rank,App) %>%
  summarize(MPI.Time = sum(Duration),
            Full.Time = max(End) - min(Start)) %>%
  mutate(Compute.Time = Full.Time - MPI.Time) %>%
  mutate(Comm.Ratio = MPI.Time / Full.Time * 100) %>%
  arrange(Rank) -> df.timings;
df.timings

df.charac %>%
  group_by(Rank,App) %>%
  summarize(Time = max(End) - min(Start) - sum(Duration)) %>%
  mutate(Value = "Computing") -> df.compute
df.compute

df.charac %>%
  group_by(Rank,Value,App) %>%
  summarize(Time = sum(Duration)) -> df.communication;

df.communication$Value <- as.character(df.communication$Value)
df.communication$Value [grepl('MPI_*', df.communication$Value)] <- 'MPI'

df.communication %>%
  group_by(Rank, Value,App) %>%
  summarize(Time = sum(Time)) -> df.communication;

count <- 0
breaks_fun <- function(x) {
  count <<- count + 1L
  switch(
    count,
    c(0, 60, 127),
    c(0, 60, 127),
    c(0, 60, 127),
    c(0, 70, 143)
  )
}

count1 <- 0
breaks_fun2 <- function(x) {
  count1 <<- count1 + 1L
  switch(
    count1,
    c(0, 10,20,30,40),
    c(0, 400,800,1200,1600),
    c(0, 60,120,180),
    c(0, 200,400,600,800)
  )
}

df.compute %>%
  bind_rows(df.communication) %>%
  ggplot(aes(x = Rank, y = Time, fill=Value)) +
  geom_bar(stat='identity', width=1) +
  scale_fill_manual(values=c("#303030", "#BEBEBE")) +
  theme_bw() +
  theme(legend.position="top",
        legend.key = element_rect(colour = "grey"),
        legend.key.height = unit(0.5, "line"),
        legend.key.width = unit(4, "line"),
        legend.spacing = unit(100, "line"),
        plot.margin = unit(x = c(0, 0.2, 0, 0), units = "cm"),
        legend.margin=margin(c(0, 0, -8, 0)),
        axis.text.x = element_text(size =16, color = "black"),
        axis.text.y = element_text(size =16, color = "black"),
        axis.title=element_text(size=18), 
        legend.title = element_blank(),
        legend.text = element_text(color = "black", size = 18)) +
        labs(x="Number of MPI Ranks", y="Execution Time in Seconds") +
        facet_wrap(facets= ~ App, scales="free", nrow=1) +
        scale_x_continuous(breaks = breaks_fun, limits = c(0, NA)) +
        #scale_y_continuous(breaks = breaks_fun2, limits = c(0, NA)) +
        theme(strip.text.x=element_text(size=18),
        strip.background=element_rect(fill='#F5F5F5'))
#+end_src

#+RESULTS:
[[file:R/PLOTS/BT.charac.png]]

***** MG-Percentage
#+begin_src R :results output graphics :file R/PLOTS/MG.charac.percentage.png :exports both :width 800 :height 400 :session *R* 
options(crayon.enabled=FALSE)
options(scipen = 999)
suppressMessages(library(tidyverse))
df.mg.ib <- read_csv("LOGS/TRACE/charac_mg.ib/charac_mg.ib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "MG.ib") %>%
  select(Rank, everything())
df.mg.ib

df.mg.ib %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.mg.ib

df.mg.ib$Value <- as.character(df.mg.ib$Value)
df.mg.ib$Value [grepl('MPI_*', df.mg.ib$Value)] <- 'MPI'

df.mg.ib %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.mg.ib$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.mg.ib;
df.percent.mg.ib

df.mg.ib$Value <- as.character(df.mg.ib$Value)
df.mg.ib$Value [grepl('MPI', df.mg.ib$Value)] <- 'Computing'

df.mg.ib %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.mg.ib$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.mg.ib

df.mg.ipoib <- read_csv("LOGS/TRACE/charac_mg.ipoib/charac_mg.ipoib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "MG.ipoib") %>%
  select(Rank, everything())
df.mg.ipoib

df.mg.ipoib %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.mg.ipoib

df.mg.ipoib$Value <- as.character(df.mg.ipoib$Value)
df.mg.ipoib$Value [grepl('MPI_*', df.mg.ipoib$Value)] <- 'MPI'

df.mg.ipoib %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.mg.ipoib$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.mg.ipoib;
df.percent.mg.ipoib

df.mg.ipoib$Value <- as.character(df.mg.ipoib$Value)
df.mg.ipoib$Value [grepl('MPI', df.mg.ipoib$Value)] <- 'Computing'

df.mg.ipoib %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.mg.ipoib$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.mg.ipoib

df.mg.eth <- read_csv("LOGS/TRACE/charac_mg.eth/charac_mg.eth.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "MG.eth") %>%
  select(Rank, everything())
df.mg.eth

df.mg.eth %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.mg.eth

df.mg.eth$Value <- as.character(df.mg.eth$Value)
df.mg.eth$Value [grepl('MPI_*', df.mg.eth$Value)] <- 'MPI'

df.mg.eth %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.mg.eth$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.mg.eth;
df.percent.mg.eth

df.mg.eth$Value <- as.character(df.mg.eth$Value)
df.mg.eth$Value [grepl('MPI', df.mg.eth$Value)] <- 'Computing'

df.mg.eth %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.mg.eth$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.mg.eth

df <- rbind(df.comp.mg.eth, df.comp.mg.ib, df.comp.mg.ipoib, df.percent.mg.eth, df.percent.mg.ib, df.percent.mg.ipoib)

ggplot(df, aes(x=App, y=Percent, fill=Value)) + 
  geom_bar(position = "fill", stat = "identity", width = 0.3) +
  scale_fill_manual(values=c("#303030", "#BEBEBE")) +
  scale_y_continuous(labels = scales::percent_format()) +
  theme_bw() +
  theme(legend.position = "top",
        legend.key = element_rect(colour = "grey"),
        legend.key.height = unit(0.5, "line"),
        legend.key.width = unit(4, "line"),
        legend.spacing = unit(100, "line"),
        plot.margin = unit(x = c(0, 0.2, 0, 0), units = "cm"),
        legend.margin=margin(c(0, 0, -8, 0)),
        axis.text.x = element_text(size =16, color = "black"),
        axis.text.y = element_text(size =16, color = "black"),
        axis.title=element_text(size=18), 
        legend.title = element_blank(),
        legend.text = element_text(color = "black", size = 18)) +
  labs(x="Applications", y="Operation Percentage")

#+end_src

#+RESULTS:
[[file:R/PLOTS/MG.charac.percentage.png]]

***** CG-Percentage
#+begin_src R :results output graphics :file R/PLOTS/CG.charac.percentage.png :exports both :width 800 :height 400 :session *R* 
options(crayon.enabled=FALSE)
options(scipen = 999)
suppressMessages(library(tidyverse))
df.cg.ib <- read_csv("LOGS/TRACE/charac_cg.ib/charac_cg.ib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "CG.ib") %>%
  select(Rank, everything())
df.cg.ib

df.cg.ib %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.cg.ib

df.cg.ib$Value <- as.character(df.cg.ib$Value)
df.cg.ib$Value [grepl('MPI_*', df.cg.ib$Value)] <- 'MPI'

df.cg.ib %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.cg.ib$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.cg.ib;
df.percent.cg.ib

df.cg.ib$Value <- as.character(df.cg.ib$Value)
df.cg.ib$Value [grepl('MPI', df.cg.ib$Value)] <- 'Computing'

df.cg.ib %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.cg.ib$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.cg.ib

df.cg.ipoib <- read_csv("LOGS/TRACE/charac_cg.ipoib/charac_cg.ipoib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "CG.ipoib") %>%
  select(Rank, everything())
df.cg.ipoib

df.cg.ipoib %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.cg.ipoib

df.cg.ipoib$Value <- as.character(df.cg.ipoib$Value)
df.cg.ipoib$Value [grepl('MPI_*', df.cg.ipoib$Value)] <- 'MPI'

df.cg.ipoib %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.cg.ipoib$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.cg.ipoib;
df.percent.cg.ipoib

df.cg.ipoib$Value <- as.character(df.cg.ipoib$Value)
df.cg.ipoib$Value [grepl('MPI', df.cg.ipoib$Value)] <- 'Computing'

df.cg.ipoib %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.cg.ipoib$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.cg.ipoib

df.cg.eth <- read_csv("LOGS/TRACE/charac_cg.eth/charac_cg.eth.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "CG.eth") %>%
  select(Rank, everything())
df.cg.eth

df.cg.eth %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.cg.eth

df.cg.eth$Value <- as.character(df.cg.eth$Value)
df.cg.eth$Value [grepl('MPI_*', df.cg.eth$Value)] <- 'MPI'

df.cg.eth %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.cg.eth$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.cg.eth;
df.percent.cg.eth

df.cg.eth$Value <- as.character(df.cg.eth$Value)
df.cg.eth$Value [grepl('MPI', df.cg.eth$Value)] <- 'Computing'

df.cg.eth %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.cg.eth$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.cg.eth

df <- rbind(df.comp.cg.eth, df.comp.cg.ib, df.comp.cg.ipoib, df.percent.cg.eth, df.percent.cg.ib, df.percent.cg.ipoib)

ggplot(df, aes(x=App, y=Percent, fill=Value)) + 
  geom_bar(position = "fill", stat = "identity", width = 0.3) +
  scale_fill_manual(values=c("#303030", "#BEBEBE")) +
  scale_y_continuous(labels = scales::percent_format()) +
  theme_bw() +
  theme(legend.position = "top",
        legend.key = element_rect(colour = "grey"),
        legend.key.height = unit(0.5, "line"),
        legend.key.width = unit(4, "line"),
        legend.spacing = unit(100, "line"),
        plot.margin = unit(x = c(0, 0.2, 0, 0), units = "cm"),
        legend.margin=margin(c(0, 0, -8, 0)),
        axis.text.x = element_text(size =16, color = "black"),
        axis.text.y = element_text(size =16, color = "black"),
        axis.title=element_text(size=18), 
        legend.title = element_blank(),
        legend.text = element_text(color = "black", size = 18)) +
  labs(x="Applications", y="Operation Percentage")

#+end_src

#+RESULTS:
[[file:R/PLOTS/CG.charac.percentage.png]]

***** LU-Percentage
#+begin_src R :results output graphics :file R/PLOTS/LU.charac.percentage.png :exports both :width 800 :height 400 :session *R* 
options(crayon.enabled=FALSE)
options(scipen = 999)
suppressMessages(library(tidyverse))
df.lu.ib <- read_csv("LOGS/TRACE/charac_lu.ib/charac_lu.ib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "LU.ib") %>%
  select(Rank, everything())
df.lu.ib

df.lu.ib %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.lu.ib

df.lu.ib$Value <- as.character(df.lu.ib$Value)
df.lu.ib$Value [grepl('MPI_*', df.lu.ib$Value)] <- 'MPI'

df.lu.ib %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.lu.ib$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.lu.ib;
df.percent.lu.ib

df.lu.ib$Value <- as.character(df.lu.ib$Value)
df.lu.ib$Value [grepl('MPI', df.lu.ib$Value)] <- 'Computing'

df.lu.ib %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.lu.ib$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.lu.ib

df.lu.ipoib <- read_csv("LOGS/TRACE/charac_lu.ipoib/charac_lu.ipoib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "LU.ipoib") %>%
  select(Rank, everything())
df.lu.ipoib

df.lu.ipoib %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.lu.ipoib

df.lu.ipoib$Value <- as.character(df.lu.ipoib$Value)
df.lu.ipoib$Value [grepl('MPI_*', df.lu.ipoib$Value)] <- 'MPI'

df.lu.ipoib %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.lu.ipoib$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.lu.ipoib;
df.percent.lu.ipoib

df.lu.ipoib$Value <- as.character(df.lu.ipoib$Value)
df.lu.ipoib$Value [grepl('MPI', df.lu.ipoib$Value)] <- 'Computing'

df.lu.ipoib %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.lu.ipoib$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.lu.ipoib

df.lu.eth <- read_csv("LOGS/TRACE/charac_lu.eth/charac_lu.eth.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "LU.eth") %>%
  select(Rank, everything())
df.lu.eth

df.lu.eth %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.lu.eth

df.lu.eth$Value <- as.character(df.lu.eth$Value)
df.lu.eth$Value [grepl('MPI_*', df.lu.eth$Value)] <- 'MPI'

df.lu.eth %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.lu.eth$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.lu.eth;
df.percent.lu.eth

df.lu.eth$Value <- as.character(df.lu.eth$Value)
df.lu.eth$Value [grepl('MPI', df.lu.eth$Value)] <- 'Computing'

df.lu.eth %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.lu.eth$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.lu.eth

df <- rbind(df.comp.lu.eth, df.comp.lu.ib, df.comp.lu.ipoib, df.percent.lu.eth, df.percent.lu.ib, df.percent.lu.ipoib)

ggplot(df, aes(x=App, y=Percent, fill=Value)) + 
  geom_bar(position = "fill", stat = "identity", width = 0.3) +
  scale_fill_manual(values=c("#303030", "#BEBEBE")) +
  scale_y_continuous(labels = scales::percent_format()) +
  theme_bw() +
  theme(legend.position = "top",
        legend.key = element_rect(colour = "grey"),
        legend.key.height = unit(0.5, "line"),
        legend.key.width = unit(4, "line"),
        legend.spacing = unit(100, "line"),
        plot.margin = unit(x = c(0, 0.2, 0, 0), units = "cm"),
        legend.margin=margin(c(0, 0, -8, 0)),
        axis.text.x = element_text(size =16, color = "black"),
        axis.text.y = element_text(size =16, color = "black"),
        axis.title=element_text(size=18), 
        legend.title = element_blank(),
        legend.text = element_text(color = "black", size = 18)) +
  labs(x="Applications", y="Operation Percentage")

#+end_src

#+RESULTS:
[[file:R/PLOTS/LU.charac.percentage.png]]

***** BT-Percentage
#+begin_src R :results output graphics :file R/PLOTS/BT.charac.percentage.png :exports both :width 800 :height 400 :session *R* 
options(crayon.enabled=FALSE)
options(scipen = 999)
suppressMessages(library(tidyverse))
df.bt.ib <- read_csv("LOGS/TRACE/charac_bt.ib/charac_bt.ib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "BT.ib") %>%
  select(Rank, everything())
df.bt.ib

df.bt.ib %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.bt.ib

df.bt.ib$Value <- as.character(df.bt.ib$Value)
df.bt.ib$Value [grepl('MPI_*', df.bt.ib$Value)] <- 'MPI'

df.bt.ib %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.bt.ib$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.bt.ib;
df.percent.bt.ib

df.bt.ib$Value <- as.character(df.bt.ib$Value)
df.bt.ib$Value [grepl('MPI', df.bt.ib$Value)] <- 'Computing'

df.bt.ib %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.bt.ib$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.bt.ib

df.bt.ipoib <- read_csv("LOGS/TRACE/charac_bt.ipoib/charac_bt.ipoib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "BT.ipoib") %>%
  select(Rank, everything())
df.bt.ipoib

df.bt.ipoib %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.bt.ipoib

df.bt.ipoib$Value <- as.character(df.bt.ipoib$Value)
df.bt.ipoib$Value [grepl('MPI_*', df.bt.ipoib$Value)] <- 'MPI'

df.bt.ipoib %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.bt.ipoib$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.bt.ipoib;
df.percent.bt.ipoib

df.bt.ipoib$Vabte <- as.character(df.bt.ipoib$Value)
df.bt.ipoib$Value [grepl('MPI', df.bt.ipoib$Value)] <- 'Computing'

df.bt.ipoib %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.bt.ipoib$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.bt.ipoib

df.bt.eth <- read_csv("LOGS/TRACE/charac_bt.eth/charac_bt.eth.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "BT.eth") %>%
  select(Rank, everything())
df.bt.eth

df.bt.eth %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.bt.eth

df.bt.eth$Value <- as.character(df.bt.eth$Value)
df.bt.eth$Value [grepl('MPI_*', df.bt.eth$Value)] <- 'MPI'

df.bt.eth %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.bt.eth$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.bt.eth;
df.percent.bt.eth

df.bt.eth$Value <- as.character(df.bt.eth$Value)
df.bt.eth$Value [grepl('MPI', df.bt.eth$Value)] <- 'Computing'

df.bt.eth %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.bt.eth$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.bt.eth

df <- rbind(df.comp.bt.eth, df.comp.bt.ib, df.comp.bt.ipoib, df.percent.bt.eth, df.percent.bt.ib, df.percent.bt.ipoib)

ggplot(df, aes(x=App, y=Percent, fill=Value)) + 
  geom_bar(position = "fill", stat = "identity", width = 0.3) +
  scale_fill_manual(values=c("#303030", "#BEBEBE")) +
  scale_y_continuous(labels = scales::percent_format()) +
  theme_bw() +
  theme(legend.position = "top",
        legend.key = element_rect(colour = "grey"),
        legend.key.height = unit(0.5, "line"),
        legend.key.width = unit(4, "line"),
        legend.spacing = unit(100, "line"),
        plot.margin = unit(x = c(0, 0.2, 0, 0), units = "cm"),
        legend.margin=margin(c(0, 0, -8, 0)),
        axis.text.x = element_text(size =16, color = "black"),
        axis.text.y = element_text(size =16, color = "black"),
        axis.title=element_text(size=18), 
        legend.title = element_blank(),
        legend.text = element_text(color = "black", size = 18)) +
  labs(x="Applications", y="Operation Percentage")

#+end_src

#+RESULTS:
[[file:R/PLOTS/BT.charac.percentage.png]]
*d CSVs
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled=FALSE)
suppressMessages(library(tidyverse))
df.imb.CPU.eth <- read_csv("LOGS/TRACE/charac_imb_CPU.eth/charac_imb_CPU.eth.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "ImbBench-CPU.eth") %>%
  select(Rank, everything())
df.imb.CPU.eth

df.imb.mem.eth <- read_csv("LOGS/TRACE/charac_imb_memory.eth/charac_imb_memory.eth.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "ImbBench-Memory.eth") %>%
  select(Rank, everything())
df.imb.mem.eth

df.alya.eth <- read_csv("LOGS/TRACE/charac_alya.eth/charac_alya.eth.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "Alya.eth") %>%
  select(Rank, everything())
df.alya.eth

df.imb.CPU.ipoib <- read_csv("LOGS/TRACE/charac_imb_CPU.ipoib/charac_imb_CPU.ipoib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "ImbBench-CPU.ipoib") %>%
  select(Rank, everything())
df.imb.CPU.ipoib

df.imb.mem.ipoib <- read_csv("LOGS/TRACE/charac_imb_memory.ipoib/charac_imb_memory.ipoib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "ImbBench-Memory.ipoib") %>%
  select(Rank, everything())
df.imb.mem.ipoib

df.alya.ipoib <- read_csv("LOGS/TRACE/charac_alya.ipoib/charac_alya.ipoib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "Alya.ipoib") %>%
  select(Rank, everything())
df.alya.ipoib


df.imb.CPU.ib <- read_csv("LOGS/TRACE/charac_imb_CPU.ib/charac_imb_CPU.ib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "ImbBench-CPU.ib") %>%
  select(Rank, everything())
df.imb.CPU.ib

df.imb.mem.ib <- read_csv("LOGS/TRACE/charac_imb_memory.ib/charac_imb_memory.ib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "ImbBench-Memory.ib") %>%
  select(Rank, everything())
df.imb.mem.ib

df.alya.ib <- read_csv("LOGS/TRACE/charac_alya.ib/charac_alya.ib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "Alya.ib") %>%
  select(Rank, everything())
df.alya.ib

#+end_src

#+RESULTS:
#+begin_example

Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character(),
  X3 = col_character(),
  X4 = col_double(),
  X5 = col_double(),
  X6 = col_double(),
  X7 = col_double(),
  X8 = col_character()
)

# A tibble: 640 x 6
    Rank Start   End Duration Value         App             
   <
<
<
   <
<
        <
          
 1   159  1.04  1.96 0.924    MPI_Init      ImbBench-CPU.eth
 2   159  1.96  1.96 0.000001 MPI_Comm_size ImbBench-CPU.eth
 3   159  1.96  1.96 0.000001 MPI_Comm_rank ImbBench-CPU.eth
 4   159 11.9  12.6  0.691    MPI_Finalize  ImbBench-CPU.eth
 5   158  1.04  1.96 0.923    MPI_Init      ImbBench-CPU.eth
 6   158  1.96  1.96 0.000001 MPI_Comm_size ImbBench-CPU.eth
 7   158  1.96  1.96 0        MPI_Comm_rank ImbBench-CPU.eth
 8   158 11.1  12.6  1.46     MPI_Finalize  ImbBench-CPU.eth
 9   157  1.06  1.96 0.908    MPI_Init      ImbBench-CPU.eth
10   157  1.96  1.96 0.000001 MPI_Comm_size ImbBench-CPU.eth
# … with 630 more rows

Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character(),
  X3 = col_character(),
  X4 = col_double(),
  X5 = col_double(),
  X6 = col_double(),
  X7 = col_double(),
  X8 = col_character()
)

# A tibble: 640 x 6
    Rank  Start   End  Duration Value         App                
   <
 <
<
    <
<
        <
             
 1   159  0.915  1.80  0.888    MPI_Init      ImbBench-Memory.eth
 2   159  1.80   1.80  0.000001 MPI_Comm_size ImbBench-Memory.eth
 3   159  1.80   1.80  0        MPI_Comm_rank ImbBench-Memory.eth
 4   159 87.1   94.2   7.10     MPI_Finalize  ImbBench-Memory.eth
 5   158  0.910  1.80  0.893    MPI_Init      ImbBench-Memory.eth
 6   158  1.80   1.80  0.000001 MPI_Comm_size ImbBench-Memory.eth
 7   158  1.80   1.80  0        MPI_Comm_rank ImbBench-Memory.eth
 8   158 72.6   94.2  21.6      MPI_Finalize  ImbBench-Memory.eth
 9   157  0.913  1.80  0.889    MPI_Init      ImbBench-Memory.eth
10   157  1.80   1.80  0.000001 MPI_Comm_size ImbBench-Memory.eth
# … with 630 more rows

Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character(),
  X3 = col_character(),
  X4 = col_double(),
  X5 = col_double(),
  X6 = col_double(),
  X7 = col_double(),
  X8 = col_character()
)

# A tibble: 24,550,772 x 6
    Rank Start   End Duration Value         App     
   <
<
<
   <
<
        <
  
 1   159  1.61  2.52 0.913    MPI_Init      Alya.eth
 2   159  2.52  2.52 0.000001 MPI_Comm_size Alya.eth
 3   159  2.52  2.52 0        MPI_Comm_rank Alya.eth
 4   159  2.52  2.52 0.000029 MPI_Gather    Alya.eth
 5   159  2.52  2.52 0.000933 MPI_Bcast     Alya.eth
 6   159  2.52  2.52 0.000216 MPI_Scatter   Alya.eth
 7   159  2.52  2.52 0        MPI_Comm_size Alya.eth
 8   159  2.52  2.52 0        MPI_Comm_rank Alya.eth
 9   159  2.52  2.52 0.00002  MPI_Gather    Alya.eth
10   159  2.52  2.52 0.00073  MPI_Bcast     Alya.eth
# … with 24,550,762 more rows

Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character(),
  X3 = col_character(),
  X4 = col_double(),
  X5 = col_double(),
  X6 = col_double(),
  X7 = col_double(),
  X8 = col_character()
)

# A tibble: 640 x 6
    Rank  Start   End Duration Value         App               
   <
 <
<
   <
<
        <
            
 1   159  0.983  1.84 0.852    MPI_Init      ImbBench-CPU.ipoib
 2   159  1.84   1.84 0.000001 MPI_Comm_size ImbBench-CPU.ipoib
 3   159  1.84   1.84 0        MPI_Comm_rank ImbBench-CPU.ipoib
 4   159 12.1   12.7  0.605    MPI_Finalize  ImbBench-CPU.ipoib
 5   158  0.991  1.84 0.844    MPI_Init      ImbBench-CPU.ipoib
 6   158  1.84   1.84 0.000001 MPI_Comm_size ImbBench-CPU.ipoib
 7   158  1.84   1.84 0        MPI_Comm_rank ImbBench-CPU.ipoib
 8   158 10.9   12.7  1.80     MPI_Finalize  ImbBench-CPU.ipoib
 9   157  0.979  1.84 0.856    MPI_Init      ImbBench-CPU.ipoib
10   157  1.84   1.84 0        MPI_Comm_size ImbBench-CPU.ipoib
# … with 630 more rows

Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character(),
  X3 = col_character(),
  X4 = col_double(),
  X5 = col_double(),
  X6 = col_double(),
  X7 = col_double(),
  X8 = col_character()
)

# A tibble: 640 x 6
    Rank Start    End  Duration Value         App                  
   <
<
 <
    <
<
        <
               
 1   159  1.03   2.87  1.84     MPI_Init      ImbBench-Memory.ipoib
 2   159  2.87   2.87  0.000002 MPI_Comm_size ImbBench-Memory.ipoib
 3   159  2.87   2.87  0        MPI_Comm_rank ImbBench-Memory.ipoib
 4   159 88.2  102.   13.5      MPI_Finalize  ImbBench-Memory.ipoib
 5   158  1.03   2.87  1.84     MPI_Init      ImbBench-Memory.ipoib
 6   158  2.87   2.87  0.000002 MPI_Comm_size ImbBench-Memory.ipoib
 7   158  2.87   2.87  0        MPI_Comm_rank ImbBench-Memory.ipoib
 8   158 73.4  102.   28.3      MPI_Finalize  ImbBench-Memory.ipoib
 9   157  1.03   2.87  1.84     MPI_Init      ImbBench-Memory.ipoib
10   157  2.87   2.87  0.000006 MPI_Comm_size ImbBench-Memory.ipoib
# … with 630 more rows

Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character(),
  X3 = col_character(),
  X4 = col_double(),
  X5 = col_double(),
  X6 = col_double(),
  X7 = col_double(),
  X8 = col_character()
)

# A tibble: 24,550,772 x 6
    Rank  Start   End Duration Value         App       
   <
 <
<
   <
<
        <
    
 1   159 0.0263  3.88 3.85     MPI_Init      Alya.ipoib
 2   159 3.88    3.88 0.000007 MPI_Comm_size Alya.ipoib
 3   159 3.88    3.88 0        MPI_Comm_rank Alya.ipoib
 4   159 3.88    3.88 0.000052 MPI_Gather    Alya.ipoib
 5   159 3.88    3.88 0.000765 MPI_Bcast     Alya.ipoib
 6   159 3.88    3.88 0.000183 MPI_Scatter   Alya.ipoib
 7   159 3.88    3.88 0.000001 MPI_Comm_size Alya.ipoib
 8   159 3.88    3.88 0        MPI_Comm_rank Alya.ipoib
 9   159 3.88    3.88 0.00002  MPI_Gather    Alya.ipoib
10   159 3.88    3.88 0.000675 MPI_Bcast     Alya.ipoib
# … with 24,550,762 more rows

Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character(),
  X3 = col_character(),
  X4 = col_double(),
  X5 = col_double(),
  X6 = col_double(),
  X7 = col_double(),
  X8 = col_character()
)

# A tibble: 640 x 6
    Rank  Start   End Duration Value         App            
   <
 <
<
   <
<
        <
         
 1   159  0.947  8.88 7.93     MPI_Init      ImbBench-CPU.ib
 2   159  8.88   8.88 0.000003 MPI_Comm_size ImbBench-CPU.ib
 3   159  8.88   8.88 0        MPI_Comm_rank ImbBench-CPU.ib
 4   159 18.2   19.1  0.823    MPI_Finalize  ImbBench-CPU.ib
 5   158  0.949  8.88 7.93     MPI_Init      ImbBench-CPU.ib
 6   158  8.88   8.88 0.000007 MPI_Comm_size ImbBench-CPU.ib
 7   158  8.88   8.88 0        MPI_Comm_rank ImbBench-CPU.ib
 8   158 18.0   19.1  1.06     MPI_Finalize  ImbBench-CPU.ib
 9   157  0.954  8.88 7.93     MPI_Init      ImbBench-CPU.ib
10   157  8.88   8.88 0.000004 MPI_Comm_size ImbBench-CPU.ib
# … with 630 more rows

Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character(),
  X3 = col_character(),
  X4 = col_double(),
  X5 = col_double(),
  X6 = col_double(),
  X7 = col_double(),
  X8 = col_character()
)

# A tibble: 640 x 6
    Rank  Start   End  Duration Value         App               
   <
 <
<
    <
<
        <
            
 1   159  0.352  7.99  7.63     MPI_Init      ImbBench-Memory.ib
 2   159  7.99   7.99  0.000007 MPI_Comm_size ImbBench-Memory.ib
 3   159  7.99   7.99  0        MPI_Comm_rank ImbBench-Memory.ib
 4   159 91.5   94.6   3.15     MPI_Finalize  ImbBench-Memory.ib
 5   158  0.351  7.98  7.63     MPI_Init      ImbBench-Memory.ib
 6   158  7.98   7.98  0.000003 MPI_Comm_size ImbBench-Memory.ib
 7   158  7.98   7.98  0        MPI_Comm_rank ImbBench-Memory.ib
 8   158 76.5   94.6  18.2      MPI_Finalize  ImbBench-Memory.ib
 9   157  0.340  7.98  7.65     MPI_Init      ImbBench-Memory.ib
10   157  7.98   7.98  0.00001  MPI_Comm_size ImbBench-Memory.ib
# … with 630 more rows

Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_character(),
  X3 = col_character(),
  X4 = col_double(),
  X5 = col_double(),
  X6 = col_double(),
  X7 = col_double(),
  X8 = col_character()
)

# A tibble: 24,550,772 x 6
    Rank Start   End Duration Value         App    
   <
<
<
   <
<
        <
 
 1   159  2.30  10.6 8.27     MPI_Init      Alya.ib
 2   159 10.6   10.6 0.000004 MPI_Comm_size Alya.ib
 3   159 10.6   10.6 0        MPI_Comm_rank Alya.ib
 4   159 10.6   10.6 0.000018 MPI_Gather    Alya.ib
 5   159 10.6   10.6 0.0318   MPI_Bcast     Alya.ib
 6   159 10.6   10.6 0.000065 MPI_Scatter   Alya.ib
 7   159 10.6   10.6 0        MPI_Comm_size Alya.ib
 8   159 10.6   10.6 0        MPI_Comm_rank Alya.ib
 9   159 10.6   10.6 0.000006 MPI_Gather    Alya.ib
10   159 10.6   10.6 0.00793  MPI_Bcast     Alya.ib
# … with 24,550,762 more rows
#+end_example

***** Alya-Charac
#+begin_src R :results output graphics :file R/PLOTS/Alya.charac.png :exports both :width 800 :height 400 :session *R* 
df.charac <- rbind(df.alya.eth, df.alya.ipoib, df.alya.ib)

df.charac %>%
  filter(Value != "MPI_Finalize") %>%
  group_by(Rank,App) %>%
  summarize(MPI.Time = sum(Duration),
            Full.Time = max(End) - min(Start)) %>%
  mutate(Compute.Time = Full.Time - MPI.Time) %>%
  mutate(Comm.Ratio = MPI.Time / Full.Time * 100) %>%
  arrange(Rank) -> df.timings;
df.timings

df.charac %>%
  group_by(Rank,App) %>%
  summarize(Time = max(End) - min(Start) - sum(Duration)) %>%
  mutate(Value = "Computing") -> df.compute
df.compute

df.charac %>%
  group_by(Rank,Value,App) %>%
  summarize(Time = sum(Duration)) -> df.communication;

df.communication$Value <- as.character(df.communication$Value)
df.communication$Value [grepl('MPI_*', df.communication$Value)] <- 'MPI'

df.communication %>%
  group_by(Rank, Value,App) %>%
  summarize(Time = sum(Time)) -> df.communication;

count <- 0
breaks_fun <- function(x) {
  count <<- count + 1L
  switch(
    count,
    c(0, 60, 127),
    c(0, 60, 127),
    c(0, 60, 127),
    c(0, 70, 143)
  )
}

count1 <- 0
breaks_fun2 <- function(x) {
  count1 <<- count1 + 1L
  switch(
    count1,
    c(0, 10,20,30,40),
    c(0, 400,800,1200,1600),
    c(0, 60,120,180),
    c(0, 200,400,600,800)
  )
}

df.compute %>%
  bind_rows(df.communication) %>%
  ggplot(aes(x = Rank, y = Time, fill=Value)) +
  geom_bar(stat='identity', width=1) +
  scale_fill_manual(values=c("#303030", "#BEBEBE")) +
  theme_bw() +
  theme(legend.position="top",
        legend.key = element_rect(colour = "grey"),
        legend.key.height = unit(0.5, "line"),
        legend.key.width = unit(4, "line"),
        legend.spacing = unit(100, "line"),
        plot.margin = unit(x = c(0, 0.2, 0, 0), units = "cm"),
        legend.margin=margin(c(0, 0, -8, 0)),
        axis.text.x = element_text(size =16, color = "black"),
        axis.text.y = element_text(size =16, color = "black"),
        axis.title=element_text(size=18), 
        legend.title = element_blank(),
        legend.text = element_text(color = "black", size = 18)) +
        labs(x="Number of MPI Ranks", y="Execution Time in Seconds") +
        facet_wrap(facets= ~ App, scales="free", nrow=1) +
        scale_x_continuous(breaks = breaks_fun, limits = c(0, NA)) +
        #scale_y_continuous(breaks = breaks_fun2, limits = c(0, NA)) +
        theme(strip.text.x=element_text(size=18),
        strip.background=element_rect(fill='#F5F5F5'))
#+end_src

#+RESULTS:
[[file:R/PLOTS/Alya.charac.png]]
***** IMB-CPU-Charac
#+begin_src R :results output graphics :file R/PLOTS/IMB_CPU.charac.png :exports both :width 800 :height 400 :session *R* 
df.charac <- rbind(df.imb.CPU.eth, df.imb.CPU.ipoib, df.imb.CPU.ib)

df.charac %>%
  filter(Value != "MPI_Finalize") %>%
  group_by(Rank,App) %>%
  summarize(MPI.Time = sum(Duration),
            Full.Time = max(End) - min(Start)) %>%
  mutate(Compute.Time = Full.Time - MPI.Time) %>%
  mutate(Comm.Ratio = MPI.Time / Full.Time * 100) %>%
  arrange(Rank) -> df.timings;
df.timings

df.charac %>%
  group_by(Rank,App) %>%
  summarize(Time = max(End) - min(Start) - sum(Duration)) %>%
  mutate(Value = "Computing") -> df.compute
df.compute

df.charac %>%
  group_by(Rank,Value,App) %>%
  summarize(Time = sum(Duration)) -> df.communication;

df.communication$Value <- as.character(df.communication$Value)
df.communication$Value [grepl('MPI_*', df.communication$Value)] <- 'MPI'

df.communication %>%
  group_by(Rank, Value,App) %>%
  summarize(Time = sum(Time)) -> df.communication;

count <- 0
breaks_fun <- function(x) {
  count <<- count + 1L
  switch(
    count,
    c(0, 60, 127),
    c(0, 60, 127),
    c(0, 60, 127),
    c(0, 70, 143)
  )
}

count1 <- 0
breaks_fun2 <- function(x) {
  count1 <<- count1 + 1L
  switch(
    count1,
    c(0, 10,20,30,40),
    c(0, 400,800,1200,1600),
    c(0, 60,120,180),
    c(0, 200,400,600,800)
  )
}

df.compute %>%
  bind_rows(df.communication) %>%
  ggplot(aes(x = Rank, y = Time, fill=Value)) +
  geom_bar(stat='identity', width=1) +
  scale_fill_manual(values=c("#303030", "#BEBEBE")) +
  theme_bw() +
  theme(legend.position="top",
        legend.key = element_rect(colour = "grey"),
        legend.key.height = unit(0.5, "line"),
        legend.key.width = unit(4, "line"),
        legend.spacing = unit(100, "line"),
        plot.margin = unit(x = c(0, 0.2, 0, 0), units = "cm"),
        legend.margin=margin(c(0, 0, -8, 0)),
        axis.text.x = element_text(size =16, color = "black"),
        axis.text.y = element_text(size =16, color = "black"),
        axis.title=element_text(size=18), 
        legend.title = element_blank(),
        legend.text = element_text(color = "black", size = 18)) +
        labs(x="Number of MPI Ranks", y="Execution Time in Seconds") +
        facet_wrap(facets= ~ App, scales="free", nrow=1) +
        scale_x_continuous(breaks = breaks_fun, limits = c(0, NA)) +
        #scale_y_continuous(breaks = breaks_fun2, limits = c(0, NA)) +
        theme(strip.text.x=element_text(size=18),
        strip.background=element_rect(fill='#F5F5F5'))
#+end_src

#+RESULTS:
[[file:R/PLOTS/IMB_CPU.charac.png]]
***** IMB-Memory-Charac
#+begin_src R :results output graphics :file R/PLOTS/IMB_mem.charac.png :exports both :width 800 :height 400 :session *R* 
df.charac <- rbind(df.imb.mem.eth, df.imb.mem.ipoib, df.imb.mem.ib)

df.charac %>%
  filter(Value != "MPI_Finalize") %>%
  group_by(Rank,App) %>%
  summarize(MPI.Time = sum(Duration),
            Full.Time = max(End) - min(Start)) %>%
  mutate(Compute.Time = Full.Time - MPI.Time) %>%
  mutate(Comm.Ratio = MPI.Time / Full.Time * 100) %>%
  arrange(Rank) -> df.timings;
df.timings

df.charac %>%
  group_by(Rank,App) %>%
  summarize(Time = max(End) - min(Start) - sum(Duration)) %>%
  mutate(Value = "Computing") -> df.compute
df.compute

df.charac %>%
  group_by(Rank,Value,App) %>%
  summarize(Time = sum(Duration)) -> df.communication;

df.communication$Value <- as.character(df.communication$Value)
df.communication$Value [grepl('MPI_*', df.communication$Value)] <- 'MPI'

df.communication %>%
  group_by(Rank, Value,App) %>%
  summarize(Time = sum(Time)) -> df.communication;

count <- 0
breaks_fun <- function(x) {
  count <<- count + 1L
  switch(
    count,
    c(0, 60, 127),
    c(0, 60, 127),
    c(0, 60, 127),
    c(0, 70, 143)
  )
}

count1 <- 0
breaks_fun2 <- function(x) {
  count1 <<- count1 + 1L
  switch(
    count1,
    c(0, 10,20,30,40),
    c(0, 400,800,1200,1600),
    c(0, 60,120,180),
    c(0, 200,400,600,800)
  )
}

df.compute %>%
  bind_rows(df.communication) %>%
  ggplot(aes(x = Rank, y = Time, fill=Value)) +
  geom_bar(stat='identity', width=1) +
  scale_fill_manual(values=c("#303030", "#BEBEBE")) +
  theme_bw() +
  theme(legend.position="top",
        legend.key = element_rect(colour = "grey"),
        legend.key.height = unit(0.5, "line"),
        legend.key.width = unit(4, "line"),
        legend.spacing = unit(100, "line"),
        plot.margin = unit(x = c(0, 0.2, 0, 0), units = "cm"),
        legend.margin=margin(c(0, 0, -8, 0)),
        axis.text.x = element_text(size =16, color = "black"),
        axis.text.y = element_text(size =16, color = "black"),
        axis.title=element_text(size=18), 
        legend.title = element_blank(),
        legend.text = element_text(color = "black", size = 18)) +
        labs(x="Number of MPI Ranks", y="Execution Time in Seconds") +
        facet_wrap(facets= ~ App, scales="free", nrow=1) +
        scale_x_continuous(breaks = breaks_fun, limits = c(0, NA)) +
        #scale_y_continuous(breaks = breaks_fun2, limits = c(0, NA)) +
        theme(strip.text.x=element_text(size=18),
        strip.background=element_rect(fill='#F5F5F5'))
#+end_src

#+RESULTS:
[[file:R/PLOTS/IMB_mem.charac.png]]

***** Alya-Percentage
#+begin_src R :results output graphics :file R/PLOTS/Alya.percentage.png :exports both :width 800 :height 400 :session *R* 
options(crayon.enabled=FALSE)
options(scipen = 999)
suppressMessages(library(tidyverse))
df.alya.ib /<- read_csv("LOGS/TRACE/charac_alya.ib/charac_alya.ib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "Alya.ib") %>%
  select(Rank, everything())
df.alya.ib

df.alya.ib %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.alya.ib

df.alya.ib$Value <- as.character(df.alya.ib$Value)
df.alya.ib$Value [grepl('MPI_*', df.alya.ib$Value)] <- 'MPI'

df.alya.ib %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.alya.ib$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.alya.ib;
df.percent.alya.ib

df.alya.ib$Value <- as.character(df.alya.ib$Value)
df.alya.ib$Value [grepl('MPI', df.alya.ib$Value)] <- 'Computing'

df.alya.ib %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.alya.ib$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.alya.ib

df.alya.ipoib <- read_csv("LOGS/TRACE/charac_alya.ipoib/charac_alya.ipoib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "Alya.ipoib") %>%
  select(Rank, everything())
df.alya.ipoib

df.alya.ipoib %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.alya.ipoib

df.alya.ipoib$Value <- as.character(df.alya.ipoib$Value)
df.alya.ipoib$Value [grepl('MPI_*', df.alya.ipoib$Value)] <- 'MPI'

df.alya.ipoib %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.alya.ipoib$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.alya.ipoib;
df.percent.alya.ipoib

df.alya.ipoib$Value <- as.character(df.alya.ipoib$Value)
df.alya.ipoib$Value [grepl('MPI', df.alya.ipoib$Value)] <- 'Computing'

df.alya.ipoib %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.alya.ipoib$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.alya.ipoib

df.alya.eth <- read_csv("LOGS/TRACE/charac_alya.eth/charac_alya.eth.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "Alya.eth") %>%
  select(Rank, everything())
df.alya.eth

df.alya.eth %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.alya.eth

df.alya.eth$Value <- as.character(df.alya.eth$Value)
df.alya.eth$Value [grepl('MPI_*', df.alya.eth$Value)] <- 'MPI'

df.alya.eth %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.alya.eth$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.alya.eth;
df.percent.alya.eth

df.alya.eth$Value <- as.character(df.alya.eth$Value)
df.alya.eth$Value [grepl('MPI', df.alya.eth$Value)] <- 'Computing'

df.alya.eth %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.alya.eth$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.alya.eth

df <- rbind(df.comp.alya.eth, df.comp.alya.ib, df.comp.alya.ipoib, df.percent.alya.eth, df.percent.alya.ib, df.percent.alya.ipoib)

ggplot(df, aes(x=App, y=Percent, fill=Value)) + 
  geom_bar(position = "fill", stat = "identity", width = 0.3) +
  scale_fill_manual(values=c("#303030", "#BEBEBE")) +
  scale_y_continuous(labels = scales::percent_format()) +
  theme_bw() +
  theme(legend.position = "top",
        legend.key = element_rect(colour = "grey"),
        legend.key.height = unit(0.5, "line"),
        legend.key.width = unit(4, "line"),
        legend.spacing = unit(100, "line"),
        plot.margin = unit(x = c(0, 0.2, 0, 0), units = "cm"),
        legend.margin=margin(c(0, 0, -8, 0)),
        axis.text.x = element_text(size =16, color = "black"),
        axis.text.y = element_text(size =16, color = "black"),
        axis.title=element_text(size=18), 
        legend.title = element_blank(),
        legend.text = element_text(color = "black", size = 18)) +
  labs(x="Applications", y="Operation Percentage")

#+end_src

#+RESULTS:
[[file:R/PLOTS/Alya.percentage.png]]

***** IMB-CPU-Percentage
#+begin_src R :results output graphics :file R/PLOTS/imb_CPU.percentage.png :exports both :width 800 :height 400 :session *R* 
options(crayon.enabled=FALSE)
options(scipen = 999)
suppressMessages(library(tidyverse))
df.imb_CPU.ib <- read_csv("LOGS/TRACE/charac_imb_CPU.ib/charac_imb_CPU.ib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "IMB_CPU.ib") %>%
  select(Rank, everything())
df.imb_CPU.ib

df.imb_CPU.ib %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.imb_CPU.ib

df.imb_CPU.ib$Value <- as.character(df.imb_CPU.ib$Value)
df.imb_CPU.ib$Value [grepl('MPI_*', df.imb_CPU.ib$Value)] <- 'MPI'

df.imb_CPU.ib %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.imb_CPU.ib$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.imb_CPU.ib;
df.percent.imb_CPU.ib

df.imb_CPU.ib$Value <- as.character(df.imb_CPU.ib$Value)
df.imb_CPU.ib$Value [grepl('MPI', df.imb_CPU.ib$Value)] <- 'Computing'

df.imb_CPU.ib %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.imb_CPU.ib$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.imb_CPU.ib

df.imb_CPU.ipoib <- read_csv("LOGS/TRACE/charac_imb_CPU.ipoib/charac_imb_CPU.ipoib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "IMB_CPU.ipoib") %>%
  select(Rank, everything())
df.imb_CPU.ipoib

df.imb_CPU.ipoib %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.imb_CPU.ipoib

df.imb_CPU.ipoib$Value <- as.character(df.imb_CPU.ipoib$Value)
df.imb_CPU.ipoib$Value [grepl('MPI_*', df.imb_CPU.ipoib$Value)] <- 'MPI'

df.imb_CPU.ipoib %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.imb_CPU.ipoib$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.imb_CPU.ipoib;
df.percent.imb_CPU.ipoib

df.imb_CPU.ipoib$Value <- as.character(df.imb_CPU.ipoib$Value)
df.imb_CPU.ipoib$Value [grepl('MPI', df.imb_CPU.ipoib$Value)] <- 'Computing'

df.imb_CPU.ipoib %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.imb_CPU.ipoib$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.imb_CPU.ipoib

df.imb_CPU.eth <- read_csv("LOGS/TRACE/charac_imb_CPU.eth/charac_imb_CPU.eth.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "IMB_CPU.eth") %>%
  select(Rank, everything())
df.imb_CPU.eth

df.imb_CPU.eth %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.imb_CPU.eth

df.imb_CPU.eth$Value <- as.character(df.imb_CPU.eth$Value)
df.imb_CPU.eth$Value [grepl('MPI_*', df.imb_CPU.eth$Value)] <- 'MPI'

df.imb_CPU.eth %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.imb_CPU.eth$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.imb_CPU.eth;
df.percent.imb_CPU.eth

df.imb_CPU.eth$Value <- as.character(df.imb_CPU.eth$Value)
df.imb_CPU.eth$Value [grepl('MPI', df.imb_CPU.eth$Value)] <- 'Computing'

df.imb_CPU.eth %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.imb_CPU.eth$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.imb_CPU.eth

df <- rbind(df.comp.imb_CPU.eth, df.comp.imb_CPU.ib, df.comp.imb_CPU.ipoib, df.percent.imb_CPU.eth, df.percent.imb_CPU.ib, df.percent.imb_CPU.ipoib)

ggplot(df, aes(x=App, y=Percent, fill=Value)) + 
  geom_bar(position = "fill", stat = "identity", width = 0.3) +
  scale_fill_manual(values=c("#303030", "#BEBEBE")) +
  scale_y_continuous(labels = scales::percent_format()) +
  theme_bw() +
  theme(legend.position = "top",
        legend.key = element_rect(colour = "grey"),
        legend.key.height = unit(0.5, "line"),
        legend.key.width = unit(4, "line"),
        legend.spacing = unit(100, "line"),
        plot.margin = unit(x = c(0, 0.2, 0, 0), units = "cm"),
        legend.margin=margin(c(0, 0, -8, 0)),
        axis.text.x = element_text(size =16, color = "black"),
        axis.text.y = element_text(size =16, color = "black"),
        axis.title=element_text(size=18), 
        legend.title = element_blank(),
        legend.text = element_text(color = "black", size = 18)) +
  labs(x="Applications", y="Operation Percentage")

#+end_src

#+RESULTS:
[[file:R/PLOTS/imb_CPU.percentage.png]]

***** IMB-Memory-Percentage
#+begin_src R :results output graphics :file R/PLOTS/imb_memory.percentage.png :exports both :width 800 :height 400 :session *R* 
options(crayon.enabled=FALSE)
options(scipen = 999)
suppressMessages(library(tidyverse))
df.imb_memory.ib <- read_csv("LOGS/TRACE/charac_imb_memory.ib/charac_imb_memory.ib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "IMB_Memory.ib") %>%
  select(Rank, everything())
df.imb_memory.ib

df.imb_memory.ib %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.imb_memory.ib

df.imb_memory.ib$Value <- as.character(df.imb_memory.ib$Value)
df.imb_memory.ib$Value [grepl('MPI_*', df.imb_memory.ib$Value)] <- 'MPI'

df.imb_memory.ib %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.imb_memory.ib$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.imb_memory.ib;
df.percent.imb_memory.ib

df.imb_memory.ib$Value <- as.character(df.imb_memory.ib$Value)
df.imb_memory.ib$Value [grepl('MPI', df.imb_memory.ib$Value)] <- 'Computing'

df.imb_memory.ib %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.imb_memory.ib$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.imb_memory.ib

df.imb_memory.ipoib <- read_csv("LOGS/TRACE/charac_imb_memory.ipoib/charac_imb_memory.ipoib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "IMB_Memory.ipoib") %>%
  select(Rank, everything())
df.imb_memory.ipoib

df.imb_memory.ipoib %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.imb_memory.ipoib

df.imb_memory.ipoib$Value <- as.character(df.imb_memory.ipoib$Value)
df.imb_memory.ipoib$Value [grepl('MPI_*', df.imb_memory.ipoib$Value)] <- 'MPI'

df.imb_memory.ipoib %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.imb_memory.ipoib$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.imb_memory.ipoib;
df.percent.imb_memory.ipoib

df.imb_memory.ipoib$Value <- as.character(df.imb_memory.ipoib$Value)
df.imb_memory.ipoib$Value [grepl('MPI', df.imb_memory.ipoib$Value)] <- 'Computing'

df.imb_memory.ipoib %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.imb_memory.ipoib$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.imb_memory.ipoib

df.imb_memory.eth <- read_csv("LOGS/TRACE/charac_imb_memory.eth/charac_imb_memory.eth.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "IMB_Memory.eth") %>%
  select(Rank, everything())
df.imb_memory.eth

df.imb_memory.eth %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.imb_memory.eth

df.imb_memory.eth$Value <- as.character(df.imb_memory.eth$Value)
df.imb_memory.eth$Value [grepl('MPI_*', df.imb_memory.eth$Value)] <- 'MPI'

df.imb_memory.eth %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.imb_memory.eth$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.imb_memory.eth;
df.percent.imb_memory.eth

df.imb_memory.eth$Value <- as.character(df.imb_memory.eth$Value)
df.imb_memory.eth$Value [grepl('MPI', df.imb_memory.eth$Value)] <- 'Computing'

df.imb_memory.eth %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.imb_memory.eth$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.imb_memory.eth

df <- rbind(df.comp.imb_memory.eth, df.comp.imb_memory.ib, df.comp.imb_memory.ipoib, df.percent.imb_memory.eth, df.percent.imb_memory.ib, df.percent.imb_memory.ipoib)

ggplot(df, aes(x=App, y=Percent, fill=Value)) + 
  geom_bar(position = "fill", stat = "identity", width = 0.3) +
  scale_fill_manual(values=c("#303030", "#BEBEBE")) +
  scale_y_continuous(labels = scales::percent_format()) +
  theme_bw() +
  theme(legend.position = "top",
        legend.key = element_rect(colour = "grey"),
        legend.key.height = unit(0.5, "line"),
        legend.key.width = unit(4, "line"),
        legend.spacing = unit(100, "line"),
        plot.margin = unit(x = c(0, 0.2, 0, 0), units = "cm"),
        legend.margin=margin(c(0, 0, -8, 0)),
        axis.text.x = element_text(size =16, color = "black"),
        axis.text.y = element_text(size =16, color = "black"),
        axis.title=element_text(size=18), 
        legend.title = element_blank(),
        legend.text = element_text(color = "black", size = 18)) +
  labs(x="Applications", y="Operation Percentage")

#+end_src

#+RESULTS:
[[file:R/PLOTS/imb_memor
*** Slides Plots
**** TOP500
#+begin_src R :results output graphics :file SLIDES/TOP500.png :exports both :width 800 :height 400 :session *R* 
options(crayon.enabled=FALSE)
suppressMessages(library(tidyverse))
df <- read.csv("SLIDES/TOP500.csv")
df$Interface <- factor(df$Interface,
levels=c("Myrinet","Proprietary Networks","Custom Interconnects", "Omni-Path", "InfiniBand", "Gigabit Ethernet"))

ggplot(df, aes(y=N, x=TOP, fill=Interface)) +
  geom_bar(stat="identity", position = "dodge", width = 0.9, colour="black") +
  geom_text(aes(label=N), position=position_dodge(width=0.9), vjust=-0.3,size=6) +
  theme_bw() +
  scale_fill_manual(values=c( "#000000", "#d25e5f", "#7192ca" , "#e0964b", "#84b95b", "#808585")) +
  theme(legend.position = c(0.15, 0.8),
        legend.background = element_rect(color = "black", size = 0.3, linetype = "solid"),
        plot.margin = unit(x = c(0, 0, 0, 0), units = "cm"),
        axis.text.x = element_text(size =16, color = "black"),
        axis.text.y = element_blank(),
        axis.title=element_text(size=18),
        axis.title.x = element_blank(), 
        legend.title = element_blank(),
        legend.text = element_text(color = "black", size = 17.3)) +
        labs(y="Number of Systems") +
ggsave("SLIDES/TOP500.pdf")
#+end_src

#+RESULTS:
[[file:SLIDES/TOP500.png]]
**** Execution Time Plots
***** Read
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled=FALSE)
suppressMessages(library("tidyverse"));
df_intel <- read_csv("LOGS/LOGS_CSV/intel.22-11-2019.16h44m04s.csv", progress=FALSE)
df_apps <- read_csv("LOGS/LOGS_CSV/apps_exec.22-11-2019.16h44m04s.csv", progress=FALSE)%>%
  filter(interface != "ipoib")

df_apps %>%
      group_by(apps,interface) %>%
      summarise(
        average=mean(time),
        std=sd(time),
        ste=3*std/sqrt(n()),
        N=n()) %>%
      arrange(apps,interface) -> df_apps
df_apps

df_intel %>%
  filter(bytes != 0) %>%
  group_by(interface,bytes) %>%
  summarise(
    average=mean(time),
    std=sd(time),
    ste=3*std/sqrt(n()),
    N=n()) %>%
  arrange(interface,bytes) -> df_intel_latency
df_intel_latency

df_intel %>%
  filter(bytes != 0) %>%
  group_by(interface,bytes) %>%
  summarise(
    average=(mean(`mbytes-sec`)/1000),
    std=(sd(`mbytes-sec`)/1000),
    ste=3*std/sqrt(n()),
    N=n()) %>%
  arrange(interface,bytes) -> df_intel_band
df_intel_band

#+end_src

#+RESULTS:
#+begin_example

Parsed with column specification:
cols(
  apps = col_character(),
  interface = col_character(),
  bytes = col_double(),
  time = col_double(),
  `mbytes-sec` = col_double()
)

Parsed with column specification:
cols(
  apps = col_character(),
  interface = col_character(),
  time = col_double()
)

# A tibble: 22 x 6
# Groups:   apps [11]
   apps      interface average   std   ste     N
   <
    <
      <
<
<
<int>
 1 exec_alya eth         297.  1.77  0.968    30
 2 exec_alya ib          254.  2.79  1.53     30
 3 exec_bt   eth         505.  1.54  0.842    30
 4 exec_bt   ib          380.  4.17  2.28     30
 5 exec_cg   eth         761.  8.24  4.51     30
 6 exec_cg   ib          183.  1.01  0.551    30
 7 exec_ep   eth          37.4 0.422 0.231    30
 8 exec_ep   ib           37.3 0.239 0.131    30
 9 exec_ft   eth        1581.  2.72  1.49     30
10 exec_ft   ib          145.  6.26  3.43     30
# … with 12 more rows

# A tibble: 69 x 6
# Groups:   interface [3]
   interface bytes average   std   ste     N
   <
    <
  <
<
<
<int>
 1 eth           1    6.42 0.456 0.250    30
 2 eth           2    6.28 0.470 0.257    30
 3 eth           4    6.18 0.472 0.258    30
 4 eth           8    6.07 0.381 0.209    30
 5 eth          16    6.02 0.338 0.185    30
 6 eth          32    5.98 0.301 0.165    30
 7 eth          64    5.98 0.280 0.153    30
 8 eth         128    5.99 0.272 0.149    30
 9 eth         256    5.99 0.247 0.136    30
10 eth         512    6.02 0.218 0.119    30
# … with 59 more rows

# A tibble: 69 x 6
# Groups:   interface [3]
   interface bytes  average       std        ste     N
   <
    <
   <
    <
     <
<int>
 1 eth           1 0.000157 0.0000106 0.00000578    30
 2 eth           2 0.000320 0.0000230 0.0000126     30
 3 eth           4 0.000651 0.0000487 0.0000267     30
 4 eth           8 0.00132  0.0000821 0.0000450     30
 5 eth          16 0.00267  0.000147  0.0000803     30
 6 eth          32 0.00536  0.000264  0.000145      30
 7 eth          64 0.0107   0.000488  0.000267      30
 8 eth         128 0.0214   0.000945  0.000518      30
 9 eth         256 0.0428   0.00172   0.000940      30
10 eth         512 0.0852   0.00298   0.00163       30
# … with 59 more rows
#+end_example
***** PingPong - Latency
#+begin_src R :results output graphics :file R/PLOTS/Latency.png :exports both :width 800 :height 350 :session *R* 
ggplot(df_intel_latency[df_intel_latency$interface %in% c("ib", "eth"), ],aes(x=bytes, y=average)) +
  geom_line(aes(color = interface), alpha = 1) +
  geom_point(aes(color=interface, shape=interface),size = 4) +
  scale_shape_manual(values = c(15, 17),
                     breaks=c("eth", "ib"),
                     labels=c("GbE", "IB FDR")) +
  geom_errorbar(aes(ymin=average-ste, ymax=average+ste, color=interface, group=interface), width = .2) +
  theme_bw() +
  scale_y_log10(breaks=c(1,4,16,64,256,1024)) +
  scale_x_log10(breaks=c(1,4,16,64,256,1024,4096,16384,65536,262144,1048576,4194304)) +
  ylab(expression(paste("Average Latency Time (",mu,"s)"))) +
  xlab('Message Size (Bytes)') +
  scale_color_manual(values=c( "#BEBEBE", "#303030"),
                     breaks=c("eth", "ib"),
                     labels=c("GbE", "IB FDR")) +
  theme (legend.position = c(0.1, 0.85),
         legend.background = element_rect(color = "black", size = 0.5, linetype = "solid"),
         plot.margin = unit(x = c(0.2, 0, 0, 0), units = "cm"),
         axis.title=element_text(size=18), 
         legend.title = element_blank(),
         legend.text = element_text(color = "black", size = 18),
         axis.text.x = element_text(size =16, color = "black"),
         axis.text.y = element_text(size =16, color = "black")) 
ggsave("SLIDES/img/Latency.pdf")
#+end_src

#+RESULTS:
[[file:R/PLOTS/Latency.png]]

***** PingPong - Bandwidth
#+begin_src R :results output graphics :file R/PLOTS/Bandwidth.png :exports both :width 800 :height 350 :session *R* 
ggplot(df_intel_band[df_intel_band$interface %in% c("ib", "eth"), ],aes(x=bytes, y=average)) +
  geom_line(aes(col = interface), alpha = 1) +
  geom_point(aes(col = interface, shape=interface), size = 4) +
  scale_shape_manual(values = c(15, 17),
                     breaks=c("eth", "ib"),
                     labels=c("GbE","IB FDR")) +  
  geom_errorbar(aes(ymin=average-ste, ymax=average+ste, color=interface, group=interface), width = .2) +
  theme_bw() +
  scale_y_continuous(breaks=c(0,1,2,3,4,5,6,7,8)) +
  scale_x_log10(breaks=c(1,4,16,64,256,1024,4096,16384,65536,262144,1048576,4194304)) +
  ylab('Average Bandwidth(GB/s)') +
  xlab('Message Size (Bytes)') +
  scale_colour_manual(values=c( "#BEBEBE", "#303030"),
                    breaks=c("eth", "ib"),
                    labels=c("GbE", "IB FDR")) +
  theme (legend.position = c(0.1, 0.85),
         legend.background = element_rect(color = "black", size = 0.3, linetype = "solid"),
          plot.margin = unit(x = c(0.1, 0, 0, 0), units = "cm"),
         axis.title=element_text(size=18), 
         legend.title = element_blank(),
         legend.text = element_text(color = "black", size = 18),
         axis.text.x = element_text(size =16, color = "black"),
         axis.text.y = element_text(size =16, color = "black"))
ggsave("SLIDES/img/Bandwidth.pdf")
#+end_src

#+RESULTS:
[[file:R/PLOTS/Bandwidth.png]]
***** FT-EP-Alya-IMB
#+begin_src R :results output graphics :file  R/PLOTS/FT-EP-Alya-IMB.png :exports both :width 800 :height 400 :session *R* 
try <- c(exec_ft="FT", exec_alya="Alya",  exec_ep="EP", exec_imb_CPU="IMB-CPU")
try2 <- c(exec_ft="128", exec_alya="160",  exec_ep="128", exec_imb_CPU="160")
df_apps$interface <- factor(df_apps$interface,
                            levels=c("eth", "ib"))

count <- 0
breaks_fun <- function(x) {
  count <<- count + 1L
  switch(
    count,
    c(0,100,200,300),
    c(0,10,20,30,37),
    c(0,400,800,1200,1600),
    c(0,3,6,9)
  )
}

ggplot(df_apps[df_apps$apps %in% c("exec_ft", "exec_ep", "exec_alya", "exec_imb_CPU"),], aes(x=apps, y=average, fill=interface)) +
geom_bar(stat="identity", position = "dodge", width = 0.4) +
         geom_errorbar(aes(ymin=average-ste, ymax=average+ste), width=0.2, position = position_dodge(.4)) +
         theme_bw() +
         scale_fill_manual(values=c("#BEBEBE", "#303030") ,
                           breaks=c("eth", "ib"), labels=c("GbE", "IB FDR")) +
         theme(legend.position = "top", 
               legend.key = element_rect(colour = "grey"),
               legend.key.height = unit(0.5, "line"),
               legend.key.width = unit(4, "line"),
               legend.spacing = unit(100, "line"),
               plot.margin = unit(x = c(0, 0, 0, 0), units = "cm"),
               legend.margin=margin(c(0, 0, -8, 0)),
               axis.text.x = element_text(size =16, color = "black"),
               axis.text.y = element_text(size =16, color = "black"),
               axis.title=element_text(size=18), 
               legend.title = element_blank(),
               legend.text = element_text(color = "black", size = 18)) +
         scale_x_discrete(labels=try2) +
         labs(x="MPI Processes Number", y="Execution Time in Seconds") +
         facet_wrap(facets= ~ apps, scales="free", labeller=labeller(apps=try), nrow=1) +
         scale_y_continuous(breaks = breaks_fun, limits = c(0, NA)) + 
         theme(strip.text.x=element_text(size=18),
               strip.background=element_rect(fill='#F5F5F5')) 
ggsave("SLIDES/img/FT-EP-Alya-IMB.pdf")
#+end_src

#+RESULTS:
[[file:R/PLOTS/FT-EP-Alya-IMB.png]]
**** Cost Plots
***** Read CSVs
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled=FALSE)
suppressMessages(library("tidyverse"));
df_apps <- read_csv("LOGS/LOGS_CSV/apps_exec.22-11-2019.16h44m04s.csv", progress=FALSE)%>%
  filter(interface != "ipoib")

  A8_h=0.975
  A8_m=A8_h/60
  A10_h=0.78
  A10_m=(A10_h/60)
  n_instances=4

df_apps %>%
  group_by(apps,interface) %>%
  summarise(
    average_s=mean(time),
    average_m=average_s/60,
    cost= ifelse(interface[1] == "eth", A10_m*average_m*n_instances, A8_m*average_m*n_instances)) %>%
  arrange(apps,interface) -> df_apps

#+end_src

#+RESULTS:
: 
: Parsed with column specification:
: cols(
:   apps = col_character(),
:   interface = col_character(),
:   time = col_double()
: )

**** Characterization Plots
***** FT-Charac
#+begin_src R :results output graphics :file R/PLOTS/FT.charac.png :exports both :width 800 :height 400 :session *R* 
options(crayon.enabled=FALSE)
suppressMessages(library(tidyverse))
df.ft.eth <- read_csv("LOGS/TRACE/charac_ft.eth/charac_ft.eth.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "FT (GbE)") %>%
  select(Rank, everything())
df.ft.eth

df.ft.ib <- read_csv("LOGS/TRACE/charac_ft.ib/charac_ft.ib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "FT (IB FDR)") %>%
  select(Rank, everything())
df.ft.ib

df.charac <- rbind(df.ft.eth, df.ft.ib)

df.charac %>%
  filter(Value != "MPI_Finalize") %>%
  group_by(Rank,App) %>%
  summarize(MPI.Time = sum(Duration),
            Full.Time = max(End) - min(Start)) %>%
  mutate(Compute.Time = Full.Time - MPI.Time) %>%
  mutate(Comm.Ratio = MPI.Time / Full.Time * 100) %>%
  arrange(Rank) -> df.timings;
df.timings

df.charac %>%
  group_by(Rank,App) %>%
  summarize(Time = max(End) - min(Start) - sum(Duration)) %>%
  mutate(Value = "Computing") -> df.compute
df.compute

df.charac %>%
  group_by(Rank,Value,App) %>%
  summarize(Time = sum(Duration)) -> df.communication;

df.communication$Value <- as.character(df.communication$Value)
df.communication$Value [grepl('MPI_*', df.communication$Value)] <- 'MPI'

df.communication %>%
  group_by(Rank, Value,App) %>%
  summarize(Time = sum(Time)) -> df.communication;

count <- 0
breaks_fun <- function(x) {
  count <<- count + 1L
  switch(
    count,
    c(0, 60, 127),
    c(0, 60, 127)
  )
}

count1 <- 0
breaks_fun2 <- function(x) {
  count1 <<- count1 + 1L
  switch(
    count1,
   
    c(0, 400,800,1200,1600),
    c(0, 50,100,150,200)
  )
}

df.compute %>%
  bind_rows(df.communication) %>%
  ggplot(aes(x = Rank, y = Time, fill=Value)) +
  geom_bar(stat='identity', width=1) +
  scale_fill_manual(values=c("#303030", "#BEBEBE")) +
  theme_bw() +
  theme(legend.position="top",
        legend.key = element_rect(colour = "grey"),
        legend.key.height = unit(0.5, "line"),
        legend.key.width = unit(4, "line"),
        legend.spacing = unit(100, "line"),
        plot.margin = unit(x = c(0, 0.2, 0, 0), units = "cm"),
        legend.margin=margin(c(0, 0, -8, 0)),
        axis.text.x = element_text(size =16, color = "black"),
        axis.text.y = element_text(size =16, color = "black"),
        axis.title=element_text(size=18), 
        legend.title = element_blank(),
        legend.text = element_text(color = "black", size = 18)) +
        labs(x="MPI Ranks Number", y="Execution Time in Seconds") +
        facet_wrap(facets= ~ App, scales="free", nrow=1) +
        scale_x_continuous(breaks = breaks_fun, limits = c(0, NA)) +
        scale_y_continuous(breaks = breaks_fun2, limits = c(0, NA)) +
        theme(strip.text.x=element_text(size=18),
        strip.background=element_rect(fill='#F5F5F5'))
ggsave("SLIDES/img/FT.charac.pdf")
#+end_src

#+RESULTS:
[[file:R/PLOTS/FT.charac.png]]

***** Alya-Charac
#+begin_src R :results output graphics :file R/PLOTS/Alya.charac.png :exports both :width 800 :height 400 :session *R* 
options(crayon.enabled=FALSE)
suppressMessages(library(tidyverse))
df.alya.eth <- read_csv("LOGS/TRACE/charac_alya.eth/charac_alya.eth.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "Alya (GbE)") %>%
  select(Rank, everything())
df.alya.eth

df.alya.ib <- read_csv("LOGS/TRACE/charac_alya.ib/charac_alya.ib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "Alya (IB FDR)") %>%
  select(Rank, everything())
df.alya.ib

df.charac <- rbind(df.alya.eth, df.alya.ib)

df.charac %>%
  filter(Value != "MPI_Finalize") %>%
  group_by(Rank,App) %>%
  summarize(MPI.Time = sum(Duration),
            Full.Time = max(End) - min(Start)) %>%
  mutate(Compute.Time = Full.Time - MPI.Time) %>%
  mutate(Comm.Ratio = MPI.Time / Full.Time * 100) %>%
  arrange(Rank) -> df.timings;
df.timings

df.charac %>%
  group_by(Rank,App) %>%
  summarize(Time = max(End) - min(Start) - sum(Duration)) %>%
  mutate(Value = "Computing") -> df.compute
df.compute

df.charac %>%
  group_by(Rank,Value,App) %>%
  summarize(Time = sum(Duration)) -> df.communication;

df.communication$Value <- as.character(df.communication$Value)
df.communication$Value [grepl('MPI_*', df.communication$Value)] <- 'MPI'

df.communication %>%
  group_by(Rank, Value,App) %>%
  summarize(Time = sum(Time)) -> df.communication;

count <- 0
breaks_fun <- function(x) {
  count <<- count + 1L
  switch(
    count,
    c(0, 80, 160),
    c(0, 80, 160)
  )
}

count1 <- 0
breaks_fun2 <- function(x) {
  count1 <<- count1 + 1L
  switch(
    count1,
    c(0, 100,200,300),
    c(0, 50,100,150,200,250)
  )
}

df.compute %>%
  bind_rows(df.communication) %>%
  ggplot(aes(x = Rank, y = Time, fill=Value)) +
  geom_bar(stat='identity', width=1) +
  scale_fill_manual(values=c("#303030", "#BEBEBE")) +
  theme_bw() +
  theme(legend.position="top",
        legend.key = element_rect(colour = "grey"),
        legend.key.height = unit(0.5, "line"),
        legend.key.width = unit(4, "line"),
        legend.spacing = unit(100, "line"),
        plot.margin = unit(x = c(0, 0.2, 0, 0), units = "cm"),
        legend.margin=margin(c(0, 0, -8, 0)),
        axis.text.x = element_text(size =16, color = "black"),
        axis.text.y = element_text(size =16, color = "black"),
        axis.title=element_text(size=18), 
        legend.title = element_blank(),
        legend.text = element_text(color = "black", size = 18)) +
        labs(x="MPI Ranks Number", y="Execution Time in Seconds") +
        facet_wrap(facets= ~ App, scales="free", nrow=1) +
        scale_x_continuous(breaks = breaks_fun, limits = c(0, NA)) +
        scale_y_continuous(breaks = breaks_fun2, limits = c(0, NA)) +
        theme(strip.text.x=element_text(size=18),
        strip.background=element_rect(fill='#F5F5F5'))
ggsave("SLIDES/img/Alya.charac.pdf")
#+end_src

#+RESULTS:
[[file:R/PLOTS/Alya.charac.png]]
***** EP-Charac
#+begin_src R :results output graphics :file R/PLOTS/EP.charac.png :exports both :width 800 :height 400 :session *R* 
options(crayon.enabled=FALSE)
suppressMessages(library(tidyverse))
df.ep.eth <- read_csv("LOGS/TRACE/charac_ep.eth/charac_ep.eth.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "EP (GbE)") %>%
  select(Rank, everything())
df.ep.eth

df.ep.ib <- read_csv("LOGS/TRACE/charac_ep.ib/charac_ep.ib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "EP (IB FDR)") %>%
  select(Rank, everything())
df.ep.ib

df.charac <- rbind(df.ep.eth, df.ep.ib)

df.charac %>%
  filter(Value != "MPI_Finalize") %>%
  group_by(Rank,App) %>%
  summarize(MPI.Time = sum(Duration),
            Full.Time = max(End) - min(Start)) %>%
  mutate(Compute.Time = Full.Time - MPI.Time) %>%
  mutate(Comm.Ratio = MPI.Time / Full.Time * 100) %>%
  arrange(Rank) -> df.timings;
df.timings

df.charac %>%
  group_by(Rank,App) %>%
  summarize(Time = max(End) - min(Start) - sum(Duration)) %>%
  mutate(Value = "Computing") -> df.compute
df.compute

df.charac %>%
  group_by(Rank,Value,App) %>%
  summarize(Time = sum(Duration)) -> df.communication;

df.communication$Value <- as.character(df.communication$Value)
df.communication$Value [grepl('MPI_*', df.communication$Value)] <- 'MPI'

df.communication %>%
  group_by(Rank, Value,App) %>%
  summarize(Time = sum(Time)) -> df.communication;

count <- 0
breaks_fun <- function(x) {
  count <<- count + 1L
  switch(
    count,
    c(0, 60, 127),
    c(0, 60, 127),
    c(0, 60, 127),
    c(0, 70, 143)
  )
}

count1 <- 0
breaks_fun2 <- function(x) {
  count1 <<- count1 + 1L
  switch(
    count1,
    c(0, 10,20,30,40),
    c(0, 400,800,1200,1600),
    c(0, 60,120,180),
    c(0, 200,400,600,800)
  )
}

df.compute %>%
  bind_rows(df.communication) %>%
  ggplot(aes(x = Rank, y = Time, fill=Value)) +
  geom_bar(stat='identity', width=1) +
  scale_fill_manual(values=c("#303030", "#BEBEBE")) +
  theme_bw() +
  theme(legend.position="top",
        legend.key = element_rect(colour = "grey"),
        legend.key.height = unit(0.5, "line"),
        legend.key.width = unit(4, "line"),
        legend.spacing = unit(100, "line"),
        plot.margin = unit(x = c(0, 0.2, 0, 0), units = "cm"),
        legend.margin=margin(c(0, 0, -8, 0)),
        axis.text.x = element_text(size =16, color = "black"),
        axis.text.y = element_text(size =16, color = "black"),
        axis.title=element_text(size=18), 
        legend.title = element_blank(),
        legend.text = element_text(color = "black", size = 18)) +
        labs(x="MPI Ranks Number", y="Execution Time in Seconds") +
        facet_wrap(facets= ~ App, scales="free", nrow=1) +
        scale_x_continuous(breaks = breaks_fun, limits = c(0, NA)) +
        theme(strip.text.x=element_text(size=18),
        strip.background=element_rect(fill='#F5F5F5'))
ggsave("SLIDES/img/EP.charac.pdf")
#+end_src

#+RESULTS:
[[file:R/PLOTS/EP.charac.png]]
***** IMB-CPU-Charac
#+begin_src R :results output graphics :file R/PLOTS/IMB_CPU.charac.png :exports both :width 800 :height 400 :session *R* 
options(crayon.enabled=FALSE)
suppressMessages(library(tidyverse))
df.imb.cpu.eth <- read_csv("LOGS/TRACE/charac_imb_CPU.eth/charac_imb_CPU.eth.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "IMB-CPU (GbE)") %>%
  select(Rank, everything())
df.imb.cpu.eth

df.imb.cpu.ib <- read_csv("LOGS/TRACE/charac_imb_CPU.ib/charac_imb_CPU.ib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "IMB-CPU (IB FDR)") %>%
  select(Rank, everything())
df.imb.cpu.ib

df.charac <- rbind(df.imb.cpu.eth, df.imb.cpu.ib)

df.charac %>%
  filter(Value != "MPI_Finalize") %>%
  group_by(Rank,App) %>%
  summarize(MPI.Time = sum(Duration),
            Full.Time = max(End) - min(Start)) %>%
  mutate(Compute.Time = Full.Time - MPI.Time) %>%
  mutate(Comm.Ratio = MPI.Time / Full.Time * 100) %>%
  arrange(Rank) -> df.timings;
df.timings

df.charac %>%
  group_by(Rank,App) %>%
  summarize(Time = max(End) - min(Start) - sum(Duration)) %>%
  mutate(Value = "Computing") -> df.compute
df.compute

df.charac %>%
  group_by(Rank,Value,App) %>%
  summarize(Time = sum(Duration)) -> df.communication;

df.communication$Value <- as.character(df.communication$Value)
df.communication$Value [grepl('MPI_*', df.communication$Value)] <- 'MPI'

df.communication %>%
  group_by(Rank, Value,App) %>%
  summarize(Time = sum(Time)) -> df.communication;

count <- 0
breaks_fun <- function(x) {
  count <<- count + 1L
  switch(
    count,
    c(0, 80, 160),
    c(0, 80, 160)
  )
}

count1 <- 0
breaks_fun2 <- function(x) {
  count1 <<- count1 + 1L
  switch(
    count1,
    c(0, 10,20,30,40),
    c(0, 400,800,1200,1600),
    c(0, 60,120,180),
    c(0, 200,400,600,800)
  )
}

df.compute %>%
  bind_rows(df.communication) %>%
  ggplot(aes(x = Rank, y = Time, fill=Value)) +
  geom_bar(stat='identity', width=1) +
  scale_fill_manual(values=c("#303030", "#BEBEBE")) +
  theme_bw() +
  theme(legend.position="top",
        legend.key = element_rect(colour = "grey"),
        legend.key.height = unit(0.5, "line"),
        legend.key.width = unit(4, "line"),
        legend.spacing = unit(100, "line"),
        plot.margin = unit(x = c(0, 0.2, 0, 0), units = "cm"),
        legend.margin=margin(c(0, 0, -8, 0)),
        axis.text.x = element_text(size =16, color = "black"),
        axis.text.y = element_text(size =16, color = "black"),
        axis.title=element_text(size=18), 
        legend.title = element_blank(),
        legend.text = element_text(color = "black", size = 18)) +
        labs(x="MPI Ranks Number", y="Execution Time in Seconds") +
        facet_wrap(facets= ~ App, scales="free", nrow=1) +
        scale_x_continuous(breaks = breaks_fun, limits = c(0, NA)) +
        #scale_y_continuous(breaks = breaks_fun2, limits = c(0, NA)) +
        theme(strip.text.x=element_text(size=18),
        strip.background=element_rect(fill='#F5F5F5'))
ggsave("SLIDES/img/IMB-CPU.charac.pdf")
#+end_src

#+RESULTS:
[[file:R/PLOTS/IMB_CPU.charac.png]]

***** FT-Percentage
#+begin_src R :results output graphics :file R/PLOTS/FT.percentage.png :exports both :width 500 :height 400 :session *R* 
options(crayon.enabled=FALSE)
options(scipen = 999)
suppressMessages(library(tidyverse))
df.ft.eth <- read_csv("LOGS/TRACE/charac_ft.eth/charac_ft.eth.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "FT (GbE)") %>%
  select(Rank, everything())
df.ft.eth

df.ft.ib <- read_csv("LOGS/TRACE/charac_ft.ib/charac_ft.ib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "FT (IB FDR)") %>%
  select(Rank, everything())
df.ft.ib

df.ft.ib %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.ft.ib

df.ft.ib$Value <- as.character(df.ft.ib$Value)
df.ft.ib$Value [grepl('MPI_*', df.ft.ib$Value)] <- 'MPI'

df.ft.ib %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.ft.ib$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.ft.ib;
df.percent.ft.ib

df.ft.ib$Value <- as.character(df.ft.ib$Value)
df.ft.ib$Value [grepl('MPI', df.ft.ib$Value)] <- 'Computing'

df.ft.ib %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.ft.ib$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.ft.ib

df.ft.eth %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.ft.eth

df.ft.eth$Value <- as.character(df.ft.eth$Value)
df.ft.eth$Value [grepl('MPI_*', df.ft.eth$Value)] <- 'MPI'

df.ft.eth %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.ft.eth$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.ft.eth;
df.percent.ft.eth

df.ft.eth$Value <- as.character(df.ft.eth$Value)
df.ft.eth$Value [grepl('MPI', df.ft.eth$Value)] <- 'Computing'

df.ft.eth %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.ft.eth$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.ft.eth

df <- rbind(df.comp.ft.eth, df.comp.ft.ib, df.percent.ft.eth, df.percent.ft.ib)

ggplot(df, aes(x=App, y=Percent, fill=Value)) + 
  geom_bar(position = "fill", stat = "identity", width = 0.25) +
  scale_fill_manual(values=c("#303030", "#BEBEBE")) +
  scale_y_continuous(labels = scales::percent_format()) +
  theme_bw() +
  theme(legend.position = "top",
        legend.key = element_rect(colour = "grey"),
        legend.key.height = unit(0.5, "line"),
        legend.key.width = unit(4, "line"),
        legend.spacing = unit(100, "line"),
        plot.margin = unit(x = c(0, 0.2, 0, 0), units = "cm"),
        legend.margin=margin(c(0, 0, -8, 0)),
        axis.text.x = element_text(size =16, color = "black"),
        axis.text.y = element_text(size =16, color = "black"),
        axis.title=element_text(size=18), 
        legend.title = element_blank(),
        legend.text = element_text(color = "black", size = 18)) +
  labs(x="Application/Interconnection", y="Operations Time Percentage")
ggsave("SLIDES/img/FT.percentage.pdf")
#+end_src

#+RESULTS:
[[file:R/PLOTS/FT.percentage.png]]
***** EP-Percentage
#+begin_src R :results output graphics :file R/PLOTS/EP.percentage.png :exports both :width 500 :height 400 :session *R* 
options(crayon.enabled=FALSE)
options(scipen = 999)
suppressMessages(library(tidyverse))
df.ep.eth <- read_csv("LOGS/TRACE/charac_ep.eth/charac_ep.eth.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "EP (GbE)") %>%
  select(Rank, everything())
df.ep.eth

df.ep.ib <- read_csv("LOGS/TRACE/charac_ep.ib/charac_ep.ib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "EP (IB FDR)") %>%
  select(Rank, everything())
df.ep.ib

df.ep.ib %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.ep.ib

df.ep.ib$Value <- as.character(df.ep.ib$Value)
df.ep.ib$Value [grepl('MPI_*', df.ep.ib$Value)] <- 'MPI'

df.ep.ib %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.ep.ib$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.ep.ib;
df.percent.ep.ib

df.ep.ib$Value <- as.character(df.ep.ib$Value)
df.ep.ib$Value [grepl('MPI', df.ep.ib$Value)] <- 'Computing'

df.ep.ib %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.ep.ib$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.ep.ib

df.ep.eth %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.ep.eth

df.ep.eth$Value <- as.character(df.ep.eth$Value)
df.ep.eth$Value [grepl('MPI_*', df.ep.eth$Value)] <- 'MPI'

df.ep.eth %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.ep.eth$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.ep.eth;
df.percent.ep.eth

df.ep.eth$Value <- as.character(df.ep.eth$Value)
df.ep.eth$Value [grepl('MPI', df.ep.eth$Value)] <- 'Computing'

df.ep.eth %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.ep.eth$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.ep.eth

df <- rbind(df.comp.ep.eth, df.comp.ep.ib, df.percent.ep.eth, df.percent.ep.ib)

ggplot(df, aes(x=App, y=Percent, fill=Value)) + 
  geom_bar(position = "fill", stat = "identity", width = 0.25) +
  scale_fill_manual(values=c("#303030", "#BEBEBE")) +
  scale_y_continuous(labels = scales::percent_format()) +
  theme_bw() +
  theme(legend.position = "top",
        legend.key = element_rect(colour = "grey"),
        legend.key.height = unit(0.5, "line"),
        legend.key.width = unit(4, "line"),
        legend.spacing = unit(100, "line"),
        plot.margin = unit(x = c(0, 0.2, 0, 0), units = "cm"),
        legend.margin=margin(c(0, 0, -8, 0)),
        axis.text.x = element_text(size =16, color = "black"),
        axis.text.y = element_text(size =16, color = "black"),
        axis.title=element_text(size=18), 
        legend.title = element_blank(),
        legend.text = element_text(color = "black", size = 18)) +
  labs(x="Application/Interconnection", y="Operations Time Percentage")
ggsave("SLIDES/img/EP.percentage.pdf")


#+end_src

#+RESULTS:
[[file:R/PLOTS/EP.percentage.png]]

***** Alya-Percentage
#+begin_src R :results output graphics :file R/PLOTS/Alya.percentage.png :exports both :width 500 :height 400 :session *R* 
options(crayon.enabled=FALSE)
options(scipen = 999)
suppressMessages(library(tidyverse))
df.alya.eth <- read_csv("LOGS/TRACE/charac_alya.eth/charac_alya.eth.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "Alya (GbE)") %>%
  select(Rank, everything())
df.alya.eth

df.alya.ib <- read_csv("LOGS/TRACE/charac_alya.ib/charac_alya.ib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "Alya (IB FDR)") %>%
  select(Rank, everything())
df.alya.ib

df.alya.ib %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.alya.ib

df.alya.ib$Value <- as.character(df.alya.ib$Value)
df.alya.ib$Value [grepl('MPI_*', df.alya.ib$Value)] <- 'MPI'

df.alya.ib %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.alya.ib$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.alya.ib;
df.percent.alya.ib

df.alya.ib$Value <- as.character(df.alya.ib$Value)
df.alya.ib$Value [grepl('MPI', df.alya.ib$Value)] <- 'Computing'

df.alya.ib %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.alya.ib$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.alya.ib

df.alya.eth %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.alya.eth

df.alya.eth$Value <- as.character(df.alya.eth$Value)
df.alya.eth$Value [grepl('MPI_*', df.alya.eth$Value)] <- 'MPI'

df.alya.eth %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.alya.eth$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.alya.eth;
df.percent.alya.eth

df.alya.eth$Value <- as.character(df.alya.eth$Value)
df.alya.eth$Value [grepl('MPI', df.alya.eth$Value)] <- 'Computing'

df.alya.eth %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.alya.eth$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.alya.eth

df <- rbind(df.comp.alya.eth, df.comp.alya.ib, df.percent.alya.eth, df.percent.alya.ib)

ggplot(df, aes(x=App, y=Percent, fill=Value)) + 
  geom_bar(position = "fill", stat = "identity", width = 0.25) +
  scale_fill_manual(values=c("#303030", "#BEBEBE")) +
  scale_y_continuous(labels = scales::percent_format()) +
  theme_bw() +
  theme(legend.position = "top",
        legend.key = element_rect(colour = "grey"),
        legend.key.height = unit(0.5, "line"),
        legend.key.width = unit(4, "line"),
        legend.spacing = unit(100, "line"),
        plot.margin = unit(x = c(0, 0.2, 0, 0), units = "cm"),
        legend.margin=margin(c(0, 0, -8, 0)),
        axis.text.x = element_text(size =16, color = "black"),
        axis.text.y = element_text(size =16, color = "black"),
        axis.title=element_text(size=18), 
        legend.title = element_blank(),
        legend.text = element_text(color = "black", size = 18)) +
  labs(x="Application/Interconnection", y="Operations Time Percentage")
ggsave("SLIDES/img/Alya.percentage.pdf")

#+end_src

#+RESULTS:
[[file:R/PLOTS/Alya.percentage.png]]

***** IMB-CPU-Percentage
#+begin_src R :results output graphics :file R/PLOTS/imb_CPU.percentage.png :exports both :width 500 :height 400 :session *R* 
options(crayon.enabled=FALSE)
options(scipen = 999)
suppressMessages(library(tidyverse))
df.imb_CPU.eth <- read_csv("LOGS/TRACE/charac_imb_CPU.eth/charac_imb_CPU.eth.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "IMB-CPU (GbE)") %>%
  select(Rank, everything())
df.imb_CPU.eth

df.imb_CPU.ib <- read_csv("LOGS/TRACE/charac_imb_CPU.ib/charac_imb_CPU.ib.csv", col_names = FALSE, progress=FALSE) %>%
  mutate(Rank = gsub("MPI Rank", "", X2)) %>%
  select(-X1, -X2, -X3, -X7) %>%
  rename(Start = X4,
         End = X5,
         Duration = X6,
         Value = X8) %>%
  mutate(Rank = as.integer(Rank)) %>%
  mutate(App = "IMB-CPU (IB FDR)") %>%
  select(Rank, everything())
df.imb_CPU.ib

df.imb_CPU.ib %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.imb_CPU.ib

df.imb_CPU.ib$Value <- as.character(df.imb_CPU.ib$Value)
df.imb_CPU.ib$Value [grepl('MPI_*', df.imb_CPU.ib$Value)] <- 'MPI'

df.imb_CPU.ib %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.imb_CPU.ib$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.imb_CPU.ib;
df.percent.imb_CPU.ib

df.imb_CPU.ib$Value <- as.character(df.imb_CPU.ib$Value)
df.imb_CPU.ib$Value [grepl('MPI', df.imb_CPU.ib$Value)] <- 'Computing'

df.imb_CPU.ib %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.imb_CPU.ib$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.imb_CPU.ib

df.imb_CPU.eth %>%
  group_by(Value,App) %>%
  filter(Value == "MPI_Finalize") %>%
  summarize(Total = sum(End))  -> df.total.imb_CPU.eth

df.imb_CPU.eth$Value <- as.character(df.imb_CPU.eth$Value)
df.imb_CPU.eth$Value [grepl('MPI_*', df.imb_CPU.eth$Value)] <- 'MPI'

df.imb_CPU.eth %>%
  group_by(Value,App) %>%
  summarize(MPI.Time = sum(Duration),
            Total = df.total.imb_CPU.eth$Total,
            Percent=(MPI.Time*100)/Total) -> df.percent.imb_CPU.eth;
df.percent.imb_CPU.eth

df.imb_CPU.eth$Value <- as.character(df.imb_CPU.eth$Value)
df.imb_CPU.eth$Value [grepl('MPI', df.imb_CPU.eth$Value)] <- 'Computing'

df.imb_CPU.eth %>%
  group_by(Value,App) %>%
  summarize(Total = df.total.imb_CPU.eth$Total,
            MPI.Time = Total - sum(Duration),
            Percent=(MPI.Time*100)/Total) -> df.comp.imb_CPU.eth

df <- rbind(df.comp.imb_CPU.eth, df.comp.imb_CPU.ib, df.percent.imb_CPU.eth, df.percent.imb_CPU.ib)

ggplot(df, aes(x=App, y=Percent, fill=Value)) + 
  geom_bar(position = "fill", stat = "identity", width = 0.25) +
  scale_fill_manual(values=c("#303030", "#BEBEBE")) +
  scale_y_continuous(labels = scales::percent_format()) +
  theme_bw() +
  theme(legend.position = "top",
        legend.key = element_rect(colour = "grey"),
        legend.key.height = unit(0.5, "line"),
        legend.key.width = unit(4, "line"),
        legend.spacing = unit(100, "line"),
        plot.margin = unit(x = c(0, 0.2, 0, 0), units = "cm"),
        legend.margin=margin(c(0, 0, -8, 0)),
        axis.text.x = element_text(size =16, color = "black"),
        axis.text.y = element_text(size =16, color = "black"),
        axis.title=element_text(size=18), 
        legend.title = element_blank(),
        legend.text = element_text(color = "black", size = 18)) +
  labs(x="Application/Interconnection", y="Operations Time Percentage")
ggsave("SLIDES/img/IMB_CPU.percentage.pdf")

#+end_src

#+RESULTS:
[[file:R/PLOTS/imb_CPU.percentage.png]]

*** Paper Plots 
**** Read
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled=FALSE)
suppressMessages(library("tidyverse"));
df_intel <- read_csv("LOGS/LOGS_CSV/intel.22-11-2019.16h44m04s.csv", progress=FALSE)
df_apps <- read_csv("LOGS/LOGS_CSV/apps_exec.22-11-2019.16h44m04s.csv", progress=FALSE)%>%
  filter(interface != "ipoib")

df_apps %>%
      group_by(apps,interface) %>%
      summarise(
        average=mean(time),
        std=sd(time),
        ste=3*std/sqrt(n()),
        N=n()) %>%
      arrange(apps,interface) -> df_apps
df_apps

df_intel %>%
  filter(bytes != 0) %>%
  group_by(interface,bytes) %>%
  summarise(
    average=mean(time),
    std=sd(time),
    ste=3*std/sqrt(n()),
    N=n()) %>%
  arrange(interface,bytes) -> df_intel_latency
df_intel_latency

df_intel %>%
  filter(bytes != 0) %>%
  group_by(interface,bytes) %>%
  summarise(
    average=(mean(`mbytes-sec`)/1000),
    std=(sd(`mbytes-sec`)/1000),
    ste=3*std/sqrt(n()),
    N=n()) %>%
  arrange(interface,bytes) -> df_intel_band
df_intel_band

#+end_src

#+RESULTS:
#+begin_example

Parsed with column specification:
cols(
  apps = col_character(),
  interface = col_character(),
  bytes = col_double(),
  time = col_double(),
  `mbytes-sec` = col_double()
)

Parsed with column specification:
cols(
  apps = col_character(),
  interface = col_character(),
  time = col_double()
)

# A tibble: 22 x 6
# Groups:   apps [11]
   apps      interface average   std   ste     N
   <
    <
      <
<
<
<int>
 1 exec_alya eth         297.  1.77  0.968    30
 2 exec_alya ib          254.  2.79  1.53     30
 3 exec_bt   eth         505.  1.54  0.842    30
 4 exec_bt   ib          380.  4.17  2.28     30
 5 exec_cg   eth         761.  8.24  4.51     30
 6 exec_cg   ib          183.  1.01  0.551    30
 7 exec_ep   eth          37.4 0.422 0.231    30
 8 exec_ep   ib           37.3 0.239 0.131    30
 9 exec_ft   eth        1581.  2.72  1.49     30
10 exec_ft   ib          145.  6.26  3.43     30
# … with 12 more rows

# A tibble: 69 x 6
# Groups:   interface [3]
   interface bytes average   std   ste     N
   <
    <
  <
<
<
<int>
 1 eth           1    6.42 0.456 0.250    30
 2 eth           2    6.28 0.470 0.257    30
 3 eth           4    6.18 0.472 0.258    30
 4 eth           8    6.07 0.381 0.209    30
 5 eth          16    6.02 0.338 0.185    30
 6 eth          32    5.98 0.301 0.165    30
 7 eth          64    5.98 0.280 0.153    30
 8 eth         128    5.99 0.272 0.149    30
 9 eth         256    5.99 0.247 0.136    30
10 eth         512    6.02 0.218 0.119    30
# … with 59 more rows

# A tibble: 69 x 6
# Groups:   interface [3]
   interface bytes  average       std        ste     N
   <
    <
   <
    <
     <
<int>
 1 eth           1 0.000157 0.0000106 0.00000578    30
 2 eth           2 0.000320 0.0000230 0.0000126     30
 3 eth           4 0.000651 0.0000487 0.0000267     30
 4 eth           8 0.00132  0.0000821 0.0000450     30
 5 eth          16 0.00267  0.000147  0.0000803     30
 6 eth          32 0.00536  0.000264  0.000145      30
 7 eth          64 0.0107   0.000488  0.000267      30
 8 eth         128 0.0214   0.000945  0.000518      30
 9 eth         256 0.0428   0.00172   0.000940      30
10 eth         512 0.0852   0.00298   0.00163       30
# … with 59 more rows
#+end_example
**** PingPong - Latency
#+begin_src R :results output graphics :file PAPER/img/Latency-paper.pdf :exports both :width 4 :height 4 :session *R* 
library("scales")
ggplot(df_intel_latency[df_intel_latency$interface %in% c("ib", "eth"), ],aes(x=bytes, y=average)) +
  geom_line(aes(color = interface), alpha = 0.5) +
  geom_point(aes(color=interface),size = 1) +
  scale_shape_manual(values = c(15, 17),
                     breaks=c("eth", "ib"),
                     labels=c("GbE", "IB FDR")) +
  geom_errorbar(aes(ymin=average-ste, ymax=average+ste, color=interface, group=interface), width = .25) +
  theme_bw(base_size=12) +
  scale_y_log10(breaks=c(1,4,16,64,256,1024)) +
  scale_x_log10(breaks=c(1,4,16,64,256,1024,4096,16384,65536,262144,1048576,4194304), labels=trans_format("log2", math_format(2^.x))) +
  ylab(expression(paste("Average Latency Time (",mu,"s)"))) +
  xlab('Message Size (Bytes)') +
  scale_color_manual(values=c( "#BEBEBE", "#303030"),
                     breaks=c("eth", "ib"),
                     labels=c("GbE", "IB FDR")) +
  theme_bw(base_size = 13) +
  theme (legend.position = "top",
         legend.spacing = unit(x = c(0, 0, 0, 0), units = 'mm'),
         legend.justification = "left",
         legend.box.spacing = unit(0, "pt"),
         legend.box.margin = margin(0,0,0,0),
         plot.margin = unit(x = c(0, 0, 0, 0), units = "cm"),
         legend.title = element_blank(),
         legend.text = element_text(color = "black"))
#+end_src

#+RESULTS:
[[file:SLIDES/img/Latency-paper.pdf]]

**** PingPong - Bandwidth
#+begin_src R :results output graphics :file PAPER/img/Bandwidth-paper.pdf :exports both :width 4 :height 4 :session *R* 
library("scales")
ggplot(df_intel_band[df_intel_band$interface %in% c("ib", "eth"), ],aes(x=bytes, y=average)) +
  geom_line(aes(col = interface), alpha = 0.5) +
  geom_point(aes(col = interface), size = 1) +
  scale_shape_manual(values = c(15, 17),
                     breaks=c("eth", "ib"),
                     labels=c("GbE","IB FDR")) +  
  geom_errorbar(aes(ymin=average-ste, ymax=average+ste, color=interface, group=interface), width = .25) +
  theme_bw(base_size=12) +
  scale_y_continuous(breaks=c(0,1,2,3,4,5,6,7,8)) +
  scale_x_log10(breaks=c(1,4,16,64,256,1024,4096,16384,65536,262144,1048576,4194304), labels=trans_format("log2", math_format(2^.x))) +
  ylab('Average Bandwidth(GB/s)') +
  xlab('Message Size (Bytes)') +
  scale_colour_manual(values=c( "#BEBEBE", "#303030"),
                    breaks=c("eth", "ib"),
                    labels=c("GbE", "IB FDR")) +
theme_bw(base_size=13) +  
theme (legend.position = "top",
         legend.title = element_blank(),
         legend.justification = "left",
         legend.box.spacing = unit(0, "pt"),
         legend.box.margin = margin(0,0,0,0),
         plot.margin = unit(x = c(0, 0, 0, 0), units = "cm"),
         legend.text = element_text(color = "black"))

#+end_src

#+RESULTS:
[[file:SLIDES/img/Bandwidth-paper.pdf]]

